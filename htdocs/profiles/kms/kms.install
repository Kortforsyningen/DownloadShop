<?php
/**
 * @file
 * Install operations for kms install profile.
 *
 * @author Mikkel Jakobsen <mikkel@kms.dk>
 */

/**
 * Implements hook_install.
 */
function kms_install(){
  $conf = install_profile_info('kms');
  kms_install_save_filters($conf);
  if(module_exists('wysiwyg')) kms_install_save_wysiwyg_settings();
  kms_install_save_roles($conf);
  kms_install_save_node_types();
  kms_install_save_variables($conf);
}

/**
 * Save roles and permissions.
 *
 * @param array $conf
 *   .info settings
 */
function kms_install_save_roles($conf){
  foreach($conf['permissions'] as $name => $perms){
    _kms_install_save_role($name, $perms);
  }
}

/**
 * Save role and permissions.
 *
 * @param string $name
 *   Role name.
 * @param array $perms
 *   Permissions.
 */
function _kms_install_save_role($name, $perms){
  if(!in_array($name, array('anonymous', 'authenticated'))){
    $role = new stdClass();
    $role->name = $name;
    $role->weight = 3;
    user_role_save($role);
    user_role_grant_permissions($role->rid, $perms);
  }else{
    switch ($name) {
      case 'anonymous':
        user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $perms);
        break;
      case 'authenticated':
        user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $perms);
        break;
    }
  }
}

/**
 * Save input filters.
 * Depends on plugin files with a file name pattern like:  FILTERNAME.filter.inc.
 *
 * @param array $conf
 *   .info settings
 */
function kms_install_save_filters($conf){
  $plugins = kms_install_load_plugins('filter');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($filter)) continue;
    filter_format_save((object)$filter);
  }
}

/**
 * Save save variables.
 *
 * @param array $conf
 *   .info settings
 */
function kms_install_save_variables($conf){
  foreach ($conf['variables'] as $variable => $value) {
    variable_set($variable, $value);
  }
}

/**
 * Save wysiwyg settings for various filters.
 * Depends on plugin files with a file name pattern like:  FILTERNAME.wysiwyg.inc.
 */
function kms_install_save_wysiwyg_settings() {
  $plugins = kms_install_load_plugins('wysiwyg');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($wysiwyg)) continue;
    $fields = array(
      'format' => $wysiwyg['format'],
      'editor' => $wysiwyg['editor'],
      'settings' => serialize($wysiwyg['settings']),
    );
    db_insert('wysiwyg')->fields($fields)->execute();
  }
}

/**
 * Save node types.
 * Depends on plugin files with a file name pattern like:  NODETYPE.node_type.inc.
 */
function kms_install_save_node_types(){
  $plugins = kms_install_load_plugins('node_type');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($node_type)) continue;
    $node_type = node_type_set_defaults($node_type);
    node_type_save($node_type);
    node_add_body_field($node_type);
  }
}

/**
 * Load plugins (.inc).
 * @param string $name
 * @return object
 *   Drupal file object.
 */
function kms_install_load_plugins($name){
  return file_scan_directory(
    drupal_get_path('profile', 'kms'),
    "/.*\.$name\.inc$/"
  );
}

/**
 * Enable kms_permissions, kms_users, kms_oci_queue (used for webservices permissions)
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function kms_update_7000(&$sandbox) {
  // Enable relevant kms permission modules.
  module_enable(array(
    'entityreference',
    'kms_oci_queue',
    'kms_permissions',
    'kms_access_bundles',
    'better_exposed_filters',
    'background_batch',
  ));
  // Activate new kms admin theme.
  variable_set('admin_theme', 'kmsadmin');
}

/**
 * Reverting admin_views_user view
 * @author Julien <julien@adapt.dk>
 */
function kms_update_7001(&$sandbox) {
  // Make sure that t is available.
  $t = get_t();
  // Including views module to be sure.
  module_load_include('module', 'views');
  $view = views_get_view('admin_views_user');
//  views_revert_view($view);
  // check anyway just in case
  if ($view->type == $t('Overridden')) {
    // Revert the view.
    $view->delete();
    // Clear its cache.
    ctools_include('object-cache');
    ctools_object_cache_clear('view', $view->name);
    // Give feedback.
    return $t("Reverted the view '@viewname'", array('@viewname' => $view->name));
  }
  else {
    return $t("The view '@viewname' is not overridden.", array('@viewname' => $view->name));
  }
}

/**
 * Create access denied page and set it as default.
 *
 * @author Linas Balke <linas@adapt.dk>
 */
function kms_update_7002(&$sandbox) {
  $user = user_load(1);

  $values = array(
    'type' => 'page',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  // Create Custom bundle.
  $entity = entity_create('node', $values);
  $w = entity_metadata_wrapper('node', $entity);
  $w->title->set('Access denied');
  $body_content = t(
    'You are not authorized to view this page, consider !logging_in.',
    array(
      '!logging_in' => l(t('logging in'), 'user'),
    )
  );
  $w->body->set(array('value' => $body_content, 'format' => 'filtered_html'));
  $w->save();

  variable_set('site_403', 'node/' . $w->getIdentifier());

}

/**
 * Create predefined list of taxonomy terms for bundle colours
 * @author Linas Balke <linas@adapt.dk>
 */
function kms_update_7003(&$sandbox) {

  //Clear cache - essential to revert taxonomy component of access bundles
  drupal_flush_all_caches();

  define('TAXONOMY_NAME', 'bundle_colours');
  $predefined_colours = array('Brun','Graablaa','Grey','Gron','Gul','Hotpink','Koral','Orange','Rod','Sort');
  $vocab = taxonomy_vocabulary_machine_name_load(TAXONOMY_NAME);

  $vid = $vocab->vid;

  foreach ($predefined_colours as $colour) {

    $filepath = drupal_realpath(drupal_get_path('module', 'kms_permissions').'/icons/'.strtolower($colour)."-ikon.png");

    $file = (object) array(
      'uid' => 1,
      'uri' => $filepath,
      'filemime' => file_get_mimetype($filepath),
      'status' => 1,
      'display' => 1,
    );

    $file = file_copy($file, file_build_uri(''), FILE_EXISTS_REPLACE);

    // Create term, assign it to Vocabulary
    $term = new stdClass();
    $term->name = $colour;
    $term->vid = $vid;
    $term->field_default_image[LANGUAGE_NONE][0] = (array)$file;
    taxonomy_term_save($term);
  }
}

/**
 * Enable colorbox, colorbox_node (used for webservices overview on legend icons)
 * @author Linas Balke <linas@adapt.dk>
 */
function kms_update_7004(&$sandbox) {
  // Enable relevant kms permission modules.
  module_enable(array(
    'colorbox',
    'colorbox_node',
  ));
  // Activate new kms admin theme.CREATE USER kms_live WITH PASSWORD 'kms_live'
  variable_set('colorbox_inline', '1');
  variable_set('colorbox_pages', 'imagebrowser*
                img_assist*
                imce*
                node/add/*
                print/*
                printpdf/*
                system/ajax
                system/ajax/*');
}

/**
 * Remove fake table (if any) and store a view for the ftp permisions
 * @author Linas Balke <linas@adapt.dk>
 */
function kms_update_7005(&$sandbox) {
  // Enable the module
  module_enable(array('kms_permissions_ftp'));
  // Create a view to replace the removed table
  db_query("DROP VIEW IF EXISTS external_ftp_users;
    CREATE VIEW external_ftp_users AS
    SELECT u.name as username, array_to_string( array_agg( distinct folders.name ), ',') as directories
    FROM field_data_field_ftp_permissions as ftp
    LEFT JOIN field_data_field_access_bundles as bundle ON ftp.entity_id =  bundle.field_access_bundles_nid
    LEFT JOIN users as u ON u.uid = ftp.entity_id OR u.uid = bundle.entity_id
    LEFT JOIN kms_permissions_ftp_folders as folders ON ftp.field_ftp_permissions_value::integer = folders.fid
    WHERE bundle.bundle = 'user' OR ftp.bundle = 'user'
    GROUP BY u.name;");
}

/**
 * Introducing kms_test module.
 *
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function kms_update_7006(&$sandbox) {
  module_enable(array('kms_test'));
}

/**
 * Granting access to kms oci administration to super user.
 *
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function kms_update_7007(&$sandbox) {
  user_role_grant_permissions(
    KMS_USER_ROLES_SUPERUSER_ID,
    array('administer kms oci queue')
  );
}

/**
 * Remove deprecated views kms_user_webservices (if any) and
 * remove unused fields in user edit form
 * @author Linas Balke <linas@adapt.dk>
 */
function kms_update_7008(&$sandbox) {
  // Create a view to replace the removed table
  db_query("DROP VIEW IF EXISTS kms_user_webservices;");
  // Remove fields from user_fields
  field_delete_field('field_bundles');
  field_delete_field('field_webservices_extra');
  field_delete_field('group_bundles_n_services');
}

/**
 * Activating partner features.
 *
 * @author Andreas Butze <andreas@adapt.dk>
 */
function kms_update_7009(&$sandbox) {
  module_enable(array(
    'imagestyles_partner',
    'partnerpages',
  ));
}

/**
 * Activating permission feature (kms_permissions_feature).
 *
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function kms_update_7010(&$sandbox) {
  module_enable(array('kms_permissions_feature'));
}

/**
 * Enabling "partner side" demo.
 *
 * @author Andreas Butze <andreas@adapt.dk>
 */
function kms_update_7011(&$sandbox) {
  module_enable(array(
    'node_export',
    'uuid',
  ));
  // This breaks for some reason. Import the node export manually instead.
  /*
  $filename = sprintf(
    "%s/%s/%s",
    DRUPAL_ROOT,
    drupal_get_path('profile', 'kms'),
    'kms_partner.node_export.inc'
  );
  $handle = fopen($filename, "r");
  $export = fread($handle, filesize($filename));
  fclose($handle);
  node_export_import($export);
  */
}


/**
* Enable commerce_checkout_order_created_date_update rule.
*
* @author Andrius Prudnikovas <andrius@adapt.dk>
*/
function kms_update_7012() {
  $rules_config = rules_config_load('commerce_checkout_order_created_date_update');
  $rules_config->active = TRUE;
  $rules_config->save();
}