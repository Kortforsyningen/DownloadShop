<?php
/**
 * @file
 * Install operations for kms install profile.
 *
 * @author Mikkel Jakobsen <mikkel@kms.dk>
 */

/**
 * Implements hook_install. 
 */
function kms_install(){
  $conf = install_profile_info('kms');
  kms_install_save_filters($conf);
  if(module_exists('wysiwyg')) kms_install_save_wysiwyg_settings();
  kms_install_save_roles($conf);
  kms_install_save_node_types();
  kms_install_save_variables($conf);
}

/**
 * Save roles and permissions.
 * 
 * @param array $conf
 *   .info settings 
 */
function kms_install_save_roles($conf){
  foreach($conf['permissions'] as $name => $perms){
    _kms_install_save_role($name, $perms);
  }
}

/**
 * Save role and permissions.
 * 
 * @param string $name
 *   Role name.
 * @param array $perms
 *   Permissions.
 */
function _kms_install_save_role($name, $perms){
  if(!in_array($name, array('anonymous', 'authenticated'))){
    $role = new stdClass();
    $role->name = $name;
    $role->weight = 3;
    user_role_save($role);
    user_role_grant_permissions($role->rid, $perms);
  }else{
    switch ($name) {
      case 'anonymous':
        user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $perms);
        break;
      case 'authenticated':
        user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $perms);
        break;
    }
  }
}

/**
 * Save input filters.
 * Depends on plugin files with a file name pattern like:  FILTERNAME.filter.inc.
 * 
 * @param array $conf
 *   .info settings 
 */
function kms_install_save_filters($conf){
  $plugins = kms_install_load_plugins('filter');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($filter)) continue;
    filter_format_save((object)$filter);
  }
}

/**
 * Save save variables.
 * 
 * @param array $conf
 *   .info settings 
 */
function kms_install_save_variables($conf){
  foreach ($conf['variables'] as $variable => $value) {
    variable_set($variable, $value);
  }
}

/**
 * Save wysiwyg settings for various filters.
 * Depends on plugin files with a file name pattern like:  FILTERNAME.wysiwyg.inc. 
 */
function kms_install_save_wysiwyg_settings() {
  $plugins = kms_install_load_plugins('wysiwyg');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($wysiwyg)) continue;
    $fields = array(
      'format' => $wysiwyg['format'],
      'editor' => $wysiwyg['editor'],
      'settings' => serialize($wysiwyg['settings']),
    );
    db_insert('wysiwyg')->fields($fields)->execute();
  }
}

/**
 * Save node types.
 * Depends on plugin files with a file name pattern like:  NODETYPE.node_type.inc. 
 */
function kms_install_save_node_types(){
  $plugins = kms_install_load_plugins('node_type');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($node_type)) continue;
    $node_type = node_type_set_defaults($node_type);
    node_type_save($node_type);
    node_add_body_field($node_type);
  }
}

/**
 * Load plugins (.inc).
 * @param string $name
 * @return object
 *   Drupal file object.
 */
function kms_install_load_plugins($name){
  return file_scan_directory(
    drupal_get_path('profile', 'kms'),
    "/.*\.$name\.inc$/"
  );
}

/**
 * For demo purpose.
 * Creates to bundles: custom and default.
 */
function kms_install_create_demo_bundles() {
  $user = user_load(1);
  $values = array(
    'type' => 'access_bundle',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  // Create Custom bundle
  $entity = entity_create('node', $values);
  $w = entity_metadata_wrapper('node', $entity);
  $w->title->set('Custom bundle');
  $w->field_bundle_webservices_geo->set(array(1,2,7));
  $w->field_bundle_webservices_wfs->set(array(16,1274));
  $w->save();
  // Create Default bundle
  $entity = entity_create('node', $values);
  $w = entity_metadata_wrapper('node', $entity);
  $w->title->set('Default bundle');
  $w->field_bundle_webservices_geo->set(array(4,5,6));
  $w->field_bundle_webservices_wfs->set(array(1333,1633));
  $w->field_default_bundle->set(1);
  $w->save();
}

/**
 * Enable kms_permissions, kms_users, kms_oci_queue (used for webservices permissions)
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function kms_update_7000(&$sandbox) {
  // Enable relevant kms permission modules.
  module_enable(array(
    'entityreference',
    'kms_oci_queue',
    'kms_permissions',
    'kms_access_bundles',
    'better_exposed_filters',
    'background_batch',
  ));
  // Activate new kms admin theme.
  variable_set('admin_theme', 'kmsadmin');
}

/**
 * Reverting admin_views_user view
 * @author Julien <julien@adapt.dk>
 */
function kms_update_7001(&$sandbox) {
  $view = views_get_view('admin_views_user');
  views_revert_view($view);
}

/**
 * Create demo bundles
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function kms_update_7002(&$sandbox) {
  // Demo bundles are dependent on a features revert of kms_access_bundles.
  module_load_include('module', 'features');
  $feature_name = 'kms_access_bundles';
  $feature = features_get_features($feature_name);
  $components = array_keys($feature->info['features']);
  features_revert(array($feature_name => $components));
  // Create demo access bundles.
  kms_install_create_demo_bundles();
}

/**
 * Create access denied page and set it as default
 * @author Linas Balke <linas@adapt.dk>
 */
function kms_update_7003(&$sandbox) {
  $user = user_load(1);
  
   $values = array(
    'type' => 'page',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  // Create Custom bundle
  $entity = entity_create('node', $values);
  $w = entity_metadata_wrapper('node', $entity);
  $w->title->set('Access denied');
  $body_content = 'You are not authorized to view this page, consider '.l('loging in','user');
  $w->body->set(array('value' => $body_content, 'format' => 'filtered_html'));
  $w->save();

  variable_set('site_403', 'node/'.$w->getIdentifier());

}

/**
 * Create predefined list of taxonomy terms for bundle colours
 * @author Linas Balke <linas@adapt.dk>
 */
function kms_update_7004(&$sandbox) {
  define('TAXONOMY_NAME', 'bundle_colours');
  $predefined_colours = array('Brun','Graablaa','Grey','Gron','Gul','Hotpink','Koral','Orange','Rod','Sort');
  $vocab = taxonomy_vocabulary_machine_name_load(TAXONOMY_NAME);
  
  $vid = $vocab->vid;

  foreach ($predefined_colours as $colour) {

    $filepath = drupal_realpath(drupal_get_path('module', 'kms_permissions').'/icons/'.strtolower($colour)."-ikon.png");

    $file = (object) array(
      'uid' => 1,
      'uri' => $filepath,
      'filemime' => file_get_mimetype($filepath),
      'status' => 1,
      'display' => 1,
    );

    $file = file_copy($file, file_build_uri(''), FILE_EXISTS_REPLACE);
    
    // Create term, assign it to Vocabulary
    $term = new stdClass();
    $term->name = $colour;
    $term->vid = $vid; 
    $term->field_default_image[LANGUAGE_NONE][0] = (array)$file; 
    taxonomy_term_save($term);    
  }
}

/**
 * Enable colorbox, colorbox_node (used for webservices overview on legend icons)
 * @author Linas Balke <linas@adapt.dk>
 */
function kms_update_7015(&$sandbox) {
  // Enable relevant kms permission modules.
  module_enable(array(
    'colorbox',
    'colorbox_node',
  ));
  // Activate new kms admin theme.
  variable_set('colorbox_inline', '1');
}
