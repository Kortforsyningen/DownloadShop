<?php
/**
 * @file
 * Install operations for kms install profile.
 *
 * @author Mikkel Jakobsen <mikkel@kms.dk>
 */

/**
 * Implements hook_install. 
 */
function kms_install(){
  $conf = install_profile_info('kms');
  kms_install_save_filters($conf);
  if(module_exists('wysiwyg')) kms_install_save_wysiwyg_settings();
  kms_install_save_roles($conf);
  kms_install_save_node_types();
  kms_install_save_variables($conf);
}

/**
 * Save roles and permissions.
 * 
 * @param array $conf
 *   .info settings 
 */
function kms_install_save_roles($conf){
  foreach($conf['permissions'] as $name => $perms){
    _kms_install_save_role($name, $perms);
  }
}

/**
 * Save role and permissions.
 * 
 * @param string $name
 *   Role name.
 * @param array $perms
 *   Permissions.
 */
function _kms_install_save_role($name, $perms){
  if(!in_array($name, array('anonymous', 'authenticated'))){
    $role = new stdClass();
    $role->name = $name;
    $role->weight = 3;
    user_role_save($role);
    user_role_grant_permissions($role->rid, $perms);
  }else{
    switch ($name) {
      case 'anonymous':
        user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $perms);
        break;
      case 'authenticated':
        user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $perms);
        break;
    }
  }
}

/**
 * Save input filters.
 * Depends on plugin files with a file name pattern like:  FILTERNAME.filter.inc.
 * 
 * @param array $conf
 *   .info settings 
 */
function kms_install_save_filters($conf){
  $plugins = kms_install_load_plugins('filter');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($filter)) continue;
    filter_format_save((object)$filter);
  }
}

/**
 * Save save variables.
 * 
 * @param array $conf
 *   .info settings 
 */
function kms_install_save_variables($conf){
  foreach ($conf['variables'] as $variable => $value) {
    variable_set($variable, $value);
  }
}

/**
 * Save wysiwyg settings for various filters.
 * Depends on plugin files with a file name pattern like:  FILTERNAME.wysiwyg.inc. 
 */
function kms_install_save_wysiwyg_settings() {
  $plugins = kms_install_load_plugins('wysiwyg');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($wysiwyg)) continue;
    $fields = array(
      'format' => $wysiwyg['format'],
      'editor' => $wysiwyg['editor'],
      'settings' => serialize($wysiwyg['settings']),
    );
    db_insert('wysiwyg')->fields($fields)->execute();
  }
}

/**
 * Save node types.
 * Depends on plugin files with a file name pattern like:  NODETYPE.node_type.inc. 
 */
function kms_install_save_node_types(){
  $plugins = kms_install_load_plugins('node_type');
  foreach($plugins as $plugin){
    include $plugin->filename;
    if(empty($node_type)) continue;
    $node_type = node_type_set_defaults($node_type);
    node_type_save($node_type);
    node_add_body_field($node_type);
  }
}

/**
 * Load plugins (.inc).
 * @param string $name
 * @return object
 *   Drupal file object.
 */
function kms_install_load_plugins($name){
  return file_scan_directory(
    drupal_get_path('profile', 'kms'),
    "/.*\.$name\.inc$/"
  );
}

/**
 * For demo purpose.
 * Creates to bundles: custom and default.
 */
function kms_install_create_demo_bundles() {
  $user = user_load(1);
  $values = array(
    'type' => 'access_bundle',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  // Create Custom bundle
  $entity = entity_create('node', $values);
  $w = entity_metadata_wrapper('node', $entity);
  $w->title->set('Custom bundle');
  $w->field_bundle_webservices_geo->set(array(1,2,7));
  $w->field_bundle_webservices_wfs->set(array(16,1274));
  $w->save();
  // Create Default bundle
  $entity = entity_create('node', $values);
  $w = entity_metadata_wrapper('node', $entity);
  $w->title->set('Default bundle');
  $w->field_bundle_webservices_geo->set(array(4,5,6));
  $w->field_bundle_webservices_wfs->set(array(1333,1633));
  $w->field_default_bundle->set(1);
  $w->save();
}

/**
 * Implements hook_update().
 * Enable kms_permissions, kms_users, kms_oci_queue (used for webservices permissions)
 * @author Julien <julien@adapt.dk>
 */
function kms_update_7000(&$sandbox) {
  // Enable relevant kms permission modules.
  module_enable(array(
    'entityreference',
    'kms_oci_queue',
    'kms_permissions',
    'kms_access_bundles',
    'better_exposed_filters',
//    'bundle_copy'
  ));
  // Activate new kms admin theme.
  variable_set('admin_theme', 'kmsadmin');
}

/**
 * Implements hook_update().
 * Reverting admin_views_user view
 * @author Julien <julien@adapt.dk>
 */
function kms_update_7001(&$sandbox) {
  $view = views_get_view('admin_views_user');
  views_revert_view($view);
}

/**
* Implements hook_update().
* Importing user bundle copy
* @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
//function kms_update_7002(&$sandbox) {
//  module_load_include('module', 'bundle_copy');
//  include_once('bundle_copy/user.inc');
////  $form = $form_state = array();
////  $form_state['values']['macro'] = $data;
////  bundle_copy_import_submit($form, $form_state);
//  if (isset($data) && is_array($data)) {
//
//    $modules = module_list();
//    $bc_info = bundle_copy_get_info();
//
//    // Create bundles.
//    foreach ($data['bundles'] as $key => $bundle) {
//      $entity_type = '';
//      if (is_object($bundle)) {
//        $entity_type = $bundle->bc_entity_type;
//      }
//      elseif (is_array($bundle)) {
//        $entity_type = $bundle['bc_entity_type'];
//      }
//      if (!empty($entity_type)) {
//        $existing_bundles = _bundle_copy_bundle_info($entity_type);
//        $bundle_save_callback = $bc_info[$entity_type]['bundle_save_callback'];
//        $bundle_info = $bundle_save_callback($bundle);
//        if (!isset($existing_bundles[$key])) {
//          drupal_set_message(t('%bundle bundle has been created.', array('%bundle' => $bundle->name)));
//        }
//        else {
//          drupal_set_message(t('%bundle bundle has been updated.', array('%bundle' => $bundle->name)));
//        }
//      }
//    }
//
//    // Create or update fields and their instances
//    if (isset($data['fields'])) {
//      foreach ($data['fields'] as $key => $field) {
//
//        // Check if the field module exists.
//        $module = $field['module'];
//        if (!isset($modules[$module])) {
//          drupal_set_message(t('%field_name field could not be created because the module %module is disabled or missing.', array('%field_name' => $key, '%module' => $module)), 'error');
//          continue;
//        }
//
//        if (isset($data['instances'][$key])) {
//
//          // Create or update field.
//          $prior_field = field_read_field($field['field_name'], array('include_inactive' => TRUE));
//          if (!$prior_field) {
//            field_create_field($field);
//            drupal_set_message(t('%field_name field has been created.', array('%field_name' => $key)));
//          }
//          else {
//            $field['id'] = $prior_field['id'];
//            field_update_field($field);
//            drupal_set_message(t('%field_name field has been updated.', array('%field_name' => $key)));
//          }
//
//          // Create or update field instances.
//          foreach ($data['instances'][$key] as $ikey => $instance) {
//
//            // Make sure the needed key exists.
//            if (!isset($instance['field_name'])) {
//              continue;
//            }
//
//            $prior_instance = field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
//            if (!$prior_instance) {
//              field_create_instance($instance);
//              drupal_set_message(t('%field_name instance has been created for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
//            }
//            else {
//              $instance['id'] = $prior_instance['id'];
//              $instance['field_id'] = $prior_instance['field_id'];
//              field_update_instance($instance);
//              drupal_set_message(t('%field_name instance has been updated for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
//            }
//          }
//        }
//      }
//    }
//
//    // Create / update fieldgroups.
//    if (isset($data['fieldgroups'])) {
//      if (module_exists('field_group')) {
//        ctools_include('export');
//        $existing_field_groups = field_group_info_groups();
//        foreach ($data['fieldgroups'] as $identifier => $fieldgroup) {
//          if (isset($existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name])) {
//            $existing = $existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name];
//            $fieldgroup->id = $existing->id;
//            if (!isset($fieldgroup->disabled)) {
//              $fieldgroup->disabled = FALSE;
//            }
//            ctools_export_crud_save('field_group', $fieldgroup);
//            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
//            drupal_set_message(t('%fieldgroup fieldgroup has been updated for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
//          }
//          else {
//            unset($fieldgroup->id);
//            unset($fieldgroup->export_type);
//            if (!isset($fieldgroup->disabled)) {
//              $fieldgroup->disabled = FALSE;
//            }
//            ctools_export_crud_save('field_group', $fieldgroup);
//            $fieldgroup->export_type = 1;
//            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
//            drupal_set_message(t('%fieldgroup fieldgroup has been saved for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
//          }
//        }
//      }
//      else {
//        drupal_set_message(t('The fieldgroups could not be saved because the <em>Field group</em> module is disabled or missing.'), 'error');
//      }
//    }
//
//    // Clear caches.
//    field_info_cache_clear();
//    if (module_exists('field_group')) {
//      cache_clear_all('field_groups', 'cache_field');
//    }
//  }
//  else {
//    drupal_set_message(t('The pasted text did not contain any valid export data.'), 'error');
//  }
//}

/**
 * Implements hook_update().
 * Create demo bundles
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function kms_update_7002(&$sandbox) {
  kms_install_create_demo_bundles();
}