<?php
/**
 * File
 * Kms subuser module.
 * Handles users of users functionality (subusers).
 */

/**
 * Fake mail used for subusers.
 */
define('KMS_SUBUSER_FAKE_MAIL', 'subuser@fake.mail');
define('KMS_SUBUSER_ROLE_ID', 9);
define('KMS_SUBUSER_ROLE_NAME', 'subuser');

/**
 * Implements hook_ctools_plugin_directory
 */
function kms_subuser_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  if ($module == 'ctools') {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_menu().
 */
function kms_subuser_menu() {
  $items = array();

  $items['kms-subuser/ajax/load-view/%'] = array(
    'title' => 'Subuser load view',
    'page callback' => 'kms_subuser_render_view',
    'access arguments' => array('access content'),
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function kms_subuser_theme($existing, $type, $theme, $path) {
  return array(
    'subuser_add_user_popup' => array('variables' => array('master_uid' => NULL)),
  );
} 

/**
 * Drupal form.
 * Add subuser.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 * @param int $master_uid
 *   The uid of the creator (master).
 *
 * @return array
 *   Drupal form array.
 */
function kms_subuser_add_form($form, &$form_state, $master_uid) {
  global $user;
  
  $form['#user'] = $user;
  $form['#prefix'] = '<div id="kms-subuser-add-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#submit'][] = '_kms_user_submit_insert_user_oracle';
  
  $form['master_uid'] = array('#type' => 'hidden', '#value' => $master_uid);

  $form['add_subuser'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Add subuser'),
  );

  $states_add_subuser = array(
    'visible' => array(
      ':input[name="add_subuser"]' => array('checked' => TRUE),
    ),
  );
  $form['user_pass'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('user-pass-wrapper'),
    ),
  );
  $form['user_pass']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Username'), 
    '#size' => 16, 
    '#maxlength' => 128, 
    '#required' => TRUE,
    '#states' => $states_add_subuser,
    '#element_validate' => array('_kms_user_validate_username'),
  );
  $form['user_pass']['pass'] = array(
    '#type' => 'textfield', 
    '#size' => 16, 
    '#maxlength' => 128, 
    '#title' => t('Password'), 
    '#required' => TRUE,
    '#states' => $states_add_subuser,
  );
  $form['user_remark'] = array(
    '#title' => t('User remark'),
    '#type' => 'textarea',
    '#description' => t('Optional remarks about the user.'),
    '#states' => $states_add_subuser,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('kms_subuser_ajax_form_submit'),
    '#ajax' => array(
      'wrapper' => 'kms-subuser-add-form-wrapper',
      'callback' => 'kms_subuser_ajax_callback',
    ),
    '#states' => $states_add_subuser,
  );

  return $form;
}

/**
 * Add subuser ajax submit handler.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form array.
 *
 * @return void.
 */
function kms_subuser_ajax_form_submit(&$form, &$form_state) {
  global $user;

  $form_state['rebuild'] = FALSE;
  $values = $form_state['values'];
  $name = trim($values['name']);
  $pass = trim($values['pass']);

  $subuser = array(
    'name' => $name,
    'pass' => $pass,
    'mail' => KMS_SUBUSER_FAKE_MAIL,
    'init' => KMS_SUBUSER_FAKE_MAIL,
    'status' => 1,
    'access' => REQUEST_TIME,
    'roles' => kms_subuser_default_roles(),
  );

  $uwrapper = entity_metadata_wrapper('user', $user);
  // adapt_debug('mikkel', $types = _kms_csv_user_types($uwrapper));
  // $account returns user object
  $account = user_save(null, $subuser);
  $suwrapper = entity_metadata_wrapper('user', $account);
  // Save user remark.
  $suwrapper->field_user_remark->set($values['user_remark']);
  // Save cleartext passwd.
  $suwrapper->field_pass_clear->set($pass);
  // Save user type (same as master).
  $suwrapper->field_user_type->set(array_keys(_kms_csv_user_types($uwrapper)));
  $suwrapper->save();

  // Save subuser relation.
  kms_subuser_save_relation($user->uid, $account->uid);
  // Insert user data into oracle.
  $account->pass = $pass;
  kms_subuser_insert_account_oracle($user, $account);
}

/**
 * Validate add-subuser-form.
 * 
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form array.
 *
 * @return void.
 */
function kms_subuser_add_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  $user = user_load_by_name($values['name']);
  if ($user) {
    form_set_error("name", t('The username already exists.'));
  }
  user_validate_name($values['name']);
  _kms_user_user_pass_validate_chars($values['pass']);
}

/**
 * Drupal ajax callback function.
 * Returns form array. That's it.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form array.
 *
 * @return array
 *   Drupal form array.
 */
function kms_subuser_ajax_callback(&$form, &$form_state) {
  return $form;
}

/**
 * Render "add subuser" - pop up.
 *
 * @param array $vars
 *   Theme variables.
 *
 * @return string
 *   HTML.
 */
function theme_subuser_add_user_popup($vars) {
  $module_path = drupal_get_path('module', 'kms_subuser');
  $lib_datatables =  "$module_path/library/datatables";
  $output = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => array('subuser-popup'),
    ),
    '#attached' => array(
      'js' => array(
        array(
          'data' => "$module_path/js/subuser_popup.js",
          'type' => 'file'
        ),
        array(
          'data' => "$lib_datatables/media/js/jquery.dataTables.min.js",
          'type' => 'file'
        ),
      ),
      'css' => array(
        array(
          'data' => "$module_path/css/subuser_popup.css",
        ),
        array(
          'data' => "$lib_datatables/media/css/demo_table.css",
        ),
      ),
    ),
    'form' => drupal_get_form('kms_subuser_add_form', $vars['master_uid']),
  );
  return drupal_render($output);
}

/**
 * Render view as json.
 *
 * @param array $args
 *   Views arguments.
 * @param boolean $json
 *   Render as JSON or not.
 * @param string $name
 *   View name.
 * @param string $display
 *   View display
 *
 * @return string
 *   Rendered view.
 */
function kms_subuser_render_view($args, $json = TRUE, $name = 'kms_subuser', $display = 'block_1'){
  $output = views_embed_view($name, $display, $args);
  if ($json) {
    drupal_json_output($output);
    drupal_exit();
  }
  return $output;
}

/**
 * Save subuser relation via the Relation module.
 *
 * @param integer $master_uid
 *   The uid of the creator (master).
 * @param integer $slave_uid
 *   The uid of the 'slave' (subuser).
 *
 * @return void.
 */
function kms_subuser_save_relation($master_uid, $slave_uid) {
  $endpoints = array(
    array('entity_type' => 'user', 'entity_id' => $slave_uid),
    array('entity_type' => 'user', 'entity_id' => $master_uid),
  );
  $relation = relation_create('subuser', $endpoints);
  relation_save($relation);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_subuser_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'kms_subuser_validate_subuser_exist';
}

/**
 * Validate if user is a subuser.
 * If user is a subuser then throw a form error.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 *
 * @return void
 */
function kms_subuser_validate_subuser_exist($form, &$form_state) {
  // $values = $form_state['values'];
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }
  if (kms_subuser_is_subuser($account)) {
    form_set_error(
      'name',
      t(
        'Sorry, %name is registered as a subuser. Request password is not allowed for this type of user.',
        array('%name' => $name)
      )
    );
  }
}

/**
 * Check if user is a subuser.
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return boolean
 */
function kms_subuser_is_subuser($user) {
  // If $user is a uid then load user with that.
  if (is_int($user)) {
    $user = user_load($user);
  }
  // If user has 'subuser' role and has a related entity.
  return in_array(KMS_SUBUSER_ROLE_NAME, $user->roles)
  && relation_get_related_entity('user', $user->uid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_subuser_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $account = $form['#user'];
  if (!kms_subuser_is_subuser($account)) {
    return;
  }
  // Prevent editing of user name.
  $form['account']['name']['#disabled'] = TRUE;
  // Manipulate form.
  $form['#after_build'][] = 'kms_subuser_user_profile_after_build';
  // Make sure that subuser role always is set.
  array_unshift($form['#submit'], 'kms_subuser_profile_submit');
}

/**
 * Form after build function.
 */
function kms_subuser_user_profile_after_build($form, &$form_state) {
   $hide_elements = array(
    'field_terms_and_conditions',
    'field_billing_address',
    'field_bundles',
    'field_newsletter',
    'field_updated',
    'field_user_remark',
    'field_expire_date',
    'field_debtor_nr',
    'field_webservices_extra',
    'field_kms_user_id',
    'field_address',
    'field_contact_me',
    'field_phone',
    'field_user_type_info',
    'field_user_type',
    'masquerade',
    'metatags'
  );
  foreach ($form as $k => &$v) {
    if(in_array($k, $hide_elements)) {
      $v['#access'] = FALSE;
    }
  }
  // Hide account elements.
  $form['account']['mail']['#access'] = FALSE;
  $form['account']['roles']['#access'] = FALSE;
  $form['account']['status']['#access'] = FALSE;
  $form['account']['pass']['#access'] = FALSE;
  $form['account']['current_pass']['#access'] = FALSE;
  // Make sure that user remark is shown.
  $form['field_user_remark']['#access'] = TRUE;

  return $form;
}

/**
 * Returns default roles set on a subuser.
 *
 * @return array
 *   Subuser roles.
 */
function kms_subuser_default_roles() {
  return array(
    DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    KMS_SUBUSER_ROLE_ID => KMS_SUBUSER_ROLE_NAME,
  );
}

/**
 * Subuser profile submit handler.
 * Makes sure that default subuser roles are always set.
 */
function kms_subuser_profile_submit($form, &$form_state) {
  foreach (kms_subuser_default_roles() as $k => $v) {
    $form_state['values']['roles'][$k] = TRUE;
  }
}

/**
 * Save inserted subuser data into Oracle.
 *
 * @param object $user
 *   Drupal user object (master).
 * @param object $account
 *   Drupal user object (subuser).
 *   
 * @return void
 */
function kms_subuser_insert_account_oracle($user, $account) {
  // Get default data.
  $data = _kms_user_oracle_default_user_data($account);
  // Set master user id.
  $data['user_extra'][':master_userid'] = $user->uid;
  // Update oracle user data.
  if (module_exists('kms_oci')) {
    if(!kms_oci_check_userid_exists($account->uid, 'smuser_extra')){
      kms_oci_insert($data['user_extra'], 'smuser_extra');
    }
    if(!kms_oci_check_userid_exists($account->uid, 'smuser')){
      kms_oci_insert($data['user'], 'smuser');
    }
  }
}
