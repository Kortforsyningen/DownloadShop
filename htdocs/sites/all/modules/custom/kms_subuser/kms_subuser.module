  <?php
/**
 * File
 * Kms subuser module.
 * Handles users of users functionality (subusers).
 */

/**
 * Fake mail used for subusers.
 */
define('KMS_SUBUSER_FAKE_MAIL', 'subuser@fake.mail');
define('KMS_SUBUSER_ROLE_ID', 9);
define('KMS_SUBUSER_ROLE_NAME', 'subuser');

/**
 * Implements hook_ctools_plugin_directory
 */
function kms_subuser_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  if ($module == 'ctools') {
    return "plugins/$plugin";
  }
}

function kms_subuser_init() {
  // Shitty way of getting around preprocess_css problem.
  if (current_path() == 'edit/profile') {
    $module_path = drupal_get_path('module', 'kms_subuser');
    
    drupal_add_css(
      "$module_path/css/subuser_popup.css",
      array('preprocess' => FALSE)
    );
    drupal_add_css(
      "$module_path/css/subuser_datatables.css",
      array('preprocess' => FALSE)
    );
  }

}

/**
 * Implements hook_menu().
 */
function kms_subuser_menu() {
  $items = array();

  $items['kms-subuser/ajax/load-view/%'] = array(
    'title' => 'Subuser load view',
    'page callback' => 'kms_subuser_render_view',
    'access arguments' => array('access content'),
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['admin/kms-subuser/%ctools_js/%user/%'] = array(
    'title' =>'Administer subuser',
    'description' => 'Change values or cancel account',
    'access callback' => 'kms_subuser_administer_access',
    'access arguments' => array(3),
    'page callback' => 'kms_subuser_administer_popup',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function kms_subuser_theme($existing, $type, $theme, $path) {
  return array(
    'subuser_add_user_popup' => array(
      'variables' => array('master_user' => NULL),
    ),
    'subuser_info' => array(
      'variables' => array('master_user' => NULL),
    ),
  );
} 

/**
 * Drupal form.
 * Add subuser.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 * @param object $master_user
 *   The user object of the creator (master).
 *
 * @return array
 *   Drupal form array.
 */
function kms_subuser_form($form, &$form_state, $master_user, $mode = 'insert') {
  global $user;
  
  $ajax_wrapper = 'kms-subuser-' . $mode . '-form-wrapper';

  $form['#user'] = $user;
  $form['#prefix'] = '<div id="' . $ajax_wrapper . '">';
  $form['#suffix'] = '<div class="clear-both">&nbsp;</div></div>';
  // $form['#submit'][] = '_kms_user_submit_insert_user_oracle';
  
  $form['master_uid'] = array('#type' => 'hidden', '#value' => $master_user->uid);

  // $add_subuser_btn = theme(
  //   'image',
  //   array('path' => drupal_get_path('module', 'kms_subuser') . '/images/checkbutton.jpg')
  // );

  // $form['add_subuser'] = array(
  //   '#type' => 'radios',
  //   '#options' => array(1 => $add_subuser_btn),
  // );

  // $states_add_subuser = array(
  //   'visible' => array(
  //     ':input[name="add_subuser"]' => array('checked' => TRUE),
  //   ),
  // );
  $form['user_pass'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('user-pass-wrapper'),
    ),
  );
  $form['user_pass']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Username'), 
    '#size' => 16, 
    '#maxlength' => 128,
    '#required' => TRUE,
    // '#states' => $states_add_subuser,
    '#element_validate' => array('_kms_user_validate_username'),
  );
  $form['user_pass']['pass'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#maxlength' => 128,
    '#title' => t('Password'),
    '#required' => TRUE,
    // '#states' => $states_add_subuser,
  );
  $form['user_expire'] = array(
    '#title' => t('Expire date'),
    '#type' => 'date_popup',
    '#date_type' => DATE_UNIX,
    '#size' => 16,
    '#description' => t('(optional) Select when user expires. Leave empty for never.'),
    '#date_format' => 'd.m.Y',
    // '#states' => $states_add_subuser,
  );
  $form['user_remark'] = array(
    '#title' => t('User remark'),
    '#type' => 'textarea',
    '#description' => t('Optional remarks about the user.'),
    // '#states' => $states_add_subuser,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('kms_subuser_insert_form_submit'),
    '#ajax' => array(
      'wrapper' => $ajax_wrapper,
      'callback' => 'kms_subuser_ajax_callback',
    ),
    // '#states' => $states_add_subuser,
  );

  return $form;
}

/**
 * Add subuser ajax submit handler.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form array.
 *
 * @return void.
 */
function kms_subuser_insert_form_submit(&$form, &$form_state) {
  global $user;
  $form_state['rebuild'] = FALSE;
  $values = $form_state['values'];
  $name = trim($values['name']);
  $pass = trim($values['pass']);

  $subuser = array(
    'name' => $name,
    'pass' => $pass,
    'mail' => KMS_SUBUSER_FAKE_MAIL,
    'init' => KMS_SUBUSER_FAKE_MAIL,
    'status' => 1,
    'access' => REQUEST_TIME,
    'roles' => kms_subuser_default_roles(),
  );

  $uwrapper = entity_metadata_wrapper('user', $user);
  // $account returns user object
  $account = user_save(null, $subuser);
  $suwrapper = entity_metadata_wrapper('user', $account);
  // Save user remark.
  $suwrapper->field_user_remark->set($values['user_remark']);
  // Save expire.
  if(!empty($values['user_expire'])){
    $suwrapper->field_expire_date->set(strtotime($values['user_expire']));
  }
  // Save cleartext passwd.
  $suwrapper->field_pass_clear->set($pass);
  // Save user type (same as master).
  $suwrapper->field_user_type->set(array_keys(_kms_csv_user_types($uwrapper)));
  $suwrapper->save();

  // Save subuser relation.
  kms_subuser_save_relation($user->uid, $account->uid);
  // Clone permissions (bundles, permissions etc.)
  kms_permissions_clone_perms($user, $account);
  // Insert user data into oracle.
  $account->pass = $pass;
  kms_subuser_insert_account_oracle($user, $account);
  
  $subuser = kms_subuser_load($account->uid);
  if ($subuser) {
    kms_subuser_send_mail('register_subuser', $subuser);
  }
  else{
    drupal_set_message(t('There was a problem creating the subuser.'), 'error');
  }
}

/**
 * Add subuser ajax submit handler.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form array.
 *
 * @return void.
 */
function kms_subuser_update_form_submit(&$form, &$form_state) {

  $form_state['rebuild'] = FALSE;
  $values = $form_state['values'];

  $subuser = user_load($values['subuser_uid']);
  $master = user_load($values['master_uid']);
  $data = _kms_user_oracle_default_user_data($subuser, 'update');

  $suwrapper = entity_metadata_wrapper('user', $subuser);
  // Set name.
  if(!empty($values['name'])){
    $suwrapper->name->set($values['name']);
    $data['user'][':name'] = $values['name'];
  }
  // Set user remark.
  if(!empty($values['user_remark'])){
    $suwrapper->field_user_remark->set($values['user_remark']);
    $data['user'][':password'] = $values['pass'];
  }
  // Set expire.
  if(!empty($values['user_expire'])){
    $suwrapper->field_expire_date->set(strtotime($values['user_expire']));
    if (strtotime($values['user_expire']) > time()) {
      $suwrapper->status = 1;
      $data['user'][':disabled'] = '0';
    } 
  }
  // Set password and cleartext passwd.
  if(!empty($values['pass'])){
    $suwrapper->field_pass_clear->set($values['pass']);
    $data['user'][':password'] = $values['pass'];
  }
  // Save subuser entity.
  $suwrapper->save();
  // Save password.
  if(!empty($values['pass'])){
    $saved_subuser = user_load($subuser->uid);
    $edit['pass'] = $values['pass'];
    user_save($saved_subuser, $edit);
  }
  // Update Oracle.
  kms_oci_update_user($data['user'], 'smuser', kms_user_get_userid($subuser));
}

/**
 * Validate add-subuser-form.
 * 
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form array.
 *
 * @return void.
 */
function kms_subuser_insert_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  $user = user_load_by_name($values['name']);
  if ($user) {
    form_set_error("name", t('The username already exists.'));
  }
  user_validate_name($values['name']);
  _kms_user_user_pass_validate_chars($values['pass']);
}

/**
 * Drupal ajax callback function.
 * Returns form array. That's it.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form array.
 *
 * @return array
 *   Drupal form array.
 */
function kms_subuser_ajax_callback(&$form, &$form_state) {
  return $form;
}

/**
 * Render "add subuser" - pop up.
 *
 * @param array $vars
 *   Theme variables.
 *
 * @return string
 *   HTML.
 */
function theme_subuser_add_user_popup($vars) {
  $module_path = drupal_get_path('module', 'kms_subuser');
  $lib_datatables =  "$module_path/library/datatables";

  ctools_include('modal');
  ctools_modal_add_js();

  $output = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => array('subuser-popup'),
    ),
    '#attached' => array(
      'js' => array(
        array(
          'data' => "$module_path/js/subuser_popup.js",
          'type' => 'file'
        ),
        array(
          'data' => "$lib_datatables/media/js/jquery.dataTables.min.js",
          'type' => 'file'
        ),
      ),
    ),
    'title' => array(
      '#type' => 'markup',
      '#markup' => '<h2>' . t('Subuser administration') . '</h2>',
    ),
    'popup' => array(
      '#theme' => 'link',
      '#text' => '<button>' . t('Add subuser') . '</button>',
      '#path' => 'admin/kms-subuser/nojs/0/insert',
      '#options' => array(
        'attributes' => array('class' => 'ctools-use-modal'),
        'html' => TRUE,
      ),
    ),
    'popup_description' => array(
      '#type' => 'markup',
      '#markup' => t('A subuser will be created and connected to your user account. The subuser can be time-limited.'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    ),
  );

  return drupal_render($output);
}

/**
 * Render certain user fields for a subuser.
 *
 * @param array $vars
 *   Drupal theme vars.
 *
 * @return string
 *   HTML.
 */
function theme_subuser_info($vars) {
  $master_user = $vars['master_user'];

  $uwrapper = entity_metadata_wrapper('user', $master_user);
  $module_path = drupal_get_path('module', 'kms_subuser');
  
  $output = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => array('subuser-info'),
    ),
    'firstname' => array(
      'label' => array(
        '#markup' => t('First name'),
      ),
      'value' => array(
        '#markup' => $uwrapper->field_address->first_name->value(),
      ),
    ),
    'lastname' => array(
      'label' => array(
        '#markup' => t('Last name'),
      ),
      'value' => array(
        '#markup' => $uwrapper->field_address->last_name->value(),
      ),
    ),
    'usertype' => array(
      'label' => array(
        '#markup' => t('Company'),
      ),
      'value' => array(
        '#markup' => implode(', ', _kms_csv_user_types($uwrapper)),
      ),
    ),
    'phone' => array(
      'label' => array(
        '#markup' => t('Phone'),
      ),
      'value' => array(
        '#markup' => $uwrapper->field_phone->value(),
      ),
    ),
    'mail' => array(
      'label' => array(
        '#markup' => t('Mail'),
      ),
      'value' => array(
        '#markup' => $uwrapper->mail->value(),
      ),
    ),
  );
  
  array_walk($output, function(&$el) {
    if (!is_array($el)) {
      return;
    }
    if (array_key_exists('label', $el)) {
      $el['label']['#type'] = 'markup';
      $el['label']['#prefix'] = '<label>';
      $el['label']['#suffix'] = ':</label>';
    }
    if (array_key_exists('value', $el)) {
      $el['value']['#type'] = 'markup';
      $el['value']['#prefix'] = '<p>';
      $el['value']['#suffix'] = '</p>';
    }
  });

  return drupal_render($output);
}

/**
 * Render view as json.
 *
 * @param array $args
 *   Views arguments.
 * @param boolean $json
 *   Render as JSON or not.
 * @param string $name
 *   View name.
 * @param string $display
 *   View display
 *
 * @return string
 *   Rendered view.
 */
function kms_subuser_render_view($args, $json = TRUE, $name = 'kms_subuser', $display = 'block_1'){
  $output = views_embed_view($name, $display, $args);
  if ($json) {
    drupal_json_output($output);
    drupal_exit();
  }
  return $output;
}

/**
 * Save subuser relation via the Relation module.
 *
 * @param integer $master_uid
 *   The uid of the creator (master).
 * @param integer $slave_uid
 *   The uid of the 'slave' (subuser).
 *
 * @return void.
 */
function kms_subuser_save_relation($master_uid, $slave_uid) {
  $endpoints = array(
    array('entity_type' => 'user', 'entity_id' => $slave_uid),
    array('entity_type' => 'user', 'entity_id' => $master_uid),
  );
  $relation = relation_create('subuser', $endpoints);
  relation_save($relation);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_subuser_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'kms_subuser_validate_subuser_exist';
}

/**
 * Validate if user is a subuser.
 * If user is a subuser then throw a form error.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 *
 * @return void
 */
function kms_subuser_validate_subuser_exist($form, &$form_state) {
  // $values = $form_state['values'];
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }
  if (kms_subuser_is_subuser($account)) {
    form_set_error(
      'name',
      t(
        'Sorry, %name is registered as a subuser. Request password is not allowed for this type of user.',
        array('%name' => $name)
      )
    );
  }
}

/**
 * Check if user is a subuser.
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return boolean
 */
function kms_subuser_is_subuser($user) {
  // If $user is a uid then load user with that.
  if (is_int($user)) {
    $user = user_load($user);
  }
  $user_roles = !empty($user->roles) ? $user->roles : array();
  // If user has 'subuser' role and has a related entity.
  return in_array(KMS_SUBUSER_ROLE_NAME, $user_roles)
  && relation_get_related_entity('user', $user->uid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_subuser_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $account = $form['#user'];
  
  // Bypass email dupes vaildation if the account is subuser.
  kms_subuser_form_user_account_form_alter($form, $form_state, $form_id);
  
  // If the user account being edited is not a subuser account
  // or the user has uid = 1
  // we will not make any modifications.
  if ($user->uid == 1 || !kms_subuser_is_subuser($account)) {
    return;
  }
  $master_user = relation_get_related_entity('user', $account->uid);
  // Show subuser relation.
  $form['#prefix'] = t(
    '%subuser is a subuser of %master',
    array('%subuser' => $account->name, '%master' => $master_user->name)
  );
  // Prevent editing of user name.
  $form['account']['name']['#disabled'] = TRUE;
  // Manipulate form.
  $form['#after_build'][] = 'kms_subuser_user_profile_after_build';
  // Make sure that subuser role always is set.
  array_unshift($form['#submit'], 'kms_subuser_profile_submit');
  // If the logged in user is a subuser strip down form.
  if (kms_subuser_is_subuser($user)) {
    unset($form['actions']);
  }

  
}

/**
 * Replace user_account_form_validate with _kms_subuser_account_form_validate.
 * The idea comes from: http://drupal.org/project/sharedemail.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function kms_subuser_form_user_account_form_alter(&$form, &$form_state, $form_id) {
  if (is_array($form['#validate'])) {
    $key = array_search('user_account_form_validate', $form['#validate'], TRUE);
    if ( $key !== FALSE ) {
      $form['#validate'][$key] = '_kms_subuser_account_form_validate';
    }
  }
}

/**
 * Validate function used for bypassing email dupes.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form_state array.
 *
 * @return void
 */
function _kms_subuser_account_form_validate($form, &$form_state) {
  $account = $form['#user'];
  $mail = trim($form_state['values']['mail']);
  
  if (kms_subuser_is_subuser($account)) {
    $form_state['values']['mail'] = uniqid() . "_$mail";
  }

  // Call the User module's validate function.
  user_account_form_validate($form, $form_state);

  // Restore the actual e-mail address.
  $form_state['values']['mail'] = $mail;
}

/**
 * Form after build function.
 */
function kms_subuser_user_profile_after_build($form, &$form_state) {
   $hide_elements = array(
    'field_terms_and_conditions',
    'field_billing_address',
    'field_bundles',
    'field_newsletter',
    'field_updated',
    'field_user_remark',
    // 'field_expire_date',
    'field_debtor_nr',
    'field_webservices_extra',
    'field_kms_user_id',
    'field_address',
    'field_contact_me',
    'field_phone',
    'field_user_type_info',
    'field_user_type',
    'masquerade',
    'metatags'
  );
  foreach ($form as $k => &$v) {
    if(in_array($k, $hide_elements)) {
      $v['#access'] = FALSE;
    }
  }
  // Hide account elements.
  $form['account']['mail']['#access'] = FALSE;
  $form['account']['roles']['#access'] = FALSE;
  $form['account']['status']['#access'] = FALSE;
  $form['account']['pass']['#access'] = FALSE;
  $form['account']['current_pass']['#access'] = FALSE;
  // Make sure that user remark is shown.
  $form['field_user_remark']['#access'] = TRUE;

  return $form;
}

/**
 * Returns default roles set on a subuser.
 *
 * @return array
 *   Subuser roles.
 */
function kms_subuser_default_roles() {
  return array(
    DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    KMS_SUBUSER_ROLE_ID => KMS_SUBUSER_ROLE_NAME,
  );
}

/**
 * Subuser profile submit handler.
 * Makes sure that default subuser roles are always set.
 */
function kms_subuser_profile_submit($form, &$form_state) {
  foreach (kms_subuser_default_roles() as $k => $v) {
    $form_state['values']['roles'][$k] = TRUE;
  }
}

/**
 * Save inserted subuser data into Oracle.
 *
 * @param object $user
 *   Drupal user object (master).
 * @param object $account
 *   Drupal user object (subuser).
 *   
 * @return void
 */
function kms_subuser_insert_account_oracle($user, $account) {
  // Get default data.
  $data = _kms_user_oracle_default_user_data($account, 'insert');
  // Set master user id.
  $data['user_extra'][':master_userid'] = $user->uid;
  // Insert oracle user data.
  if (!module_exists('kms_oci')) {
    return;
  }

  $jobs = array();
  $jobs[] = KmsOciQueueJob::create(array(
    'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
    'action_details' => format_string(
      'Inserting new subuser: @subuser_details.',
      array(
        '@subuser_details' => json_encode($data),
      )
    ),
    'params' => array(
      array($data['user'], 'smuser', TRUE),
      array($data['user_extra'], 'smuser_extra', TRUE),
    ),
  ));
  // Populate user permission tables of the user in Oracle
  // with permissions from the source user bundles.
  $bids = kms_permissions_get_bids_by_uid($user->uid);

  // Get separate source user permissions and add them to $perms array.
  $perms = array();
  _kms_permissions_get_separate_perms_by_uid($user->uid, $perms);

  $job_params = array(
    'action' => KMS_OCI_QUEUE_ACTION_PERMS_ATTACH,
    'action_details' => format_string(
      'Attaching bundles: @bundles to subuser: @subuser.',
      array(
        '@bundles' => implode(', ', $bids),
        '@subuser' => $account->uid,
      )
    ),
    'params' => array(
      'uid' => $account->uid,
      'bids' => $bids,
      'perms' => $perms,
    ),
  );
  $jobs[] = KmsOciQueueJob::create($job_params);
  $jobs[] = KmsOciQueueJob::create($job_params, 'kms_permissions');
  $job_group = new KmsOciQueueJobGroup();
  $job_group->add($jobs);
}

/**
 * Save updated subuser data into Oracle.
 *
 * @param object $user
 *   Drupal user object (master).
 * @param object $account
 *   Drupal user object (subuser).
 *   
 * @return void
 */
function kms_subuser_update_account_oracle($user, $account) {
  // Get default data.
  $data = _kms_user_oracle_default_user_data($account, 'update');
  // Set master user id.
  $data['user_extra'][':master_userid'] = $user->uid;
  // Update oracle user data.
  if (module_exists('kms_oci')) {
//    $kms_userid = kms_user_get_userid($account);
//    kms_oci_update_user($data['user_extra'], 'smuser_extra', $kms_userid);
//    kms_oci_update_user($data['user'], 'smuser', $kms_userid);
    KmsOciQueueJob::create(array(
      'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
      'action_details' => format_string(
        'Updating subuser: @subuser_details.',
        array(
          '@subuser_details' => json_encode($data),
        )
      ),
      'params' => array(
        array($data['user'], 'smuser', FALSE),
        array($data['user_extra'], 'smuser_extra', FALSE),
      ),
    ));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_subuser_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {
  $mail_text = _kms_subuser_mail_text('register_subuser');

  $form['email_register_subuser'] = array(
    '#type' => 'fieldset',
    '#title' => t('New subuser created'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Edit the e-mail messages sent to the creator of a subuser account.'),
    '#group' => 'email',
  );

  $form['email_register_subuser']['user_mail_register_subuser_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $mail_text['subject'],
    '#maxlength' => 180,
  );
  $form['email_register_subuser']['user_mail_register_subuser_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $mail_text['body'],
    '#rows' => 15,
  );
}

/**
 * Implements hook_mail().
 */
function kms_subuser_mail($key, &$message, $params) {
  switch ($key) {
    case 'register_subuser':
      $mail_text = _kms_subuser_mail_text('register_subuser');
      $message['subject'] = token_replace(
        $mail_text['subject'],
        array('subuser' => $params['subuser']),
        array('language' => language_default(),
        'callback' => 'user_mail_tokens',
        'sanitize' => FALSE,
        'clear' => TRUE
        )
      );
      $message['body'][] = token_replace(
        $mail_text['body'],
        array('subuser' => $params['subuser']),
        array('language' => language_default(),
        'callback' => 'user_mail_tokens',
        'sanitize' => FALSE,
        'clear' => TRUE
        )
      );
      break;
  }
}

/**
 * Subuser mail definitions (subject/body).
 *
 * @param string $type
 *   Type of mail message. Ex.: 'register_subuser'.
 *
 * @return array
 */
function _kms_subuser_mail_text($type){
  switch ($type) {
    case 'register_subuser':
      return array(
        'subject' => variable_get(
          'user_mail_register_subuser_subject',
          t('New subuser created: [subuser:name]')
        ),
        'body' => variable_get(
          'user_mail_register_subuser_body',
          t('Dear [subuser:master_name]. A new subuser was created with credentials:
    Name: [subuser:name]
    Password: [subuser:pass_clear]
    It expires: [subuser:expire_date]
          ')
        ),
      );
      break;
  }
}

/**
 * Send subuser related mail.
 *
 * @param string $type
 *   Type of mail message. Ex.: 'register_subuser'.
 * @param object $subuser
 *   Subuser user object.
 *
 * @return void.
 */
function kms_subuser_send_mail($type, $subuser) {
  if (empty($subuser) || empty($subuser->master) || empty($subuser->master->mail)) {
    drupal_set_message(t('Subuser data missing. Could not send mail.'), 'error');
  }

  $result = drupal_mail(
    'kms_subuser',
    $type,
    $subuser->master->mail,
    language_default(),
    array('subuser' => $subuser)
  );

  if ($result['result'] == TRUE) {
    drupal_set_message(
      t(
        'Subuser credentials sent to @master_mail.',
        array('@master_mail' => $subuser->master->mail)
      )
    );
  }
  else {
    drupal_set_message(
      t('There was a problem sending your message and it was not sent.'),
      'error'
    );
  }
  
}

/**
 * Implements hook_token_info().
 */
function kms_subuser_token_info() {
  $info['tokens']['user']['subuser:name'] = array(
    'name' => t('Subuser: Name'),
    'description' => t("The user name of the subuser."),
  );
  $info['tokens']['user']['subuser:pass_clear'] = array(
    'name' => t('Subuser: Password (clear text)'),
    'description' => t("The clear text password of the subuser."),
  );
  $info['tokens']['user']['subuser:master_name'] = array(
    'name' => t('Subuser: Master name'),
    'description' => t("The user name of the master of the subuser."),
  );
  $info['tokens']['user']['subuser:expire_date'] = array(
    'name' => t('Subuser: Expire date'),
    'description' => t("The date when the subuser expires."),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function kms_subuser_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'user' && !empty($data['subuser'])) {
    $subuser = $data['subuser'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'subuser:name':
          $replacements[$original] = $subuser->name;
          break;
        case 'subuser:pass_clear':
          $replacements[$original] = $subuser->pass_clear;
          break;
        case 'subuser:master_name':
          $replacements[$original] = $subuser->master->name;
          break;
        case 'subuser:expire_date':
          if (!empty($subuser->expire_date)) {
            $replacements[$original] = format_date(
              $subuser->expire_date,
              'subuser_date'
            );
          }
          else {
            $replacements[$original] = t('never');
          }
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Load a subuser.
 *
 * @param integer $uid
 *   Drupal user id.
 *
 * @return ḿixed
 *   Object / FALSE
 */
function kms_subuser_load($uid) {
  $subuser = user_load($uid);
  if(!kms_subuser_is_subuser($subuser)) {
    return FALSE;
  }

  $subuser->master = relation_get_related_entity('user', $uid);
  $subuser->expire_date = $subuser->pass_clear = '';
  
  if (
    !empty($subuser->field_expire_date)
    && !empty($subuser->field_expire_date[LANGUAGE_NONE][0]['value'])
  ) {
    $subuser->expire_date = $subuser->field_expire_date[LANGUAGE_NONE][0]['value'];
  }

  if (
    !empty($subuser->field_pass_clear)
    && !empty($subuser->field_pass_clear[LANGUAGE_NONE][0]['value'])
  ) {
    $subuser->pass_clear = $subuser->field_pass_clear[LANGUAGE_NONE][0]['value'];
  }

  return $subuser;
}

/**
 * Implements hook_form_FORMID_alter().
 */
function kms_subuser_form_user_cancel_confirm_form_alter(&$form, &$form_state) {
  $form['actions']['#prefix'] =
  '<p class="error">' . t('WARNING: If user is deleted connected subuser(s) will be deleted as well!!') . '</p>';
}

/**
 * Subuser admin access calback.
 *
 * @param object $user
 *   Drupal user.
 *
 * @return boolean
 */
function kms_subuser_administer_access($subuser) {
  global $user;
  // If user id is o then we probably are in insert mode
  // and then we bypass access check.
  if ($subuser->uid == 0) {
    return TRUE;
  }
  // Is the subuser uid in the array of subusers
  // that belongs to the inlogged user?
  return in_array($subuser->uid, subuser_load_all($user));
}

/**
 * Ajax render function.
 * Renders relevant ctools modal json data.
 *
 * @param boolean $js
 *   Is the client using javascript?
 * @param object $user
 *   Drupal user.
 * @param string $op
 *   What operation are we executing?
 *
 * @return string
 *   JSON.
 */
function kms_subuser_administer_popup($js = FALSE, $user, $op) {
  if (!$js) {
    return drupal_get_form("kms_subuser_$op_form", $user);
  }
  $uid = $user->uid;
  // We do not want messages shown in our popup.
  drupal_get_messages();
  // Include relevant ctools code.
  ctools_include('modal');
  ctools_include('ajax');
  // Add necessary form_state data.
  $form_state = array(
    'ajax' => TRUE,
    'build_info' => array(
      'args'  => array($user),
    ),
  );
  // Create form output.
  switch ($op) {
    case 'insert':
      $form_state['title'] = t('Insert subuser');
      $output = ctools_modal_form_wrapper('kms_subuser_insert_form', $form_state);
      break;
      case 'update':
      $form_state['title'] = t('Administer subuser');
      $output = ctools_modal_form_wrapper('kms_subuser_update_form', $form_state);
      break;
    case 'cancel':
      $form_state['title'] = t('Delete subuser');
      $output = ctools_modal_form_wrapper('kms_subuser_cancel_form', $form_state);
      break;
  }
  // If form is executed remove modal popup.
  if (!empty($form_state['executed'])) {
    $output = array();
    // $output[] = ajax_command_invoke('#modalContent', 'fadeOut', array('slow'));
    // $output[] = ajax_command_invoke('#modalBackdrop', 'fadeOut', array('slow'));
    $output[] = ctools_modal_command_dismiss();
  }
  // Render output.
  print ajax_render($output);
  exit;
}

/**
 * Delete subuser form.
 * 
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 * @param object $subuser
 *   Drupal user object.
 *
 * @return array
 *   Drupal form array.
 */
function kms_subuser_cancel_form($form, &$form_state, $subuser) {
  $form['info'] = array(
    '#markup' => '<h1>' . t('Do you want to delete the subuser?') . '</h1>',
  );
  $form['subuser_uid'] = array('#type' => 'hidden', '#value' => $subuser->uid);
  $form['actions'] = array(
    '#description' => t('Do you want to delete subuser?'),
    '#type' => 'actions'
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('kms_subuser_cancel_form_delete')
  );
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('No'),
  );

  return $form;
}

/**
 * Submit handler
 * Deletes subuser in Drupal and in Oracle.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form_state array.
 *
 * @return void
 */
function kms_subuser_cancel_form_delete(&$form, &$form_state) {
  $values = $form_state['values'];
  // Delete Oracle smuser.
  kms_user_smuser_delete($values['subuser_uid']);
  // Delete Drupal subuser.
  user_delete($values['subuser_uid']);
}

/**
 * Update subuser form
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 * @param object $subuser
 *   Drupal user object.
 *
 * @return array
 *   Drupal form array.
 */
function kms_subuser_update_form($form, &$form_state, $subuser) {
  global $user;
  
  drupal_get_messages();
  $form = kms_subuser_form($form, $form_state, $user, 'update');
  // $form['user_pass']['name']['#disabled'] = TRUE;

  // Delete unwanted form data.
  unset(
    // $form['add_subuser'],
    $form['user_pass']['name']['#states'],
    $form['user_pass']['pass']['#states'],
    $form['user_expire']['#states'],
    $form['user_remark']['#states'],
    $form['submit']['#states'],
    $form['submit']['#ajax'],
    $form['submit']['#submit']
  );
  // Set subuser uid.
  $form['subuser_uid'] = array('#type' => 'hidden', '#value' => $subuser->uid);
  // Set values.
  // Name / pass.
  $form['user_pass']['name']['#default_value'] = $subuser->name;
  if (!empty($subuser->field_pass_clear[LANGUAGE_NONE][0]['value'])) {
    $form['user_pass']['pass']['#default_value'] =
    $subuser->field_pass_clear[LANGUAGE_NONE][0]['value'];
  }
  // Expire date.
  if (!empty($subuser->field_expire_date[LANGUAGE_NONE][0]['value'])) {
    $form['user_expire']['#default_value'] = date(
      'Y-m-d',
      $subuser->field_expire_date[LANGUAGE_NONE][0]['value']
    );
  }
  // User remark
  if (!empty($subuser->field_user_remark[LANGUAGE_NONE][0]['value'])) {
    $form['user_remark']['#default_value'] =
    $subuser->field_user_remark[LANGUAGE_NONE][0]['value'];
  }
  // Change submit handler
  $form['#submit'] = array('kms_subuser_update_form_submit');
  return $form;
}


function kms_subuser_insert_form($form, &$form_state) {
  global $user;
  drupal_get_messages();
  $form = kms_subuser_form($form, $form_state, $user, 'insert');
  // Delete unwanted form data.
  unset(
    // $form['add_subuser'],
    $form['user_pass']['name']['#states'],
    $form['user_pass']['pass']['#states'],
    $form['user_expire']['#states'],
    $form['user_remark']['#states'],
    $form['submit']['#states'],
    $form['submit']['#ajax'],
    $form['submit']['#submit']
  );
  // 
  // Change submit handler
  $form['#submit'] = array('kms_subuser_insert_form_submit');
  return $form;
}

/**
 * Implements hook_user_update().
 */
function kms_subuser_user_update(&$edit, $account, $category) {
  // Clone permissions (bundles, permissions etc.)
  $subuser_uids = subuser_load_all($account);
  foreach($subuser_uids as $uid) {
    $user = user_load($uid);
    kms_permissions_clone_perms($account, $user);
  }
}

/**
 * Populate user id array with uids of the belonging subusers.
 *
 * @param array $uids
 *   User ids.
 */
function kms_subuser_uids_add_subuser_uids(&$uids) {
  if (empty($uids)) {
    return;
  }
  $uids_subusers = array();
  array_walk($uids, function($uid) use (&$uids_subusers) {
    $user = user_load($uid);
    $subusers = subuser_load_all($user);
    if (!empty($subusers)) {
      $uids_subusers  = array_merge($uids_subusers, $subusers);
    }
  });

  if (!empty($uids_subusers)) {
    $uids = array_unique(array_merge($uids_subusers, $uids));
  }

}