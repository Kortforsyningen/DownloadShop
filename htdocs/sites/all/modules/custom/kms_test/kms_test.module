<?php

/**
 * Test function to _kms_user_get_users_from_services.
 * Remember commenting following in the aggregation functions:
 * $sids = $sids[LANGUAGE_NONE];
 */
function _kms_test_get_users_from_services_test() {
  $services = array(
    'field_bundle_webservices_wms' => array(1276),
    'field_bundle_webservices_geo' => array(8, 9),
  );

  $uids = _kms_user_get_users_from_services($services);
}

/**
 * Remove batch, queue, background_process and cache_field data.
 */
function kms_test_db_cleanup_batch_mess() {
  $query = '';
//  $query .= <<<EOD
//DELETE FROM {field_data_field_access_bundles} WHERE entity_type = 'user';
//DELETE FROM {field_revision_field_access_bundles} WHERE entity_type = 'user';
//EOD;
  $query .= <<<EOD
DELETE FROM {queue};
DELETE FROM {batch};
DELETE FROM {background_process};
DELETE FROM {cache_field};
EOD;
  db_query($query);

}

/**
 * Remove data from kms_oci_queue tables and queue table.
 */
function kms_test_db_cleanup_kms_oci_mess() {
  $query = <<<EOD
DELETE FROM {kms_oci_queue_job};
DELETE FROM {kms_oci_queue_job_group};
DELETE FROM {kms_oci_queue_log};
EOD;
  db_query($query);
  $queues = array();
  foreach(KmsOciQueueJob::$queues as $queue) {
    $queues[] = $queue['name'];
  }
  db_delete('queue')
    ->condition('name', $queues, 'IN')
    ->execute();

}

/**
 * Test bundle save.
 */
function kms_test_bundle_save_test($bid) {
//  kms_test_db_cleanup_batch_mess();
  kms_test_db_cleanup_kms_oci_mess();
  $uids = array (
    0 => '12504',
    1 => '9806',
    2 => '15730',
    3 => '7248',
    4 => '10627',
    5 => '7246',
    6 => '7239',
    7 => '7821',
    8 => '13764',
    9 => '8004',
    10 => '8009',
    11 => '8013',
    12 => '8021',
    13 => '8026',
    14 => '8001',
    15 => '10245',
    16 => '8676',
    17 => '9143',
    18 => '8627',
    19 => '7996',
    20 => '7238',
    21 => '7229',
    22 => '11009',
    23 => '7999',
    24 => '7244',
    25 => '13046',
    26 => '13241',
    27 => '7242',
    28 => '8022',
    29 => '12725',
  );

  $bundle = node_load($bid);

  $job_params = array (
    'action' => KMS_OCI_QUEUE_ACTION_BUNDLE_SAVE,
    'params' =>
      array (
        'uids' => $uids,
        'bid' => $bid,
      ),
  );
  $job_params['action_details'] = format_string(
    'Bundle: "@bundle" saved. Affects @count users.',
    array(
      '@bundle' => $bundle->title,
      '@count' => count($uids),
    )
  );
  KmsOciQueueJob::create($job_params);
  KmsOciQueueJob::create($job_params, 'kms_permissions');
}

/**
 * Finish specified job. Available for test and not real-use.
 *
 * @param int $jid
 *   Job id.
 */
function kms_test_finish_job($jid) {
  $job = KmsOciQueueJobFactory::get($jid);
  $job->finish();
}

/**
 * Test user insert.
 */
function kms_test_insert_user_test() {
//  kms_test_db_cleanup_batch_mess();
  kms_test_db_cleanup_kms_oci_mess();
  $userid = time();
  $data = array (
    'user' =>
      array (
        ':userid' => $userid,
        ':name' => 'miktest1528',
        ':emailaddress' => 'mikkel+1528@adapt.dk',
        ':password' => 'wk7LWq9Hhv',
        ':disabled' => 0,
      ),
    'user_extra' =>
      array (
        ':duid' => $userid,
        ':userid' => $userid,
        ':usertype' => '3520',
        ':usertype_info' => 'asdasdads',
        ':receive_newsletter' => 1,
        ':accept_terms' => 1,
        ':contact_me' => 1,
      ),
  );
  // Populate user tables in oracle.
  KmsOciQueueJob::create(array(
    'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
    'action_details' => $data,
    'params' => array(
      array($data['user'], 'smuser'),
      array($data['user_extra'], 'smuser_extra'),
    )
  ));
  // Populate user permission tables of the new user in Oracle
  // with permissions from the default bundles.
  $job_params = array(
    'uid' => $userid,
    'bids' => _kms_permissions_get_default_bundles(),
  );
  $bundles_attach_action_details = format_string(
    'Attaching default bundles: @bundles to new user: @user.',
    array(
      '@bundles' => implode(', ', $job_params['bids']),
      '@user' => $job_params['uid'],
    )
  );
  KmsOciQueueJob::create(array(
    'action' => KMS_OCI_QUEUE_ACTION_BUNDLES_ATTACH,
    'action_details' => $bundles_attach_action_details,
    'params' => $job_params,
  ));
  KmsOciQueueJob::create(array(
    'action' => KMS_OCI_QUEUE_ACTION_BUNDLES_ATTACH,
    'action_details' => $bundles_attach_action_details,
    'params' => $job_params,
  ),
    'kms_permissions'
  );

}

/**
 * Test if kms_test_check_oracle_user_exists works as intended.
 *
 * @param int $uid
 *   Drupal user id.
 */
function kms_test_check_oracle_user_exists($uid) {
  $user = user_load($uid);
  var_dump(kms_user_smuser_exists($user));
}

function kms_test_update_user($uid) {
  $user = user_load($uid);
  if (!$user) {
    die('Could not load user!');
  }
  $data = array(
    'user' => array(
      ':userid' => $user->uid,
      ':name' => $user->name,
      ':emailaddress' => $user->mail,
      ':disabled' => 0,
    ),
    'user_extra' => array(
      ':duid' => $user->uid,
      ':userid' => $user->uid,
      ':usertype' => '3522',
      ':usertype_info' => 'heppsoosososs',
      ':accept_terms' => 1,
      ':contact_me' => 1,
    ),
  );
  $userid_old = kms_user_get_userid($user);
  $userid_new = $user->uid;
  $data['user'][':userid'] = $data['user_extra'][':userid'] = $userid_new;

  // Populate user tables in oracle.
  KmsOciQueueJob::create(array(
    'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
    'action_details' => format_string(
      'Updating user: @user_details.',
      array(
        '@user_details' => json_encode($data),
      )
    ),
    'params' => array(
      array($data['user'], 'smuser'),
      array($data['user_extra'], 'smuser_extra'),
    ),
  ));
  // Populate user permission tables of the user in Oracle
  // with permissions from the users bundles.
  if (!empty($user->field_access_bundles[LANGUAGE_NONE][0]['nid'])) {
    $bids = array_map(function ($v){
      return $v['nid'];
    }, $user->field_access_bundles[LANGUAGE_NONE]);

    $job_params = array(
      'action' => KMS_OCI_QUEUE_ACTION_BUNDLES_ATTACH,
      'action_details' => format_string(
        'Attaching default bundles: @bundles to user: @user.',
        array(
          '@bundles' => implode(', ', $bids),
          '@user' => $userid_new,
        )
      ),
      'params' => array(
        'uid' => $userid_old,
        'bids' => $bids,
      ),
    );
    KmsOciQueueJob::create($job_params);
    KmsOciQueueJob::create($job_params, 'kms_permissions');
  }

}

/**
 * Create a test user with various inherited fields.
 *
 * @param int $clone_uid
 *   The user id of the user to clone fields from.
 */
function kms_test_insert_new_user_test($clone_uid = 0) {
  global $base_url;

  $id = uniqid();
  $fields = array(
    'name' => 'kms_test_' . $id,
    'mail' => 'kms_test_' . $id . '@adapt.dk',
    'pass' => '1234',
    'status' => 1,
    'init' => 'email address',
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    ),
  );

  $source_account = user_load($clone_uid);
  if (!$source_account) {
    return;
  }
  $account = user_save('', $fields);
  $target_account = user_load($account->uid);

  if (isset($source_account->field_user_type[LANGUAGE_NONE][0]['tid'])) {
    $target_account->field_user_type[LANGUAGE_NONE][0]['tid']
      = $source_account->field_user_type[LANGUAGE_NONE][0]['tid'];
  }
  if (isset($source_account->field_user_type_info[LANGUAGE_NONE][0]['value'])) {
    $target_account->field_user_type_info[LANGUAGE_NONE][0]['value']
      = $source_account->field_user_type_info[LANGUAGE_NONE][0]['value'];
  }
  if (isset($source_account->field_newsletter[LANGUAGE_NONE][0]['value'])) {
    $target_account->field_newsletter[LANGUAGE_NONE][0]['value']
      = $source_account->field_newsletter[LANGUAGE_NONE][0]['value'];
  }

  if (isset($source_account->field_terms_and_conditions[LANGUAGE_NONE][0]['value'])) {
    $target_account->field_terms_and_conditions[LANGUAGE_NONE][0]['value']
      = $source_account->field_terms_and_conditions[LANGUAGE_NONE][0]['value'];
  }
  if (isset($source_account->field_contact_me[LANGUAGE_NONE][0]['value'])) {
    $target_account->field_contact_me[LANGUAGE_NONE][0]['value']
      = $source_account->field_contact_me[LANGUAGE_NONE][0]['value'];
  }

  if ($source_account) {
    kms_permissions_clone_perms($source_account, $target_account);
  }
  // Atodo: Find out why drush does not accept boolean parameter.
  if (TRUE) {
    $data = _kms_oci_queue_create_insert_smuser_data($target_account);
    KmsOciQueueJob::create(array(
      'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
      'action_details' => format_string(
        'Inserting new user: @user_details.',
        array(
          '@user_details' => json_encode($data),
        )
      ),
      'params' => array(
        array($data['user'], 'smuser'),
        array($data['user_extra'], 'smuser_extra'),
      ),
    ));
    // Populate user permission tables of the new user in Oracle
    // with permissions from the default bundles.
    $bids = _kms_permissions_get_default_bundles();
    $job_params = array(
      'action' => KMS_OCI_QUEUE_ACTION_BUNDLES_ATTACH,
      'action_details' => format_string(
        'Attaching default bundles: @bundles to new user: @user.',
        array(
          '@bundles' => implode(', ', $bids),
          '@user' => $account->uid,
        )
      ),
      'params' => array(
        'uid' => $account->uid,
        'bids' => $bids,
      ),
    );
    KmsOciQueueJob::create($job_params);
    KmsOciQueueJob::create($job_params, 'kms_permissions');
  }

  var_dump('Delete url:');
  var_dump($base_url . '/user/' . $target_account->uid . '/cancel');
}

/**
 * For demo purpose. Creates to bundles: custom and default.
 */
function kms_test_create_demo_bundles() {
  $user = user_load(1);
  $values = array(
    'type' => 'access_bundle',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  // Create Custom bundle.
  $entity = entity_create('node', $values);
  $w = entity_metadata_wrapper('node', $entity);
  $w->title->set('Custom bundle');
  $w->field_bundle_webservices_geo->set(array(1, 2, 7));
  $w->field_bundle_webservices_wfs->set(array(16, 1274));
  $w->save();
  // Create Default bundle
  $entity = entity_create('node', $values);
  $w = entity_metadata_wrapper('node', $entity);
  $w->title->set('Default bundle');
  $w->field_bundle_webservices_geo->set(array(4, 5, 6));
  $w->field_bundle_webservices_wfs->set(array(1333, 1633));
  $w->field_default_bundle->set(1);
  $w->save();
}

/**
 * Create fake jobs which is useful for cleanup testing.
 */
function kms_test_create_fake_jobs() {
  kms_test_db_cleanup_kms_oci_mess();
  $i = 0;
  do {

    $job_params = array(
      'action' => 'fake_job',
      'action_details' => format_string('fakejob'),
      'params' => array(
        'uid' => 1,
        'bids' => array(),
        'perms' => array(),
      ),
    );
    $job = KmsOciQueueJob::create($job_params);
    $job->changeStatus(KmsOciQueueJob::STATUS_DONE);
    $i++;
  } while ($i <= 110);

}

/**
 * Useful for testing clone_user_perms jobs.
 */
function kms_test_clone_perms() {
  $job_params = array(
    'action' => 'clone_user_perms',
    'action_details' => 'Cloning user permissions from: TW2. Affects 2.',
    'params' => array(
      'source_uid' => '7524',
      'uids' => array(
        9 => '19827',
        10 => '10465',
      ),
    ),
  );
  KmsOciQueueJob::create($job_params);
  KmsOciQueueJob::create($job_params, 'kms_permissions');
}

/**
 * Revert admin_views_user which sometimes is unstable.
 */
function kms_test_revert_admin_views_user() {
  $view = views_get_view('admin_views_user');
  views_revert_view($view);
}

/**
 * Testing the kms_subuser_uids_add_subuser_uids function.
 */
function kms_test_test_user_subuser_array() {
  $uids = array(7498);
  kms_subuser_uids_add_subuser_uids($uids);
  var_dump($uids);
}