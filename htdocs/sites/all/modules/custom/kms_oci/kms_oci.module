<?php

define('KMS_OCI_MAIL_DEFAULT_TO', 'mikkel@adapt.dk');
define('KMS_OCI_MAIL_DEFAULT_FROM', 'info@adapt.dk');
define('KMS_OCI_WD_KEY', 'kms_oci');

/**
 * Implements hook_boot().
 *
 * @return void.
 */
function kms_oci_boot() {
  global $oci;

  $user = variable_get('kms_oci_conn_user');
  $pass = variable_get('kms_oci_conn_pass');
  $host = variable_get('kms_oci_conn_host');
  $db = variable_get('kms_oci_conn_db');

  foreach(array($user, $pass, $host, $db) as $var) {
    if(empty($var)) {
      $oci = FALSE;
      return;
    }
  }

  $oci = oci_connect($user, $pass, "$host/$db");

}

/**
 * Get Oracle connection.
 *
 * @return void.
 */
function kms_oci_get_conn() {
  global $oci;
  return $oci;
}

/**
 * Perform a insert query based on a key/value array.
 *
 * @param array $data
 *   Ex.: array(':name' => 'miksan', ':userid' => "9999999999")
 * @param string $table
 *   Which table should be used.
 *
 * @return void.
 */
function kms_oci_insert($data, $table) {
  // Only use variables with values.
  $data = array_filter($data);

  $keys = array_keys($data);
  $pholders = implode(', ', $keys);
  $cols = str_replace(':', '', $pholders);
  
  kms_oci_query(
    "INSERT INTO $table ($cols) VALUES ($pholders)",
    $data
  );

}

/**
 * Perform an update query based on a key/value array.
 *
 * @param array $data
 *   Ex.: array(':name' => 'miksan', ':userid' => "9999999999")
 * @param string $table
 *   Which table should be used.
 *
 * @return void.
 */
function kms_oci_update($data, $table) {
  // Only use variables with values.
  $data = array_filter($data);

  $values = array();
  array_walk($data, function($v, $k) use (&$values) {
    if ($k != ':userid') {
      $values[] = str_replace(':', '', $k) . " = $k";
    }
  });
  
  kms_oci_query(
    sprintf("UPDATE %s SET %s WHERE userid = :userid", $table, implode(', ', $values)),
    $data
  );

}

/**
 * Perform an query based on a query and a pholder/value array.
 *
 * @param array $data
 *   Ex.: array(':name' => 'miksan', ':userid' => "9999999999")
 * @param string $table
 *   Which table should be used.
 *
 * @return void.
 */
function kms_oci_query($query, $data = array()) {
  global $base_url;

  array_walk($data, function(&$v) {
    $v = utf8_decode($v);
  });

  $oci = kms_oci_get_conn();

  // Atodo: Proper error handling:
  if ($oci === FALSE) {
    return;
  }

  $stid = oci_parse($oci, $query);

  if (!$stid) {
    $e = oci_error($oci);
    watchdog(KMS_OCI_WD_KEY, $e['message'], array(), WATCHDOG_ERROR);
    kms_oci_send_mail_error($e['message'], $query, $data);
  }
  
  foreach ($data as $pholder => $arg) {
    oci_bind_by_name($stid, $pholder, $data[$pholder]);
  }

  $r = oci_execute($stid);

  if (!$r) {
    $e = oci_error($stid);
    watchdog(KMS_OCI_WD_KEY, $e['message'], array(), WATCHDOG_ERROR);
    kms_oci_send_mail_error($e['message'], $query, $data);
  }

  oci_free_statement($stid);

}

/**
 * Implements hook_exit().
 */
function kms_oci_exit($destination = NULL) {
  global $oci;

  if ($oci !== FALSE) {
    oci_close($oci);
  }
  
}

function kms_oci_check_userid_exists($userid, $table) {
  $oci = kms_oci_get_conn();
  $stid = oci_parse($oci, sprintf("SELECT * FROM %s WHERE userid = '%s'", $table, $userid));
  oci_execute($stid);
  $row = oci_fetch_array($stid);
  return !empty($row);
}

/**
 * Send mail with oci error.
 *
 * @param string $error
 *   Oci error with error code.
 * @param string $query
 *   The query that is failing.
 * @param array $data
 *   Placeholders and data.
 *
 * @return void.
 */
function kms_oci_send_mail_error($error, $query = '', $data = array()) {
  global $base_url;

  // Debug info.
  ob_start();
  if(!empty($query) || !empty($data)) {
    echo "Debug info:\n";
  }
  if (!empty($query)) {
    echo "Query:\n";
    var_dump($query);
  }
  if (!empty($data)) {
    echo "Data:\n";
    var_dump($data);
  }
  $debug = ob_get_clean();
  // Send mail.
  kms_oci_send_mail(
    array(
      'subject' => t(
        'Oracle error at !base_url',
        array('!base_url' => $base_url)
      ),
      'body' => t(
        "Oracle error at !base_url.\nError: !error.\n!debug",
        array('!base_url' => $base_url, '!error' => $error, '!debug' => $debug)
      ),
    )
  );

}

/**
 * Send mail.
 *
 * @param array $message
 *   Parameters used to construct email.
 * @param string $module
 *   Name of module sending the mail.
 *
 * @return boolean
 */
function kms_oci_send_mail($message, $module = 'kms_oci') {
  $message += array(
    'from' => variable_get('system_mail', KMS_OCI_MAIL_DEFAULT_FROM),
    'to' => variable_get('kms_oci_mail_default_to', KMS_OCI_MAIL_DEFAULT_TO),
    'subject' => '',
    'body' => '',
  );

  $token = microtime();
  
  $mail_conf = array(
    'id' => $module . '_' . $token,
    'to' => $message['to'],
    'subject' => $message['subject'],
    'body' => array($message['body']),
    'headers' => array(
      'From' => $message['from'], 
      'Sender' => $message['from'], 
      'Return-Path' => $message['from'],
    ),
  );

  $system = drupal_mail_system($module, $token);
  $mail = $system->format($mail_conf);
  if ($system->mail($mail)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
