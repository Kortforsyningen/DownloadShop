<?php

define('KMS_OCI_MAIL_DEFAULT_TO', 'drift@kortforsyningen.dk');
define('KMS_OCI_MAIL_DEFAULT_FROM', 'download@kortforsyningen.dk');
define('KMS_OCI_WD_KEY', 'kms_oci');
define('KMS_OCI_EXTENSION_NAME', 'oci8');

/**
 * Implements hook_menu().
 */
function kms_oci_menu() {

  $items['admin/config/oci'] = array(
    'title' =>'Oracle (oci) settings',
    'description' => 'Configure GST oracle integration',
    'access arguments' => array('administer oci settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_kms_oci_settings_form'),
    'type' => MENU_CALLBACK,

  );

  return $items;
}

/**
 * Implements hook_boot().
 *
 * @return void.
 */
function kms_oci_boot() {
  if(!kms_oci_extension_is_loaded()) {
    return;
  }

  global $oci;

  $user = variable_get('kms_oci_conn_user');
  $pass = variable_get('kms_oci_conn_pass');
  $host = variable_get('kms_oci_conn_host');
  $db = variable_get('kms_oci_conn_db');

  // Check connection vars. Return if FALSE;
  foreach(array($user, $pass, $host, $db) as $var) {
    if(empty($var)) {
      $oci = FALSE;
      return;
    }
  }

  // Connect to db.
  $oci = @oci_connect($user, $pass, "$host/$db", 'UTF8');
  // Set if connection is up.
  kms_oci_conection_is_up($oci);
  // If connection is down set message in drupal static
  // because the whole system has not been bootstrapped yet.
  if (!$oci) {
    $e = oci_error();
    kms_oci_conection_error($e['message']);
  }

}

/**
 * Get Oracle connection.
 *
 * @return void.
 */
function kms_oci_get_conn() {
  if(!kms_oci_extension_is_loaded()) {
    return FALSE;
  }
  global $oci;
  return $oci;
}

/**
 * Perform a insert query based on a key/value array.
 *
 * @param array $data
 *   Ex.: array(':name' => 'miksan', ':userid' => "9999999999")
 * @param string $table
 *   Which table should be used.
 *
 * @return void.
 */
function kms_oci_insert($data, $table) {
  if(!kms_oci_extension_is_loaded()) {
    return;
  }
  // Only use variables with values.
  $data = array_filter($data, function($v){
    return $v == 0 || !empty($v);
  });


  $keys = array_keys($data);
  $pholders = implode(', ', $keys);
  $cols = str_replace(':', '', $pholders);
  
  kms_oci_query(
    "INSERT INTO $table ($cols) VALUES ($pholders)",
    $data
  );

}

/**
 * Perform an user update query based on a key/value array.
 *
 * @param array $data
 *   Ex.: array(':name' => 'miksan', ':userid' => "9999999999")
 * @param string $table
 *   Which table should be used.
 * @param string $kms_userid
 *   KMS user id.
 *
 * @return void.
 */
function kms_oci_update_user($data, $table, $kms_userid) {
  if(!kms_oci_extension_is_loaded()) {
    return;
  }
  // Only use variables with values.
  $data = array_filter($data, function($v){
    return $v == 0 || !empty($v);
  });

  $values = array();
  array_walk($data, function($v, $k) use (&$values) {
    // If :userid is the same as $kms_userid then don't update :userid.
    if ($k == ':userid' && $v == $kms_userid) {
      continue;
    }
    $values[] = str_replace(':', '', $k) . " = $k";
  });
  
  kms_oci_query(
    sprintf(
      "UPDATE %s SET %s WHERE userid = '%s'",
      $table,
      implode(', ', $values),
      $kms_userid
    ),
    $data
  );

}

function kms_oci_select($query, $data = array()) {
  $oci = kms_oci_get_conn();

  $stid = oci_parse($oci, $query);

  foreach ($data as $pholder => $arg) {
    oci_bind_by_name($stid, $pholder, $data[$pholder]);
  }

  $r = oci_execute($stid);

  $rows = array();
  while($row = oci_fetch_assoc($stid)) {
    $rows[] = $row;
  }

  oci_free_statement($stid);

  return $rows;
}

function kms_oci_select_one($query, $data = array(), $type = 'assoc') {
  $oci = kms_oci_get_conn();

  $stid = oci_parse($oci, $query);

  foreach ($data as $pholder => $arg) {
    oci_bind_by_name($stid, $pholder, $data[$pholder]);
  }

  $r = oci_execute($stid);

  switch ($type) {
    case 'assoc':
      $row = oci_fetch_assoc($stid);
      break;
    
    case 'object':
      $row = oci_fetch_object($stid);
      break;
  }
  
  oci_free_statement($stid);

  return $row;
}

/**
 * Perform an query based on a query and a pholder/value array.
 *
 * @param array $data
 *   Ex.: array(':name' => 'miksan', ':userid' => "9999999999")
 * @param string $table
 *   Which table should be used.
 *
 * @return void.
 */
function kms_oci_query($query, $data = array()) {
  if(!kms_oci_extension_is_loaded()) {
    return;
  }
  global $base_url;

  $oci = kms_oci_get_conn();

  // Atodo: Proper error handling:
  if ($oci === FALSE) {
    return;
  }

  $stid = oci_parse($oci, $query);

  if (!$stid) {
    $e = oci_error($oci);
    watchdog(KMS_OCI_WD_KEY, $e['message'], array(), WATCHDOG_ERROR);
    kms_oci_send_mail_error($e['message'], $query, $data);
  }
  
  foreach ($data as $pholder => $arg) {
    oci_bind_by_name($stid, $pholder, $data[$pholder]);
  }

  $r = oci_execute($stid);

  if (!$r) {
    $e = oci_error($stid);
    watchdog(KMS_OCI_WD_KEY, $e['message'], array(), WATCHDOG_ERROR);
    kms_oci_send_mail_error($e['message'], $query, $data);
  }

  oci_free_statement($stid);

}

/**
 * Implements hook_exit().
 */
function kms_oci_exit($destination = NULL) {
  if(!kms_oci_extension_is_loaded()) {
    return;
  }
  global $oci;

  if (kms_oci_conection_is_up()) {
    oci_close($oci);
  }
  else{
    $error = kms_oci_conection_error();
    if (!empty($error)) {
      watchdog(KMS_OCI_WD_KEY, $error, array(), WATCHDOG_ALERT);
      kms_oci_send_mail_error($error);
    }
  }

}

/**
 * Send mail with oci error.
 *
 * @param string $error
 *   Oci error with error code.
 * @param string $query
 *   The query that is failing.
 * @param array $data
 *   Placeholders and data.
 *
 * @return void.
 */
function kms_oci_send_mail_error($error, $query = '', $data = array()) {
  global $base_url;

  // Debug info.
  ob_start();
  if(!empty($query) || !empty($data)) {
    echo "Debug info:\n";
  }
  if (!empty($query)) {
    echo "Query:\n";
    var_dump($query);
  }
  if (!empty($data)) {
    echo "Data:\n";
    var_dump($data);
  }
  $debug = ob_get_clean();
  // Send mail.
  kms_oci_send_mail(
    array(
      'subject' => t(
        'Oracle error at !base_url',
        array('!base_url' => $base_url)
      ),
      'body' => t(
        "Oracle error at !base_url.\nError: !error.\n!debug",
        array('!base_url' => $base_url, '!error' => $error, '!debug' => $debug)
      ),
    )
  );

}

/**
 * Send mail.
 *
 * @param array $message
 *   Parameters used to construct email.
 * @param string $module
 *   Name of module sending the mail.
 *
 * @return boolean
 */
function kms_oci_send_mail($message, $module = 'kms_oci') { 
  // Explanation follows...
  $default_from = variable_get(
    'kms_oci_mail_default_from',
    KMS_OCI_MAIL_DEFAULT_FROM
  );

  $message += array(
    // from: If system_mail is configured use that.
    // Otherwise use variable. Otherwise use constant.
    'from' => variable_get('system_mail', $default_from),
    'to' => variable_get('kms_oci_mail_default_to', KMS_OCI_MAIL_DEFAULT_TO),
    'subject' => '',
    'body' => '',
  );

  $token = microtime();

  foreach (explode(',', $message['to']) as $to) {
    $mail_conf = array(
      'id' => $module . '_' . $token,
      'to' => trim($to),
      'from' => $message['from'],
      'subject' => $message['subject'] . ' ' . time(),
      'body' => array($message['body']),
      'headers' => array(
        'Content-Type' => 'text/plain; charset=UTF-8;',
        'From' => $message['from'], 
        'Sender' => $message['from'], 
        'Return-Path' => $message['from'],
      ),
    );

    $system = drupal_mail_system($module, $token);
    $mail = $system->format($mail_conf);
    $system->mail($mail);
  }
}

function _kms_oci_settings_form() {
  $form['connection'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Connection'), 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );
  $form['connection']['kms_oci_conn_user'] = array(
    '#type' => 'textfield', 
    '#title' => t('User'), 
    '#default_value' => variable_get('kms_oci_conn_user'), 
    '#required' => TRUE,
  );
  $form['connection']['kms_oci_conn_pass'] = array(
    '#type' => 'textfield', 
    '#title' => t('Pass'), 
    '#default_value' => variable_get('kms_oci_conn_pass'), 
    '#required' => TRUE,
  );
  $form['connection']['kms_oci_conn_host'] = array(
    '#type' => 'textfield', 
    '#title' => t('Host'), 
    '#default_value' => variable_get('kms_oci_conn_host'), 
    '#required' => TRUE,
  );
  $form['connection']['kms_oci_conn_db'] = array(
    '#type' => 'textfield', 
    '#title' => t('Db'), 
    '#default_value' => variable_get('kms_oci_conn_db'), 
    '#required' => TRUE,
  );
  $form['oci_mails'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Oracle mails'), 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );
  $default_from = variable_get(
    'kms_oci_mail_default_from',
    KMS_OCI_MAIL_DEFAULT_FROM
  );
  $form['oci_mails']['kms_oci_mail_default_from'] = array(
    '#type' => 'textfield', 
    '#title' => t('From'), 
    '#description' => t(
      'If nothing is specified !mail is used.',
      array('!mail' => variable_get('system_mail'))
    ), 
    '#default_value' => variable_get('system_mail', $default_from),
    '#required' => TRUE,
  );
  $form['oci_mails']['kms_oci_mail_default_to'] = array(
    '#type' => 'textfield', 
    '#title' => t('To'),
    '#description' => t('If more than one address use comma separated values.'),
    '#default_value' => variable_get(
      'kms_oci_mail_default_to',
      KMS_OCI_MAIL_DEFAULT_TO
    ),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Check if oci extension has been loaded.
 *
 * @return boolean
 */
function kms_oci_extension_is_loaded(){
  return extension_loaded(KMS_OCI_EXTENSION_NAME);
}

/**
 * Set/get static flag if connection is up.
 *
 * @param boolean $conn_succes
 *   Returns TRUE if connection is up.
 *
 * @return boolean $is_up
 */
function kms_oci_conection_is_up($conn_succes = NULL) {
  $is_up = &drupal_static(__FUNCTION__);
  if($conn_succes !== NULL && is_bool($conn_succes)) {
    $is_up = $conn_succes;
    return $conn_succes;
  }
  elseif(isset($is_up)) {
    return $is_up;
  }

  return FALSE; 
}

/**
 * Set/get static connection error if present.
 *
 * @param string $message
 *
 * @return string $error
 */
function kms_oci_conection_error($message = NULL) {
  $error = &drupal_static(__FUNCTION__);
  if($message !== NULL && is_string($message)) {
    $error = $message;
    return $message;
  }
  elseif(isset($error)){
    return $error;
  }

  return '';
}

/**
 * Oracle test function. we want to see it fail!!
 *
 * @return void
 */
function kms_oci_test_error() {
  $query = "SELECT FROM smuser WHERE test = ";
  $data = array(':foo' => 'bar');
  kms_oci_query($query, $data);
}

/**
 * Creates sql file for creating smusers in oracle based on Drupal users.
 *
 * @return void
 */
function kms_oci_create_smuser_sql(){

  $results = db_select('users', 'u')
  ->fields('u', array('uid'))
  ->condition('u.uid', 1, '>')
  ->orderBy('uid', 'ASC')
  ->execute();

  $queries = array(
    // Delete current users
    "TRUNCATE TABLE smuser;",
    "TRUNCATE TABLE smuser_extra;",
    // Do not bother about ampersand character.
    "SET DEFINE OFF;",
    // Output queries. Default off.
    // "SET ECHO ON;",
  );

  while($result = $results->fetchObject()) {
    // Current user.
    $user = user_load($result->uid);
    // Eventual subuser master.
    $master_user = relation_get_related_entity('user', $user->uid, 'subuser', 0);
    // Use entity meta data wrapper on user object.
    $uwrapper = entity_metadata_wrapper('user', $user);
    // Load user type term tree.
    $user_types = $uwrapper->field_user_type->value();
    // Create smuser data.
    $data_smuser = array(
      'userid' => kms_user_get_userid($user),
      'name' => $uwrapper->name->value(),
      'password' => $uwrapper->field_pass_clear->value(),
      'lastname' => $uwrapper->field_address->first_name->value(),
      'firstname' => $uwrapper->field_address->last_name->value(),
      'emailaddress' => $uwrapper->mail->value(),
      'telephonenumber' => $uwrapper->field_phone->value(),
      'disabled' => $uwrapper->status->value() ? 0 : 1,
      'debitorno' => $uwrapper->field_debtor_nr->value(),
    );
    // Create smuser extra data.
    $data_smuser_extra = array(
      'duid' => $user->uid,
      'userid' => kms_user_get_userid($user),
      'usertype' => !empty($user_types[0]->tid) ? $user_types[0]->tid : '',
      'usertype_info' => $uwrapper->field_user_type_info->value(),
      'receive_newsletter' => intval($uwrapper->field_newsletter->value()),
      'accept_terms' => intval($uwrapper->field_terms_and_conditions->value()),
      'contact_me' => intval($uwrapper->field_contact_me->value()),
      'master_userid' => intval($master_user->uid) ? $master_user->uid : FALSE,
    );
    // Create query function.
    $create_query = function($data, $table) {
      // Remove empty data.
      $data = array_filter($data, function($v){
        return strlen($v) || !empty($v);
      });
      // Escape characters and pad value with single quotes.
      array_walk($data, function(&$v) {
        $v = str_replace("'", "''", $v);
        $v = "'$v'";
      });
      // Return query string.
      return sprintf(
        "INSERT INTO %s (%s) VALUES (%s);",
        $table,
        implode(', ', array_keys($data)),
        implode(', ', array_values($data))
      );
    };
    // Create smuser and smuser extra query array entries.
    $queries[] = $create_query($data_smuser, 'smuser');
    $queries[] = $create_query($data_smuser_extra, 'smuser_extra');
  }
  // Count total amount of rows.
  // Substracted by three because of the leading queries.
  // Divided by 2 because userdata is split between the tables.
  $total = (count($queries) - 3) / 2;
  // Save sql file.
  file_save_data(
    implode("\r\n", $queries),
    'public://smuser.sql',
    FILE_EXISTS_REPLACE
  );
  // Show how many rows that were created.
  echo "$total rows created\r\n";
}

