<?php

define('KMS_USER_ROLES_SYSTEM_ACCOUNT_ID', 7);
define('KMS_USER_ROLES_SUPERUSER_ID', 4);
define('KMS_USER_PAGE_CONTACT', 'node/7');

/**
 * Implements hook_watchdog().
 */
function kms_user_watchdog(array $log_entry) {
  global $user;
  // If a system account is prohibited access to a page
  // then set a message and redirect to front.
  if (
    $log_entry['type'] == 'access denied'
    && $log_entry['user']->uid == $user->uid
    && kms_user_is_system_account($log_entry['user']->roles)
  ) {
    drupal_set_message(
      t(
        'You cannot access %uri as a system account.',
        array('%uri' => $log_entry['message'])
      ),
      'error'
    );
    drupal_goto(variable_get('kms_user_page_contact', KMS_USER_PAGE_CONTACT));
  }
}

function kms_user_permission() {
  return array(
    'access kms user pages' => array(
      'title' => t('Access kms user pages'), 
      'description' => t('Access kms user pages.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function kms_user_menu_alter(&$items) {
  $restricted_paths = variable_get(
    'kms_user_system_account_restricted_paths',
    array(
      'edit/profile',
      'user/password',
      'user/register',
      'user/reset/%/%/%',
      'user/%user/edit',
      'user/%user',
      'user/%user/cancel',
      'user/%user/cancel/confirm/%/%',
      'user/%user/view',
    )
  );

  foreach($items as $path => &$item) {
    if(in_array($path, $restricted_paths)) {
      if (!empty($item['access callback']))
        $item['access arguments'][] = $item['access callback'];
      $item['access callback'] = '_kms_user_access_callback_deny_system_account';
    }
  }
}

function _kms_user_access_callback_deny_system_account() {
  global $user;
  $args = func_get_args();
  $access_callback = array_pop($args);
  $original_access = TRUE;
  if(!empty($access_callback) && is_string($access_callback)) {
    $original_access = call_user_func_array($access_callback, $args);
  }
  $roles = $user->roles;
  // Todo. Do this the right way.
  // For some reason user_access is flaky
  // but that is the one that should be used instead of $is_systemaccount;
  // return $original_access && user_access('Access kms user pages');
  return $original_access && !kms_user_is_system_account($roles);
}

/**
 * Implements hook_cron.
 */
function kms_user_cron() {
  _kms_user_cron_expire_users();
}

function kms_user_ctools_plugin_directory($owner, $plugin_type) {
  // we'll be nice and limit scandir() calls
  // if (in_array($owner, array('ctools', 'addressfield'))) {
  if (in_array($owner, array('ctools'))) {
    return "plugins/$plugin_type";
  }
}

/**
 * Intern function to format bundle list in user service list
 * @param  [int] $service_id      The service ID (Oracle id)
 * @param  [string] $service_name The name of the service
 * @return [string] $html         Html ready to be appended to the form option
 */
function _kms_user_format_user_service_list($service_id, $service_name) {
  $html = '';
  // Get the bundle attached to the service id
  $nid_sid_arr = _kms_permissions_get_bundle_by_sid($service_id);
  // If the service is not part of a bundle
  if (!$nid_sid_arr) {
    return '<span class="bundle-no-bundle">' . $service_name . '</span>';
  }
  // Start with the name of the service
  $html .= $service_name . ' ';
  
  foreach ($nid_sid_arr as $type => $nodes) {
    foreach ($nodes as $nid => $title) {
      $html .= '<span class="bundle-' . $type . '">' . 
      l(t( $title), "node/$nid/edit/", array('attributes' => array('target'=>'_blank'))) . 
      '</span> '; 
    }
  }
  return $html;
}

/**
 * Implements hook_form_alter().
 */
function kms_user_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (in_array($form_id, array('user_register_form', 'user_profile_form'))) {
    $form['account']['name']['#element_validate'] = array('_kms_user_validate_username');
    $form['account']['name']['#description'] = t(
      'Spaces are not allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'
    );

    $form['field_terms_and_conditions']['#after_build'] = array('kms_user_form_after_build');

    // Update user 'updated' time stamp.
    $form['#submit'][] = '_kms_user_update_timestamp';
    $form['field_updated']['#disabled'] = TRUE;
    switch ($form_id) {
      case 'user_profile_form':
        // Bundle in service list
        // Add CSS
        $form['#attached']['css'][] = drupal_get_path('module', 'kms_user') . '/css/kms_user.css';
        // Field loop
        foreach ($form as $field_name => $field_value) {
          // Only use bundle fields
          if (strpos($field_name, 'field_bundle_webservices') !== false) {
            if (!empty($field_value['und']['#options'])) {
              foreach ($field_value['und']['#options'] as $service_id => $service_name) {
                $html = _kms_user_format_user_service_list($service_id, $service_name);
                $form[$field_name]['und']['#options'][$service_id] = $html;
              }
            }
          }
        }
        // The terms and conditions must(!) be accepted on the register-form. After that the terms and conditions
        // can NOT be altered by the user. So we change the default value to 'accepted', and disable the checkbox
        $form['field_terms_and_conditions']['#default_value'] = 1;
        $form['field_terms_and_conditions'][LANGUAGE_NONE]['#default_value'] = 1;
        $form_state['field']['field_terms_and_conditions'][LANGUAGE_NONE]['instance']['default_value'][0]['value'] = 1;
        $form['field_terms_and_conditions']['#disabled'] = TRUE;

        // We need to store any changes to the password
        $form['#submit'][] = '_kms_user_submit_update_user_pass';
        // Store user data in Oracle.
        $form['#submit'][] = '_kms_user_submit_update_user_oracle';
        // The user-profile-form has some trouble remembering the user-provided values for
        // the fields "field_contact_me", and "field_newsletter". We must fetch the values
        // and set the fields accordingly
        $user_contact_me = db_select('field_data_field_contact_me', 'cme')
        ->fields('cme', array('field_contact_me_value'))
        ->condition('entity_id', $form['#user']->uid, '=')
        ->execute()
        ->fetchAssoc();
        $form['field_contact_me'][LANGUAGE_NONE]['#default_value'] = $user_contact_me['field_contact_me_value'];

        $user_newsletter = db_select('field_data_field_newsletter', 'news')
        ->fields('news', array('field_newsletter_value'))
        ->condition('entity_id', $form['#user']->uid, '=')
        ->execute()
        ->fetchAssoc();
        $form['field_newsletter'][LANGUAGE_NONE]['#default_value'] = $user_newsletter['field_newsletter_value'];

        // No one should be able to change clear text password in admin area.
        $form['field_pass_clear']['#disabled'] = TRUE;
        
        // Show user name.
        $form['username'] = array(
          '#type' => 'markup',
          '#markup' => kms_user_render_username($user),
          '#disabled' => TRUE,
          '#weight' => -100,
        );

        // Add user settings to js.
        drupal_add_js(
          array(
            'kms_user' => array(
              'isSuperAdmin' => kms_user_is_superadmin($user),
              'uid' => $user->uid,
              ),
          ),
          'setting'
        );
        
        // Do not allow editing of user type to anybody else than super admin.
        if (!kms_user_is_superadmin($user)) {
          $form['field_user_type']['#access'] = FALSE;
          $form['field_address']['und'][0]['street_block']['#access'] = FALSE;
          $form['field_address']['und'][0]['country']['#access'] = FALSE;
          $form['field_address']['und'][0]['locality_block']['#access'] = FALSE;
          $form['field_address']['und'][0]['organisation_block']['#access'] = FALSE;
        }
        break;
      case 'user_register_form':
        // They do not want a fieldset title on address.
        $form['field_address'][LANGUAGE_NONE][0]['#title'] = '';
        // We need to store the new password
        $form['#submit'][] = '_kms_user_insert_user_pass';
        // Store user data in Oracle.
        $form['#submit'][] = '_kms_user_submit_insert_user_oracle';
        break;
    }


  }
  
  if (in_array($form_id, array('user_pass', 'user_profile_form'))) {
    $form['#validate'][] = '_kms_user_user_pass_validate';
  }

}

function _kms_user_user_pass_validate($form, &$form_state) {
  if (empty($form_state['values']['pass'])) {
    return;
  }
  $name = trim($form_state['values']['name']);
  _kms_user_user_pass_validate_chars($form_state['values']['pass']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }

  if (isset($account->uid)) {
    // Check if this account is a system-account, and if so tell the user no-no
    $roles = $account->roles;
    if (kms_user_is_system_account($roles)) {
      form_set_error('name', t('It is not possible to change or reset the password for users with the role systemaccount. Contact the site administrator to do this.'));
      drupal_goto(variable_get('kms_user_page_contact', KMS_USER_PAGE_CONTACT));
    }
  }
}

function _kms_user_user_pass_validate_chars($value) {
  preg_match_all("#([æøå])#uis", $value, $m);

  foreach ($m as $match) {
    if (empty($match)) {
      continue;
    }

    form_set_error(
      'pass',
      t(
        'Password contains invalid characters: %chars',
        array(
          '%chars' => implode(', ', array_unique($match)),
        )
      )
    );

    return;
  }

}


function kms_user_form_after_build($form_element) {
    $terms_and_conditions = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis  nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';

    $form_element[LANGUAGE_NONE]["#description"] = '<a target="_blank" href="/content/vilkår-og-betingelser" id="terms_conditions">'.t('Read here').'</a>';
    /*
    $form_element[LANGUAGE_NONE]['#suffix'] = '<div id="terms_and_conditions" style="display:none;">' . $terms_and_conditions .'<a id="terms_and_conditions_close" class="close" href="#">close</a></div>'; */

    drupal_add_js(drupal_get_path('module', 'kms_user') .'/js/jquery.lightbox_me.js');
    drupal_add_js("jQuery(function() { 
               jQuery('#terms_and_conditions_link').click(function(e) { 
                 jQuery('#terms_and_conditions').lightbox_me({ centered: true });
                 e.preventDefault(); 
               }); });",'inline');
               
      // On the user-register form users must be presented with a textfield if the user-type selected 
      // via Hiearchical Select is either 'NGO' (tid=3518) or 'Forening' (tid=3520)
      drupal_add_js('jQuery(function() {
              jQuery("#hierarchical-select-0-wrapper").live("change-hierarchical-select", function() {
                    var Selected = jQuery("#edit-field-user-type-und-hierarchical-select-selects-0").val();
                    if (Selected == "3518" || Selected == "3520") {
                        jQuery("#field-user-type-info-add-more-wrapper").show(200);
                    }
                    else {
                        jQuery("#field-user-type-info-add-more-wrapper").hide(200);
                    }
              }); });', 'inline');


    return $form_element;
}


/**
 * Form element validator.
 * Checks a username for invaild characters.
 *
 * @param array $element
 *   Drupal form element.
 * @param array $form_state
 *   Drupal form state array.
 * @param array $form
 *   Drupal form array.
 *
 * @return void
 */
function _kms_user_validate_username($element, &$form_state, $form) {
    _kms_user_validate_chars(
      $element,
      "#(\/)|(\\\\)|(=)|(\?)|(\&)|(\.)|(\@)|(\s)|([æøå])#uis"
    );
}

function _kms_user_validate_chars($element, $pattern) {
  if (empty($element['#value'])) {
    return;
  }

  preg_match_all($pattern, $element['#value'], $m);

  foreach ($m as $match) {
    if (empty($match)) {
      continue;
    }

    form_error(
      $element,
      t(
        '"!element" contains invalid characters: %chars',
        array(
          '!element' => $element['#title'],
          '%chars' => implode(', ', array_unique($match)),
        )
      )
    );

    return;
  }

}

/**
 * Expire users that are past or at their expiration date.
 *
 * @return void
 */
function _kms_user_cron_expire_users() {
  $query = "
    SELECT u.uid FROM {field_data_field_expire_date} ed
    LEFT JOIN {users} u ON u.uid = ed.entity_id
    WHERE
      ed.field_expire_date_value <= :time
    AND
      u.status = 1
  ";
  $result = db_query($query, array(':time' => time()));

  foreach ($result as $row) {
    if (empty($row->uid)) {
      continue;
    }
    $user = user_load($row->uid);
    if (empty($user)) {
      continue;
    }
    $user_w = entity_metadata_wrapper('user', $user);
    $user_w->status = 0;
    $user_w->save();
    // Deactivate Oracle user.
    kms_user_smuser_deactivate($user);
    watchdog(
      'kms_user',
      t(
        'User: %user has been deactivated',
        array('%user' => $user_w->name->value())
      )
    );
  }

}

function _kms_user_update_timestamp($form, &$form_state) {
  // Update time stamp.
  $time = time();
  $user_updated = db_update('field_data_field_updated') 
  ->fields(array('field_updated_value' => $time))
  ->condition('entity_id'  , $form['#user']->uid, '=')
  ->execute();
  $user_updated_rev = db_update('field_revision_field_updated') 
  ->fields(array('field_updated_value' => $time))
  ->condition('entity_id'  , $form['#user']->uid, '=')
  ->execute();
}

function _kms_user_submit_update_user_pass($form, &$form_state) {
  $old_pass = '';
  if (!empty($form_state['user']->current_pass)) {
    $old_pass = $form_state['user']->current_pass;
  }
  $new_pass = $form_state['user']->pass;

  if (!empty($new_pass) && ($new_pass !== $old_pass)) {
    _kms_user_insert_user_pass($form, $form_state);
  }
}

function _kms_user_insert_user_pass($form, &$form_state) {
  // The password has changed and we need to store the new password
  // But we first need to check if the user is already registered
  $new_pass = $form_state['user']->pass;

  if ($new_pass && !kms_user_password_is_encrypted($new_pass)) {
    $pass_exists = db_select('field_data_field_pass_clear', 'fpc')
      ->fields('fpc', array('field_pass_clear_value'))
      ->condition('entity_id', $form['#user']->uid, '=')
      ->execute()
      ->fetchAssoc();
    if (!empty($pass_exists)) {
      // The password does exist in the target-table and we update that password
      $pass_updated = db_update('field_data_field_pass_clear') 
      ->fields(array('field_pass_clear_value' => $new_pass))
      ->condition('entity_id', $form['#user']->uid, '=')
      ->execute();
    }
    else {
      // The password does not exist in the target-table and we must insert it
      db_insert('field_data_field_pass_clear') 
      ->fields(array('entity_type' => 'user', 
		      'bundle' => 'user', 
		      'deleted' => 0, 
		      'entity_id' => $form['#user']->uid,
		      'revision_id' => $form['#user']->uid,
		      'language' => LANGUAGE_NONE,
		      'delta' => 0,
		      'field_pass_clear_value' => $new_pass,
		      'field_pass_clear_format' => ''))
      ->execute();
    }
  }
}

/**
 * Is the user a system account.
 *
 * @param array $roles
 *
 * @return boolean
 */
function kms_user_is_system_account($roles) {
  return in_array(KMS_USER_ROLES_SYSTEM_ACCOUNT_ID, array_keys($roles));
}

/**
 * Is user a super admin (drupal admin or superuser).
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return boolean
 */
function kms_user_is_superadmin($user) {
  return (
    $user->uid == 1
    || in_array(KMS_USER_ROLES_SUPERUSER_ID, array_keys($user->roles))
  );
}

/**
 * Render thye user name of a user object.
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return string
 *   HTML.
 */
function kms_user_render_username($user) {
  $name = $user->name;
  $label = t('Username');
  return <<<EOD
    <div class="form-item" id="username-wrapper">
      <label for="username">$label</label>
      <em id="username">$name</em>
  </div>
EOD;
}

function _kms_user_submit_insert_user_oracle($form, &$form_state) {
  $account = (object)$form_state['values'];
  $user = $form['#user'];
  if (empty($user->uid)) {
    return;
  }

  // Get default data.
  $data = _kms_user_oracle_default_user_data($account, 'insert');

  if (!empty($account->field_user_type[LANGUAGE_NONE][0]['tid'])) {
    $data['user_extra'][':usertype'] =
    $account->field_user_type[LANGUAGE_NONE][0]['tid'];
  }
  if (!empty($account->field_user_type_info[LANGUAGE_NONE][0]['value'])) {
    $data['user_extra'][':usertype_info'] =
    $account->field_user_type_info[LANGUAGE_NONE][0]['value'];
  }
  if (!empty($account->field_newsletter[LANGUAGE_NONE][0]['value'])) {
    $data['user_extra'][':receive_newsletter'] =
    $account->field_newsletter[LANGUAGE_NONE][0]['value'];
  }
  if (!empty($account->field_terms_and_conditions[LANGUAGE_NONE][0]['value'])) {
    $data['user_extra'][':accept_terms'] =
    $account->field_terms_and_conditions[LANGUAGE_NONE][0]['value'];
  }
  if (!empty($account->field_contact_me[LANGUAGE_NONE][0]['value'])) {
    $data['user_extra'][':contact_me']
    = $account->field_contact_me[LANGUAGE_NONE][0]['value'];
  }
  // Insert oracle user data.
  if (module_exists('kms_oci') && !kms_user_smuser_exists($account)) {
      kms_oci_insert($data['user_extra'], 'smuser_extra');
      kms_oci_insert($data['user'], 'smuser');
  }

}

function _kms_user_submit_update_user_oracle($form, &$form_state) {
  $account = (object)$form_state['values'];
  $user = $form['#user'];

  $data = _kms_user_oracle_default_user_data($account, 'update');
  unset($data['user_extra'][':usertype']);
  unset($data['user_extra'][':usertype_info']);

  // smuser.
  $data['user'][':disabled'] = (integer)!$account->status;
  if (!empty($account->field_address[LANGUAGE_NONE][0]['first_name'])) {
    $data['user'][':firstname'] =
    $account->field_address[LANGUAGE_NONE][0]['first_name'];
  }
  if (!empty($account->field_address[LANGUAGE_NONE][0]['last_name'])) {
    $data['user'][':lastname'] =
    $account->field_address[LANGUAGE_NONE][0]['last_name'];
  }
  if (!empty($account->field_phone[LANGUAGE_NONE][0]['value'])) {
    $data['user'][':telephonenumber'] =
    $account->field_phone[LANGUAGE_NONE][0]['value'];
  }
  if (!empty($account->field_debtor_nr[LANGUAGE_NONE][0]['value'])) {
    $data['user'][':debitorno'] =
    $account->field_debtor_nr[LANGUAGE_NONE][0]['value'];
  }
  // smuser_extra.
  if (!empty($account->field_user_type[LANGUAGE_NONE][0]['tid'])) {
    $data['user_extra'][':usertype'] =
    $account->field_user_type[LANGUAGE_NONE][0]['tid'];
  }
  if (!empty($account->field_user_type_info[LANGUAGE_NONE][0]['value'])) {
    $data['user_extra'][':usertype_info'] =
    $account->field_user_type_info[LANGUAGE_NONE][0]['value'];
  }
  if (!empty($account->field_newsletter[LANGUAGE_NONE][0]['value'])) {
    $data['user_extra'][':receive_newsletter'] =
    $account->field_newsletter[LANGUAGE_NONE][0]['value'];
  }
  if (!empty($account->field_terms_and_conditions[LANGUAGE_NONE][0]['value'])) {
    $data['user_extra'][':accept_terms'] =
    $account->field_terms_and_conditions[LANGUAGE_NONE][0]['value'];
  }
  if (!empty($account->field_contact_me[LANGUAGE_NONE][0]['value'])) {
    $data['user_extra'][':contact_me'] =
    $account->field_contact_me[LANGUAGE_NONE][0]['value'];
  }
  
  $userid_old = kms_user_get_userid($user);
  $userid_new = kms_user_get_userid($account);
  $data['user'][':userid'] = $data['user_extra'][':userid'] = $userid_new;

  // Update Oracle tables.
  if (module_exists('kms_oci') && kms_user_smuser_exists($user)) {
    kms_oci_update_user($data['user_extra'], 'smuser_extra', $userid_old);
    kms_oci_update_user($data['user'], 'smuser', $userid_old);
  }

}

/**
 * Return default user data.
 *
 * @param object $account
 *   Drupal user object.
 *
 * @return array $data
 *   Default user data.
 */
function _kms_user_oracle_default_user_data($account, $mode) {
  $data = array();
  $data['user'] = array(
    ':userid' => $account->uid,
    ':name' =>  $account->name,
    ':emailaddress' => $account->mail,
  );

  if (!empty($account->pass) && !kms_user_password_is_encrypted($account->pass)) {
    $data['user'][':password'] = $account->pass;
  }

  $data['user_extra'] = array(
    ':duid' => $account->uid,
    ':userid' => $account->uid,
  );

  switch ($mode) {
    case 'insert':
      $data['user'][':disabled'] = 0;
      $data['user_extra'] += array(
        ':usertype' => 0,
        ':usertype_info' => '',
        ':receive_newsletter' => 0,
        ':accept_terms' => 0,
        ':contact_me' => 0,
      );
      break;
    case 'update':
      break;
  }

  return $data;
}

/**
 * Detect if passwird has been encrypted.
 *
 * @param string $pass
 *   Drupal password.
 *
 * @return boolean
 */
function kms_user_password_is_encrypted($pass) {
  return (bool)preg_match('/^\$S\$[0-9a-fA-Z.\/]{52}$/i', $pass);
}

/**
 * Load a Oracle smuser object
 *
 * @param integer $uid
 *   Drupal user id.
 *
 * @return object
 */
function kms_user_smuser_load($uid) {
  $smusers = &drupal_static(__FUNCTION__);

  if (empty($smusers)) {
    $smusers = array();
  }

  if (empty($smusers[$uid])) {
    $query = "
    SELECT * FROM smuser_extra ue
    LEFT JOIN smuser u on u.userid = ue.userid
    WHERE ue.duid = :duid";
    $result = kms_oci_select_one($query, array(':duid' => "$uid"));
    $smusers[$uid] = new stdClass();
    if ($result) {
      array_walk($result, function($v, $k) use (&$smusers, $uid) {
        $prop = strtolower($k);
        $smusers[$uid]->$prop = $v;
      });
    }
    
  }

  return $smusers[$uid];
}

/**
 * Delete smuser from Oracle db.
 *
 * @param mixed $user
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return void
 */
function kms_user_smuser_delete($user) {
  if (is_int($user)) {
    $user = user_load($user);
  }
  $kms_userid = kms_user_get_userid($user);

  if (!empty($kms_userid)) {
    $result = kms_oci_query(
      'DELETE FROM smuser WHERE userid = :userid',
      array(':userid' => $kms_userid)
    );
    $result = kms_oci_query(
      'DELETE FROM smuser_extra WHERE userid = :userid',
      array(':userid' => $kms_userid)
    );
  }
}

/**
 * Implements hook_user_delete().
 */
function kms_user_user_delete($user) {
  
  // Delete subusers if present.
  $subusers = subuser_load_all($user);
  if (!empty($subusers)) {
    drupal_set_message(
      t(
        '@count subusers were deleted.',
        array('@count' => count($subusers))
      ),
      'status',
      FALSE
    );
    // Delete subusers.
    user_delete_multiple($subusers);
  }
  
  // If smuser exist then delete it.
  if(kms_user_smuser_exists($user)) {
    // Delete Oracle user data.
    kms_user_smuser_delete($user);
  }

}
/**
 * Get kms user id from user.
 * If kms_user_id is specified use that otherwise user drupal user id.
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return string $userid.
 */
function kms_user_get_userid($user) {
  $userid = $user->uid;
  if (!empty($user->field_kms_user_id[LANGUAGE_NONE][0]['value'])) {
    $userid = $user->field_kms_user_id[LANGUAGE_NONE][0]['value'];
  }
  return (string)$userid;
}

/**
 * Deactivate Oracle smuser.
 *
 * @param mixed $user
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return void
 */
function kms_user_smuser_deactivate($user) {
  if (is_int($user)) {
    $user = user_load($user);
  }

  kms_oci_update_user(
    array(':disabled' => '1'),
    'smuser',
    kms_user_get_userid($user)
  );
}

/**
 * Check if Oracle smuser exists
 *
 * @param mixed $user
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return boolean
 */
function kms_user_smuser_exists($user) {
  if (is_int($user)) {
    $user = user_load($user);
  }

  if(!kms_oci_extension_is_loaded()) {
    return FALSE;
  }

  $oci = kms_oci_get_conn();
  if (!$oci) {
    return FALSE;
  }

  $stid = oci_parse(
    $oci,
    sprintf("SELECT * FROM smuser_extra WHERE duid = '%s'", $user->uid)
  );

  oci_execute($stid);
  
  $row = oci_fetch_array($stid);
  
  return !empty($row);

}

/**
 * Implementation of hook_action_info().
 */
function kms_user_action_info() {
   return array(
    'kms_user_vbo_add_access_bundles' => array(
      'label' => t('Add Access Bundles'),
      'type' => 'user',
      'configurable' => TRUE,
      'hooks' => array(),
    ),
    'kms_user_vbo_clear_access_bundles' => array(
      'label' => t('Clear Access Bundles'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(),
    ),
 );
}

/**
 * VBO add access bundle form.
 *
 * @param array $context
 *   VBO context.
 *
 * @return [type]
 */
function kms_user_vbo_add_access_bundles_form($context) {
  $form['access_bundle'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Choose access bundles'),
    '#description' => t('Select one or more access bundles that the users can access.'),
    '#options' => kms_user_vbo_access_bundle_options(),
  );

  return $form;
}

/**
 * VBO add access bundle form submit.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 *
 * @return array
 */
function kms_user_vbo_add_access_bundles_submit($form, $form_state) {
  return array(
    'access_bundle' => array_filter($form_state['values']['access_bundle']),
  );
}

/**
 * VBO add access bundles operations.
 *
 * @param object $account
 *   Drupal user object.
 * @param array $context
 *   VBO context.
 *
 * @return void
 */
function kms_user_vbo_add_access_bundles(&$account, $context = array()) {
  kms_user_access_bundle_administer('update', $account, $context['access_bundle']);
}

/**
 * Clear all access bundles from a user.
 *
 * @param object $account
 *   Drupal user object.
 * @param array $context
 *   VBO context.
 *
 * @return void
 */
function kms_user_vbo_clear_access_bundles(&$account, $context = array()) {
  kms_user_access_bundle_administer('clear', $account);
}

/**
 * Get access bundle form options.
 *
 * @return array
 *   nid/title.
 */
function kms_user_vbo_access_bundle_options() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'access_bundle')
  ->propertyCondition('status', 1)
  ->addMetaData('account', user_load(1));

  $result = $query->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);
  $options = array();
  $def_bundles = _kms_permissions_get_default_bundles();
  array_walk($nodes, function($node, $nid) use(&$options, $def_bundles) {
    // Ignore default bundles;
    if (in_array($nid, $def_bundles)) {
      return;
    }
    $options[$nid] = $node->title;
  });
  return $options;

}

/**
 * Administer access bundles for an account.
 *
 * @param string $op
 *   Which task should be performed?
 * @param object $account
 *   Drupal user object
 * @param array $bundles
 *   Bundles to be added (optional). If $op = clear then it is not needed.
 *
 * @return [type]
 */
function kms_user_access_bundle_administer($op, $account, $bundles = array()) {
  if (empty($account)) {
    return;
  }
  $w = entity_metadata_wrapper('user', $account);
  $w_bundles = $w->field_access_bundles->value();
  
  $current_bundles = array();
  
  switch ($op) {
    case 'update':
      array_walk($w_bundles, function($node) use (&$current_bundles){
        $current_bundles[] = $node->nid;
      });
    case 'clear':
      $bundles = array_merge($current_bundles, $bundles);
      $w->field_access_bundles->set($bundles);
      break;
  }
  
  $w->save();
}