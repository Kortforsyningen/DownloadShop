<?php

define('KMS_USER_ROLES_SYSTEM_ACCOUNT_ID', 7);
define('KMS_USER_ROLES_SUPERUSER_ID', 4);
define('KMS_USER_PAGE_CONTACT', 'node/7');
define('KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER', 'admin_views_user');
define('KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER', 'system_1');

/**
 * Implements hook_init().
 */
function kms_user_init() {
  if (current_path() == 'admin/people') {
    drupal_add_js(drupal_get_path('module', 'kms_user') . '/js/admin_views_people.js');
    drupal_add_css(drupal_get_path('module', 'kms_user') . '/css/admin_views_people.css');
    drupal_add_library('kms_permissions', 'jquery.foggy');
  }
}

/**
 * Implements hook_watchdog().
 */
function kms_user_watchdog(array $log_entry) {
  global $user;
  // If a system account is prohibited access to a page
  // then set a message and redirect to front.
  if (
    $log_entry['type'] == 'access denied'
    && $log_entry['user']->uid == $user->uid
    && kms_user_is_system_account($log_entry['user']->roles)
  ) {
    drupal_set_message(
      t(
        'You cannot access %uri as a system account.',
        array('%uri' => $log_entry['message'])
      ),
      'error'
    );
    drupal_goto(variable_get('kms_user_page_contact', KMS_USER_PAGE_CONTACT));
  }
}

/**
 * Implements hook_permission().
 */
function kms_user_permission() {
  return array(
    'access kms user pages' => array(
      'title' => t('Access kms user pages'),
      'description' => t('Access kms user pages.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function kms_user_menu() {
  $items = array();

  $items['kms-user/ajax/refresh-admin-views-people'] = array(
    'title' => 'Kms user refresh loaded admin views people view',
    'page callback' => 'kms_user_ajax_refresh_admin_views_people',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/kms-user/%ctools_js/filter-admin-views-people-perms'] = array(
    'title' =>'Filter users by permissions',
    'description' => 'Select permissions to filter by',
    'access arguments' => array('access content'),
    'page callback' => 'kms_user_filter_admin_views_people_perms',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function kms_user_menu_alter(&$items) {
  $restricted_paths = variable_get(
    'kms_user_system_account_restricted_paths',
    array(
      'edit/profile',
      'user/password',
      'user/register',
      'user/reset/%/%/%',
      'user/%user/edit',
      'user/%user',
      'user/%user/cancel',
      'user/%user/cancel/confirm/%/%',
      'user/%user/view',
    )
  );

  foreach($items as $path => &$item) {
    if(in_array($path, $restricted_paths)) {
      if (!empty($item['access callback']))
        $item['access arguments'][] = $item['access callback'];
      $item['access callback'] = '_kms_user_access_callback_deny_system_account';
    }
  }
}

function kms_user_views_data() {
  $data['users']['kms_edit_node'] = array(
    'field' => array(
      'title' => t('Edit link (kms_user)'),
      'help' => t('Provide a simple link to edit the user (kms_user).'),
      'handler' => 'views_handler_field_kms_user_link_edit',
    ),
  );
  return $data;
}

function _kms_user_access_callback_deny_system_account() {
  global $user;
  $args = func_get_args();
  $access_callback = array_pop($args);
  $original_access = TRUE;
  if(!empty($access_callback) && is_string($access_callback)) {
    $original_access = call_user_func_array($access_callback, $args);
  }
  $roles = $user->roles;
  // Todo. Do this the right way.
  // For some reason user_access is flaky
  // but that is the one that should be used instead of $is_systemaccount;
  // return $original_access && user_access('Access kms user pages');
  return $original_access && !kms_user_is_system_account($roles);
}

/**
 * Implements hook_cron.
 */
function kms_user_cron() {
  _kms_user_cron_expire_users();
}

function kms_user_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  // if (in_array($owner, array('ctools', 'addressfield'))) {
  if (in_array($module, array('ctools'))) {
    return "plugins/$plugin";
  }
  if ($module == 'kms_oci_queue') {
    return 'plugins/kms_oci_queue/' . $plugin;
  }
}

//function kms_user_user_insert(&$edit, $account, $category) {
//  global $user;
//  _adapt_debug('mikkel', $user);
////  $user = user_load($account->uid);
////  _adapt_debug('mikkel', kms_subuser_is_subuser($user));
//  $user_roles = !empty($account->roles) ? $account->roles : array();
//  // Atodo: Create oci job as well.
//  if($account->is_new && in_array(KMS_SUBUSER_ROLE_NAME, $user_roles)) {
//    kms_permissions_clone_perms($user, $account);
//  }
////  _adapt_debug('mikkel', in_array(KMS_SUBUSER_ROLE_NAME, $user_roles));
////  _adapt_debug('mikkel', relation_get_related_entity('user', $account->uid));
//  // If user has 'subuser' role and has a related entity.
////  var_dump(relation_get_related_entity('user', $account->uid));
////  return in_array(KMS_SUBUSER_ROLE_NAME, $user_roles)
////  && relation_get_related_entity('user', $account->uid);
//}

/**
 * Implements hook_form_alter().
 */
function kms_user_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (in_array($form_id, array('user_register_form', 'user_profile_form'))) {
    $form['account']['name']['#element_validate'] = array('_kms_user_validate_username');
    $form['account']['name']['#description'] = t(
      'Spaces are not allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'
    );

    $form['field_terms_and_conditions']['#after_build'] = array('kms_user_form_after_build');

    // Update user 'updated' time stamp.
    $form['#submit'][] = '_kms_user_update_timestamp';
    $form['field_updated']['#disabled'] = TRUE;
    switch ($form_id) {
      case 'user_profile_form':
        // Bundle in service list
        // Add CSS
        $form['#attached']['css'][] = drupal_get_path('module', 'kms_user') . '/css/kms_user.css';
        // Field loop
        foreach ($form as $field_name => $field_value) {
          // Only use bundle fields
          if (strpos($field_name, 'field_bundle_webservices') !== false) {
            if (!empty($field_value['und']['#options'])) {
              foreach ($field_value['und']['#options'] as $service_id => $service_name) {
                $form[$field_name]['und']['#options'][$service_id] = $service_name;
              }
            }
          }
        }
        // The terms and conditions must(!) be accepted on the register-form. After that the terms and conditions
        // can NOT be altered by the user. So we change the default value to 'accepted', and disable the checkbox
        $form['field_terms_and_conditions']['#default_value'] = 1;
        $form['field_terms_and_conditions'][LANGUAGE_NONE]['#default_value'] = 1;
        $form_state['field']['field_terms_and_conditions'][LANGUAGE_NONE]['instance']['default_value'][0]['value'] = 1;
        $form['field_terms_and_conditions']['#disabled'] = TRUE;

        // We need to store any changes to the password
        $form['#submit'][] = '_kms_user_submit_update_user_pass';
        // Store user data in Oracle.
        $form['#submit'][] = '_kms_user_submit_update_user_oracle';
        // The user-profile-form has some trouble remembering the user-provided values for
        // the fields "field_contact_me", and "field_newsletter". We must fetch the values
        // and set the fields accordingly
        $user_contact_me = db_select('field_data_field_contact_me', 'cme')
        ->fields('cme', array('field_contact_me_value'))
        ->condition('entity_id', $form['#user']->uid, '=')
        ->execute()
        ->fetchAssoc();
        $form['field_contact_me'][LANGUAGE_NONE]['#default_value'] = $user_contact_me['field_contact_me_value'];

        $user_newsletter = db_select('field_data_field_newsletter', 'news')
        ->fields('news', array('field_newsletter_value'))
        ->condition('entity_id', $form['#user']->uid, '=')
        ->execute()
        ->fetchAssoc();
        $form['field_newsletter'][LANGUAGE_NONE]['#default_value'] = $user_newsletter['field_newsletter_value'];

        // No one should be able to change clear text password in admin area.
        $form['field_pass_clear']['#disabled'] = TRUE;
        
        // Show user name.
        $form['username'] = array(
          '#type' => 'markup',
          '#markup' => kms_user_render_username($user),
          '#disabled' => TRUE,
          '#weight' => -100,
        );

        // Add user settings to js.
        drupal_add_js(
          array(
            'kms_user' => array(
              'isSuperAdmin' => kms_user_is_superadmin($user),
              'uid' => $user->uid,
              ),
          ),
          'setting'
        );
        
        // Do not allow editing of user type to anybody else than super admin.
        if (!kms_user_is_superadmin($user)) {
          $form['field_user_type']['#access'] = FALSE;
          $form['field_address']['und'][0]['street_block']['#access'] = FALSE;
          $form['field_address']['und'][0]['country']['#access'] = FALSE;
          $form['field_address']['und'][0]['locality_block']['#access'] = FALSE;
          $form['field_address']['und'][0]['organisation_block']['#access'] = FALSE;
        }
        break;
      case 'user_register_form':
        // They do not want a fieldset title on address.
        $form['field_address'][LANGUAGE_NONE][0]['#title'] = '';
        // We need to store the new password
        $form['#submit'][] = '_kms_user_insert_user_pass';
        // Store user data in Oracle.
        $form['#submit'][] = '_kms_user_submit_insert_user_oracle';
        break;
    }


  }

  if (in_array($form_id, array('user_pass', 'user_profile_form'))) {
    $form['#validate'][] = '_kms_user_user_pass_validate';
  }

}

function _kms_user_user_pass_validate($form, &$form_state) {
  if (empty($form_state['values']['pass'])) {
    return;
  }
  $name = trim($form_state['values']['name']);
  _kms_user_user_pass_validate_chars($form_state['values']['pass']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }

  if (isset($account->uid)) {
    // Check if this account is a system-account, and if so tell the user no-no
    $roles = $account->roles;
    if (kms_user_is_system_account($roles)) {
      form_set_error('name', t('It is not possible to change or reset the password for users with the role systemaccount. Contact the site administrator to do this.'));
      drupal_goto(variable_get('kms_user_page_contact', KMS_USER_PAGE_CONTACT));
    }
  }
}

function _kms_user_user_pass_validate_chars($value) {
  preg_match_all("#([æøå])#uis", $value, $m);

  foreach ($m as $match) {
    if (empty($match)) {
      continue;
    }

    form_set_error(
      'pass',
      t(
        'Password contains invalid characters: %chars',
        array(
          '%chars' => implode(', ', array_unique($match)),
        )
      )
    );

    return;
  }

}


function kms_user_form_after_build($form_element) {
    $terms_and_conditions = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis  nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';

    $form_element[LANGUAGE_NONE]["#description"] = '<a target="_blank" href="/content/vilkår-og-betingelser" id="terms_conditions">'.t('Read here').'</a>';
    /*
    $form_element[LANGUAGE_NONE]['#suffix'] = '<div id="terms_and_conditions" style="display:none;">' . $terms_and_conditions .'<a id="terms_and_conditions_close" class="close" href="#">close</a></div>'; */

    drupal_add_js(drupal_get_path('module', 'kms_user') .'/js/jquery.lightbox_me.js');
    drupal_add_js("jQuery(function() { 
               jQuery('#terms_and_conditions_link').click(function(e) { 
                 jQuery('#terms_and_conditions').lightbox_me({ centered: true });
                 e.preventDefault(); 
               }); });",'inline');
               
      // On the user-register form users must be presented with a textfield if the user-type selected 
      // via Hiearchical Select is either 'NGO' (tid=3518) or 'Forening' (tid=3520)
      drupal_add_js('jQuery(function() {
              jQuery("#hierarchical-select-0-wrapper").live("change-hierarchical-select", function() {
                    var Selected = jQuery("#edit-field-user-type-und-hierarchical-select-selects-0").val();
                    if (Selected == "3518" || Selected == "3520") {
                        jQuery("#field-user-type-info-add-more-wrapper").show(200);
                    }
                    else {
                        jQuery("#field-user-type-info-add-more-wrapper").hide(200);
                    }
              }); });', 'inline');


    return $form_element;
}


/**
 * Form element validator.
 * Checks a username for invaild characters.
 *
 * @param array $element
 *   Drupal form element.
 * @param array $form_state
 *   Drupal form state array.
 * @param array $form
 *   Drupal form array.
 *
 * @return void
 */
function _kms_user_validate_username($element, &$form_state, $form) {
    _kms_user_validate_chars(
      $element,
      "#(\/)|(\\\\)|(=)|(\?)|(\&)|(\.)|(\@)|(\s)|([æøå])#uis"
    );
}

function _kms_user_validate_chars($element, $pattern) {
  if (empty($element['#value'])) {
    return;
  }

  preg_match_all($pattern, $element['#value'], $m);

  foreach ($m as $match) {
    if (empty($match)) {
      continue;
    }

    form_error(
      $element,
      t(
        '"!element" contains invalid characters: %chars',
        array(
          '!element' => $element['#title'],
          '%chars' => implode(', ', array_unique($match)),
        )
      )
    );

    return;
  }

}

/**
 * Expire users that are past or at their expiration date.
 *
 * @return void
 */
function _kms_user_cron_expire_users() {
  $query = "
    SELECT u.uid FROM {field_data_field_expire_date} ed
    LEFT JOIN {users} u ON u.uid = ed.entity_id
    WHERE
      ed.field_expire_date_value <= :time
    AND
      u.status = 1
  ";
  $result = db_query($query, array(':time' => time()));

  foreach ($result as $row) {
    if (empty($row->uid)) {
      continue;
    }
    $user = user_load($row->uid);
    if (empty($user)) {
      continue;
    }
    $user_w = entity_metadata_wrapper('user', $user);
    $user_w->status = 0;
    $user_w->save();
    // Deactivate Oracle user.
    kms_user_smuser_deactivate($user);
    watchdog(
      'kms_user',
      t(
        'User: %user has been deactivated',
        array('%user' => $user_w->name->value())
      )
    );
  }

}

function _kms_user_update_timestamp($form, &$form_state) {
  // Update time stamp.
  $time = time();
  $user_updated = db_update('field_data_field_updated') 
  ->fields(array('field_updated_value' => $time))
  ->condition('entity_id'  , $form['#user']->uid, '=')
  ->execute();
  $user_updated_rev = db_update('field_revision_field_updated') 
  ->fields(array('field_updated_value' => $time))
  ->condition('entity_id'  , $form['#user']->uid, '=')
  ->execute();
}

function _kms_user_submit_update_user_pass($form, &$form_state) {
  $old_pass = '';
  if (!empty($form_state['user']->current_pass)) {
    $old_pass = $form_state['user']->current_pass;
  }
  $new_pass = $form_state['user']->pass;

  if (!empty($new_pass) && ($new_pass !== $old_pass)) {
    _kms_user_insert_user_pass($form, $form_state);
  }
}

function _kms_user_insert_user_pass($form, &$form_state) {
  // The password has changed and we need to store the new password
  // But we first need to check if the user is already registered
  $new_pass = $form_state['user']->pass;

  if ($new_pass && !kms_user_password_is_encrypted($new_pass)) {
    $pass_exists = db_select('field_data_field_pass_clear', 'fpc')
      ->fields('fpc', array('field_pass_clear_value'))
      ->condition('entity_id', $form['#user']->uid, '=')
      ->execute()
      ->fetchAssoc();
    if (!empty($pass_exists)) {
      // The password does exist in the target-table and we update that password
      $pass_updated = db_update('field_data_field_pass_clear') 
      ->fields(array('field_pass_clear_value' => $new_pass))
      ->condition('entity_id', $form['#user']->uid, '=')
      ->execute();
    }
    else {
      // The password does not exist in the target-table and we must insert it
      db_insert('field_data_field_pass_clear') 
      ->fields(array('entity_type' => 'user', 
		      'bundle' => 'user', 
		      'deleted' => 0, 
		      'entity_id' => $form['#user']->uid,
		      'revision_id' => $form['#user']->uid,
		      'language' => LANGUAGE_NONE,
		      'delta' => 0,
		      'field_pass_clear_value' => $new_pass,
		      'field_pass_clear_format' => ''))
      ->execute();
    }
  }
}

/**
 * Is the user a system account.
 *
 * @param array $roles
 *
 * @return boolean
 */
function kms_user_is_system_account($roles) {
  return in_array(KMS_USER_ROLES_SYSTEM_ACCOUNT_ID, array_keys($roles));
}

/**
 * Is user a super admin (drupal admin or superuser).
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return boolean
 */
function kms_user_is_superadmin($user) {
  return (
    $user->uid == 1
    || in_array(KMS_USER_ROLES_SUPERUSER_ID, array_keys($user->roles))
  );
}

/**
 * Render thye user name of a user object.
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return string
 *   HTML.
 */
function kms_user_render_username($user) {
  $name = $user->name;
  $label = t('Username');
  return <<<EOD
    <div class="form-item" id="username-wrapper">
      <label for="username">$label</label>
      <em id="username">$name</em>
  </div>
EOD;
}

function _kms_user_submit_insert_user_oracle($form, &$form_state) {
  $account = (object)$form_state['values'];
  $user = $form['#user'];
  if (empty($user->uid)) {
    return;
  }

  // Insert oracle user data.
  if (module_exists('kms_oci_queue')) {
//      kms_oci_insert($data['user_extra'], 'smuser_extra');
//      kms_oci_insert($data['user'], 'smuser');
    $data = _kms_oci_queue_create_insert_smuser_data($account);
    // Populate user tables in oracle.
    $jobs = array();
    $jobs[] = KmsOciQueueJob::create(array(
      'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
      'action_details' => format_string(
        'Inserting new user: @user_details.',
        array(
          '@user_details' => json_encode($data),
        )
      ),
      'params' => array(
        array($data['user'], 'SMUSER'),
        array($data['user_extra'], 'SMUSER_EXTRA'),
      )
    ));
    // Populate user permission tables of the new user in Oracle
    // with permissions from the default bundles.
    $bids = _kms_permissions_get_default_bundles();
    $job_params = array(
      'action' => KMS_OCI_QUEUE_ACTION_BUNDLES_ATTACH,
      'action_details' => format_string(
        'Attaching default bundles: @bundles to new user: @user.',
        array(
          '@bundles' => implode(', ', $bids),
          '@user' => $account->uid,
        )
      ),
      'params' => array(
        'uid' => $account->uid,
        'bids' => $bids,
      ),
    );
    $jobs[] = KmsOciQueueJob::create($job_params);
    $jobs[] = KmsOciQueueJob::create($job_params, 'kms_permissions');
    $job_group = new KmsOciQueueJobGroup();
    $job_group->add($jobs);
  }

}

function _kms_user_submit_update_user_oracle($form, &$form_state) {
  $account = (object)$form_state['values'];
  $user = $form['#user'];

  // Update Oracle tables if Oracle connection is available.
  if (!module_exists('kms_oci')) {
    return;
  }

  $data = _kms_user_user_update_oci_queue_prepare_data($user, $account);
  $user_data = $data['user_data'];

  // Populate user tables in oracle.
  KmsOciQueueJob::create(array(
    'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
    'action_details' => format_string(
      'Updating user: @user_details.',
      array(
        '@user_details' => json_encode($user_data['user']),
      )
    ),
    'params' => array(
      array($user_data['user'], 'SMUSER'),
      array($user_data['user_extra'], 'SMUSER_EXTRA'),
    ),
  ));

  _kms_user_user_update_oci_queue_bundles_attach($account, $user, $data);

}

/**
 * Return default user data.
 *
 * @param object $account
 *   Drupal user object.
 *
 * @return array $data
 *   Default user data.
 */
function _kms_user_oracle_default_user_data($account, $mode) {
  $data = array();
  $data['user'] = array(
    ':userid' => $account->uid,
    ':name' =>  $account->name,
    ':emailaddress' => $account->mail,
  );

  if (!empty($account->pass) && !kms_user_password_is_encrypted($account->pass)) {
    $data['user'][':password'] = $account->pass;
  }

  $data['user_extra'] = array(
    ':duid' => $account->uid,
    ':userid' => $account->uid,
  );

  switch ($mode) {
    case 'insert':
      $data['user'][':disabled'] = 0;
      $data['user_extra'] += array(
        ':usertype' => 0,
        ':usertype_info' => '',
        ':receive_newsletter' => 0,
        ':accept_terms' => 0,
        ':contact_me' => 0,
      );
      break;
    case 'update':
      break;
  }

  return $data;
}

/**
 * Detect if passwird has been encrypted.
 *
 * @param string $pass
 *   Drupal password.
 *
 * @return boolean
 */
function kms_user_password_is_encrypted($pass) {
  return (bool)preg_match('/^\$S\$[0-9a-fA-Z.\/]{52}$/i', $pass);
}

/**
 * Load a Oracle smuser object
 *
 * @param integer $uid
 *   Drupal user id.
 *
 * @return object
 */
function kms_user_smuser_load($uid) {
  $smusers = &drupal_static(__FUNCTION__);

  if (empty($smusers)) {
    $smusers = array();
  }

  if (empty($smusers[$uid])) {
    $query = "
    SELECT * FROM smuser_extra ue
    LEFT JOIN smuser u on u.userid = ue.userid
    WHERE ue.duid = :duid";
    $result = kms_oci_select_one($query, array(':duid' => "$uid"));
    $smusers[$uid] = new stdClass();
    if ($result) {
      array_walk($result, function($v, $k) use (&$smusers, $uid) {
        $prop = strtolower($k);
        $smusers[$uid]->$prop = $v;
      });
    }
    
  }

  return $smusers[$uid];
}

/**
 * Delete smuser from Oracle db.
 *
 * @param mixed $user
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return void
 */
function kms_user_smuser_delete($user) {
  if (is_int($user)) {
    $user = user_load($user);
  }
  $kms_userid = kms_user_get_userid($user);
  if (!empty($kms_userid)) {
//    $result = kms_oci_query(
//      'DELETE FROM smuser WHERE userid = :userid',
//      array(':userid' => $kms_userid)
//    );
//    $result = kms_oci_query(
//      'DELETE FROM smuser_extra WHERE userid = :userid',
//      array(':userid' => $kms_userid)
//    );
    // Delete all oracle rows belonging to user.
    KmsOciQueueJob::create(array(
      'action' => KMS_OCI_QUEUE_ACTION_USER_DELETE,
      'action_details' => format_string(
        'Deleting user: @user.',
        array(
          '@user' => $user->name,
        )
      ),
      'params' => array(
        'kms_id' => $kms_userid,
      )
    ));
    KmsOciQueueJob::create(array(
      'action' => KMS_OCI_QUEUE_ACTION_USER_DELETE,
      'action_details' => format_string(
        'Deleting user: @user.',
        array(
          '@user' => $user->name,
        )
      ),
      'params' => array(
        'kms_id' => $kms_userid,
      )
    ), 'kms_permissions');
  }
}

/**
 * Implements hook_user_delete().
 */
function kms_user_user_delete($user) {
  
  // Delete subusers if present.
  $subusers = subuser_load_all($user);
  if (!empty($subusers)) {
    drupal_set_message(
      t(
        '@count subusers were deleted.',
        array('@count' => count($subusers))
      ),
      'status',
      FALSE
    );
    // Delete subusers in oracle.
    foreach($subusers as $subuser_uid) {
      kms_user_smuser_delete($subuser_uid);
    }
    // Delete subusers locally.
    user_delete_multiple($subusers);
  }
  
  // Delete Oracle user data.
  kms_user_smuser_delete($user);

}
/**
 * Get kms user id from user.
 * If kms_user_id is specified use that otherwise user drupal user id.
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return string $userid.
 */
function kms_user_get_userid($user) {
  $userid = $user->uid;
  if (!empty($user->field_kms_user_id[LANGUAGE_NONE][0]['value'])) {
    $userid = $user->field_kms_user_id[LANGUAGE_NONE][0]['value'];
  }
  return (string)$userid;
}

/**
 * Deactivate Oracle smuser.
 *
 * @param mixed $account
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return void
 */
function kms_user_smuser_deactivate($account) {
  if (is_int($account)) {
    $account = user_load($account);
  }
  $data = _kms_oci_queue_create_update_smuser_data($account);
  unset($data['user_extra']);
  $data['user'][':disabled'] = 1;
  $data['user'][':userid'] = kms_user_get_userid($account);

  // Atodo: Create kms oci queue job here.
  KmsOciQueueJob::create(array(
    'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
    'action_details' => format_string(
      'Deactivating user: @user_details.',
      array(
        '@user_details' => json_encode($data),
      )
    ),
    'params' => array(
      array($data['user'], 'smuser'),
    )
  ));

}

/**
 * Check if Oracle smuser exists
 *
 * @param mixed $user
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return boolean
 */
function kms_user_smuser_exists($user) {
  if (is_int($user)) {
    $user = user_load($user);
  }

  if(!kms_oci_extension_is_loaded()) {
    return FALSE;
  }

  $oci = kms_oci_get_conn();
  if (!$oci) {
    return FALSE;
  }

  $stid = oci_parse(
    $oci,
    sprintf("SELECT * FROM smuser WHERE name = '%s'", $user->name)
  );

  oci_execute($stid);
  
  $row = oci_fetch_array($stid);
  
  return !empty($row);

}

/**
 * Implementation of hook_action_info().
 */
function kms_user_action_info() {
   return array(
    'kms_user_vbo_add_access_bundles' => array(
      'label' => t('Add Access Bundles'),
      'type' => 'user',
      'configurable' => TRUE,
      'hooks' => array(),
    ),
    'kms_user_vbo_clear_access_bundles' => array(
      'label' => t('Clear Access Bundles'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(),
    ),
 );
}

/**
 * VBO add access bundle form.
 *
 * @param array $context
 *   VBO context.
 *
 * @return [type]
 */
function kms_user_vbo_add_access_bundles_form($context) {
  $form['access_bundle'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Choose access bundles'),
    '#description' => t('Select one or more access bundles that the users can access.'),
    '#options' => kms_user_vbo_access_bundle_options(),
  );

  return $form;
}

/**
 * VBO add access bundle form submit.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 *
 * @return array
 */
function kms_user_vbo_add_access_bundles_submit($form, $form_state) {
  return array(
    'access_bundle' => array_filter($form_state['values']['access_bundle']),
  );
}

/**
 * VBO add access bundles operations.
 *
 * @param object $account
 *   Drupal user object.
 * @param array $context
 *   VBO context.
 *
 * @return void
 */
function kms_user_vbo_add_access_bundles(&$account, $context = array()) {
  kms_user_access_bundle_administer('add', $account, $context['access_bundle']);
}

/**
 * Clear all access bundles from a user.
 *
 * @param object $account
 *   Drupal user object.
 * @param array $context
 *   VBO context.
 *
 * @return void
 */
function kms_user_vbo_clear_access_bundles(&$account, $context = array()) {
  kms_user_access_bundle_administer('clear', $account);
}

/**
 * Get access bundle form options.
 *
 * @return array
 *   nid/title.
 */
function kms_user_vbo_access_bundle_options() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'access_bundle')
  ->propertyCondition('status', 1)
  ->addMetaData('account', user_load(1));

  $result = $query->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);
  $options = array();
  $def_bundles = _kms_permissions_get_default_bundles();
  array_walk($nodes, function($node, $nid) use(&$options, $def_bundles) {
    // Ignore default bundles;
    if (in_array($nid, $def_bundles)) {
      return;
    }
    $options[$nid] = $node->title;
  });
  return $options;

}

/**
 * Administer access bundles for an account.
 *
 * @param string $op
 *   Which task should be performed?
 * @param object $account
 *   Drupal user object
 * @param array $bundles
 *   Bundles to be added (optional). If $op = clear then it is not needed to be set.
 *
 * @return void
 */
function kms_user_access_bundle_administer($op, $account, $bundles = array()) {
  if (empty($account)) {
    return;
  }
  $def_bundles = _kms_permissions_get_default_bundles();
  $current_bundles = array_combine($def_bundles, $def_bundles);

  $w = entity_metadata_wrapper('user', $account);
  $w_bundles = array_filter($w->field_access_bundles->value());
  switch ($op) {
    case 'add':
      array_walk($w_bundles, function($node) use (&$current_bundles){
        $current_bundles[$node->nid] = $node->nid;
      });
      $bundles = array_merge($current_bundles, $bundles);
      break;
    case 'clear':
      $bundles = $current_bundles;
      break;
  }

  $w->field_access_bundles->set($bundles);
  $w->save();
  // Load changes and activate oci queue jobs.
  $account = user_load($account->uid);
  _kms_user_user_update_oci_queue_bundles_attach($account, $account);
}

/**
 * Load people admin views and return it as JSON.
 */
function kms_user_ajax_refresh_admin_views_people () {
  $view = views_get_view(KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER);
  $view->set_display(KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER);
  $view->is_cacheable = FALSE;
  $view->execute();
  drupal_json_output(array('view' => $view->render()));
  exit;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_user_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  $view = $form_state['view'];
  // Due to a reset bug that concerns the Drupal 7.17 core this is needed.
  // Atodo: Remove when Drupal has been upgraded.
  if (
    $view->name == KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER
    && $view->current_display == KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER
  ) {
    $form_state['redirect'] = 'admin/people';
  }

}


/**
 * Ajax render function.
 * Renders relevant ctools modal json data.
 *
 * @param boolean $js
 *   Is the client using javascript?
 *
 * @return string
 *   JSON.
 */
function kms_user_filter_admin_views_people_perms($js = FALSE) {
  if (!$js) {
    return drupal_get_form('kms_user_filter_admin_views_people_perms_form');
  }
  // We do not want messages shown in our popup.
  drupal_get_messages();
  // Include relevant ctools code.
  ctools_include('modal');
  ctools_include('ajax');
  // Add necessary form_state data.
  $form_state = array(
    'ajax' => TRUE,
    'build_info' => array(
      'args'  => array(
        'query' => drupal_get_query_parameters(),
      ),
    ),
  );
  // Create form output.
    $form_state['title'] = t('Select permissions');
    $output = ctools_modal_form_wrapper('kms_user_filter_admin_views_people_perms_form', $form_state);
  // If form is executed remove modal popup.

  if (!empty($form_state['executed'])) {
    $output = array();
    // Get all user ids from chosen services.
    $uids = _kms_user_get_users_from_services($form_state['filter']);
    // If no users are presnet create an array with a very high uid so that the views get no matches.
    $uids = !empty($uids) ? $uids : array(99999999999);
    // Maybe use session in the future?
//    $_SESSION['views']['admin_views_user']['kms_user_filter']['uids'] = $uids;

    // Load view filtered by uids.
    $view = views_get_view(KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER);
    $view->set_display(KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER);
    $view->is_cacheable = FALSE;
    $views_arg_str = implode('+', $uids);
    $view->set_arguments(array($views_arg_str));
    $output[] = ajax_command_html('.view-admin-views-user', $view->render());

    // Get all available services.
    $service_list = kms_permissions_get_service_list();
    // Create services array from chosen services.
    $services = array();
    foreach($form_state['filter'] as $field_sids) {
      $field_sids = $field_sids[LANGUAGE_NONE];
      array_walk($field_sids, function($sid) use ($service_list, &$services){
        $entry = $service_list[$sid];
        $services[$entry['SERVICEID']] = sprintf("%s (%s)", $entry['SERVICENAME'], $entry['TYPENAME']);
      });
    }
    // Render array that shows what is filtering the user list.
    $filter_status = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(),
      ),
      'span-services' => array(
        '#theme' => 'html_tag',
        '#tag' => 'span',
        '#value' => t(
          'Users filtered by services: %services',
          array('%services' => implode(', ', $services))
        ),
      ),
    );
    // Js commands.
    $output[] = ajax_command_replace('a.ctools-use-modal-processed', render($filter_status));
    $output[] = ctools_modal_command_dismiss();
  }
  // Render output.
  print ajax_render($output);
  exit;
}

/**
 * Drupal form function.
 * Used for popup filtering of permissions in people admin view.
 */
function kms_user_filter_admin_views_people_perms_form ($form, &$form_state) {
  $form = &drupal_static(__FUNCTION__);
  if (!isset($form)) {
    $cache_id = 'kms_user_filter_admin_views_people_perms_form';
    if ($cache = cache_get($cache_id)) {
      $form = $cache->data;
    }
  else {
      module_load_include('inc', 'user', 'user.pages');
      $user_form = drupal_get_form('user_profile_form');
      $ws_fields = _kms_permissions_webservice_fields();


      $form = array();
      array_walk($ws_fields, function($ws_name) use($user_form, &$form) {
        $form[$ws_name] = $user_form[$ws_name];
      });


      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Filter', array(), array('context' => 'kms_user')),
        '#weight' => 500
      );

      cache_set($cache_id, $form, 'cache');
    }
  }

  return $form;
}

function kms_user_filter_admin_views_people_perms_form_submit($form, &$form_state) {
  $form_state['filter'] = array_intersect_key($_REQUEST, array_flip(_kms_permissions_webservice_fields()));
}

//function kms_user_filter_admin_views_people_perms_filter_fields() {
//  return array_merge(
//    _kms_permissions_webservice_fields()
//  );
//}

/**
 * Implements hook_views_pre_render().
 */
function kms_user_views_pre_render(&$view) {
  if (
    $view->name == KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER
    && $view->current_display == KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER
    && $_SERVER['REQUEST_METHOD'] == 'GET'
  ) {
    ctools_include('modal');
    ctools_modal_add_js();

    $popup_link = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(),
      ),
      'popup_link' => array(
        '#theme' => 'link',
        '#text' => '<button id="kms-user-trigger-permission-filter">' . t('Filter current list by permissions') . '</button>',
        '#path' => 'admin/kms-user/nojs/filter-admin-views-people-perms',
        '#options' => array(
          'attributes' => array('class' => 'ctools-use-modal'),
          'html' => TRUE,
          'query' => drupal_get_query_parameters(),
        ),
      ),
    );

    $view->attachment_before = render($popup_link);
  }
}

/**
 * @param array $services
 *  Ex.: array('field_bundle_webservices_geo' => array(1, 4218, 4458), 'field_bundle_webservices_wms' => array(1614))
 * @return array
 */
function _kms_user_get_users_from_services($services) {
  // Merge user arrays function.
  $merge_uids = function ($uids_n_sids, &$users) {
    foreach($uids_n_sids as $uid => $sids) {
      if(empty($users[$uid])) {
        $users[$uid] = $sids;
      }
      else {
        $sids = array_merge($users[$uid], $sids);
        $users[$uid] = array_unique($sids);
      }
    }
  };
  // The end result users array.
  $users = array();
  // Users with separate services.
  $merge_uids(_kms_permissions_get_uids_by_separate_services($services), $users);
  // Users with permissions in bundles.
  $merge_uids(_kms_permissions_get_uids_by_bundle_services($services), $users);
  // Find total number of services.
  $service_count = 0;
  array_walk($services, function ($sids) use (&$service_count) {
    $sids = $sids[LANGUAGE_NONE];
    $service_count += count($sids);
  });
  // Filter all users with right amount of services compared with $service_count.
  $users = array_filter($users, function($sids) use($service_count){
    return count($sids) == $service_count;
  });

  return array_keys($users);
}

/**
 * Start jobs related to user update.
 *
 * @param object $user
 * @param object $account
 * @param array $data
 * @atodo Fix dependency on both user and account vars and use only one.
 *
 * return void
 */
function _kms_user_user_update_oci_queue_bundles_attach($account, $user, $data = array()) {
  if (empty($data)) {
    $data = _kms_user_user_update_oci_queue_prepare_data($account, $user);
  }
  $userids = $data['userids'];

  // Populate user permission tables of the user in Oracle
  // with permissions from the users bundles + separate perms.
  $bids = array();
  if (!empty($account->field_access_bundles[LANGUAGE_NONE][0]['nid'])) {
    $bids = array_map(function ($v){
      return !empty($v['nid']) ? $v['nid'] : '';
    }, $account->field_access_bundles[LANGUAGE_NONE]);
  }
  // We will add the default bundles to the user bundles array,
  // no matter if the default have been attached to the user in postgres yet.
  $bids_def = _kms_permissions_get_default_bundles();
  $bids = array_unique(array_merge($bids, $bids_def));


  // Get separate user permissions and add them to $perms array.
  $perms = array();
  _kms_permissions_get_separate_perms_by_uid($account->uid, $perms);

  $job_params = array(
    'action' => KMS_OCI_QUEUE_ACTION_BUNDLES_ATTACH,
    'action_details' => format_string(
      'Attaching bundles: @bundles to user: @user.',
      array(
        '@bundles' => implode(', ', $bids),
        '@user' => $account->name,
      )
    ),
    'params' => array(
      'uid' => $userids['old'],
      'bids' => $bids,
      'perms' => $perms,
    ),
  );
  KmsOciQueueJob::create($job_params);
  KmsOciQueueJob::create($job_params, 'kms_permissions');

  // Atodo: Update all subusers with the same bundles perms as their master.
  $subusers = subuser_load_all($user);
  foreach ($subusers as $subuser_uid) {
    $subuser = user_load($subuser_uid);
    $job_params = array(
      'action' => KMS_OCI_QUEUE_ACTION_BUNDLES_ATTACH,
      'action_details' => format_string(
        'Attaching bundles: @bundles to subuser: @subuser.',
        array(
          '@bundles' => implode(', ', $bids),
          '@subuser' => $subuser->name,
        )
      ),
      'params' => array(
        'uid' => $subuser->uid,
        'bids' => $bids,
        'perms' => $perms,
      ),
    );
    KmsOciQueueJob::create($job_params);
    KmsOciQueueJob::create($job_params, 'kms_permissions');
  }

}

/**
 * Prepare user data for oci queue job creation.
 *
 * @param $account
 * @param $user
 * @return array
 */
function _kms_user_user_update_oci_queue_prepare_data($account, $user) {
  $user_data = _kms_oci_queue_create_update_smuser_data($account, $user);
  $userids['old'] = kms_user_get_userid($user);
  $userids['new'] = kms_user_get_userid($account);
  $user_data['user'][':userid'] = $user_data['user_extra'][':userid'] = $userids['new'];
  return array(
    'user_data' => $user_data,
    'userids' => $userids,
  );
}