<?php

define('KMS_USER_ROLES_SYSTEM_ACCOUNT_NAME', 'systemaccount');
define('KMS_USER_ROLES_SYSTEM_ACCOUNT_ID', 7);

/**
 * Implements hook_watchdog().
 */
function kms_user_watchdog(array $log_entry) {
  global $user;
  // If a system account is prohibited access to a page
  // then set a message and redirect to front.
  if (
    $log_entry['type'] == 'access denied'
    && $log_entry['user']->uid == $user->uid
    && in_array(KMS_USER_ROLES_SYSTEM_ACCOUNT_NAME, $log_entry['user']->roles)
  ) {
    drupal_set_message(
      t(
        'You cannot access %uri as a system account',
        array('%uri' => $log_entry['message'])
      )
    );
    drupal_goto('<front>');
  }
}

function kms_user_permission() {
  return array(
    'access kms user pages' => array(
      'title' => t('Access kms user pages'), 
      'description' => t('Access kms user pages.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function kms_user_menu_alter(&$items) {
  $restricted_paths = variable_get(
    'kms_user_system_account_restricted_paths',
    array(
      'edit/profile',
      'user/password',
      'user/register',
      'user/%user/edit',
      'user/%user',
      'user/%user/cancel',
      'user/%user/cancel/confirm/%/%',
      'user/%user/view',
    )
  );
  
  foreach($items as $path => &$item) {
    if(in_array($path, $restricted_paths)) {
      $item['access arguments'][] = $item['access callback'];
      $item['access callback'] = '_kms_user_access_callback_deny_system_account';
    }
  }
}


function _kms_user_access_callback_deny_system_account() {
  global $user;
  $args = func_get_args();
  $access_callback = array_pop($args);
  $original_access = TRUE;
  if(!empty($access_callback)) {
    $original_access = call_user_func_array($access_callback, $args);
  }
  $roles = $user->roles;
  // Todo. Do this the right way.
  // For some reason user_access is flaky
  // but that is the one that should be used instead of $is_systemaccount;
  $is_systemaccount = in_array(KMS_USER_ROLES_SYSTEM_ACCOUNT_NAME, $roles);
  // return $original_access && user_access('Access kms user pages');
  return $original_access && !$is_systemaccount;
}

/**
 * Implements hook_cron.
 */
function kms_user_cron() {
  _kms_user_cron_expire_users();
}

function kms_user_ctools_plugin_directory($owner, $plugin_type) {
  // we'll be nice and limit scandir() calls
  // if (in_array($owner, array('ctools', 'addressfield'))) {
  if (in_array($owner, array('ctools'))) {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_form_alter().
 */
function kms_user_form_alter(&$form, &$form_state, $form_id) {

  //adapt_debug('tom',$form_id);

  if (in_array($form_id, array('user_register_form', 'user_profile_form'))) {
    $form['account']['name']['#element_validate'] = array('_kms_user_validate_username');
    $form['account']['name']['#description'] = t(
      'Spaces are not allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'
    );
    // Update user 'updated' time stamp.
    $form['#submit'][] = '_kms_user_update_user';
    $form['field_updated']['#disabled'] = TRUE;
  }
  
}

function kms_user_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($user->uid == 0) {
      $form['field_terms_and_conditions']['#after_build'] = array('kms_user_register_after_build');
  }
}

function kms_user_form_user_account_form_alter(&$form, &$form_state, $form_id) {

}

function kms_user_register_after_build($form_element) {
    //adapt_debug('tom', $form_element['und']);
    $terms_and_conditions = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';

    $form_element['und']["#description"] = '<a href="#" id="terms_and_conditions_link">'.t('Read here').'</a>';
    $form_element['und']['#suffix'] = '<div id="terms_and_conditions" style="display:none;">' . $terms_and_conditions .'<a id="terms_and_conditions_close" class="close" href="#">close</a></div>';

    drupal_add_js(drupal_get_path('module', 'kms_user') .'/js/jquery.lightbox_me.js');
    drupal_add_js("jQuery(function() { 
               jQuery('#terms_and_conditions_link').click(function(e) { 
                 jQuery('#terms_and_conditions').lightbox_me({ centered: true });
                 e.preventDefault(); 
               }); });",'inline');

    return $form_element;
}

/**
 * Form element validator.
 * Checks a username for invaild characters.
 *
 * @param array $element
 *   Drupal form element.
 * @param array $form_state
 *   Drupal form state array.
 * @param array $form
 *   Drupal form array.
 *
 * @return void
 */
function _kms_user_validate_username($element, &$form_state, $form) {
  if (!empty($element['#value'])) {
    preg_match_all("#(\/)|(\\\\)|(=)|(\?)|(\&)|(\s)#Uis", $element['#value'], $m);
    foreach ($m as $match) {
      if (!empty($match)) {
        form_error($element, t('Username contains invalid characters.'));
        return;
      }
    }
  }
}

/**
 * Expire users that are past or at their expiration date.
 *
 * @return void
 */
function _kms_user_cron_expire_users() {
  $query = "
    SELECT u.uid FROM {field_data_field_expire_date} ed
    LEFT JOIN {users} u ON u.uid = ed.entity_id
    WHERE
      ed.field_expire_date_value <= :time
    AND
      u.status = 1
  ";
  $result = db_query($query, array(':time' => time()));
  foreach ($result as $row) {
    if (empty($row->uid)) {
      continue;
    }
    $user = user_load($row->uid);
    if (empty($user)) {
      continue;
    }
    $user_w = entity_metadata_wrapper('user', $user);
    $user_w->status = 0;
    $user_w->save();
    watchdog(
      'kms_user',
      t(
        'User: %user has been deactivated',
        array('%user' => $user_w->name->value())
      )
    );
  }

}

function _kms_user_update_user($form, &$form_state) {
  $time = time();
  $user_updated = db_update('field_data_field_updated') 
  ->fields(array('field_updated_value' => $time))
  ->condition('entity_id'  , $form['#user']->uid, '=')
  ->execute();
  $user_updated_rev = db_update('field_revision_field_updated') 
  ->fields(array('field_updated_value' => $time))
  ->condition('entity_id'  , $form['#user']->uid, '=')
  ->execute();

}

// function _kms_user_test($uid = 10) {
//   $user = user_load($uid);
//   var_dump($user->field_updated);
// }
