<?php

define('KMS_CSV_CONCAT_SEPARATOR', '|');

/**
 * Implements hook_menu().
 */
function kms_csv_menu() {

  $items['admin/content/csv'] = array(
    'title' => 'CSV export',
    'description' => 'Export data as CSV.',
    'access arguments' => array('download csv'),
  );
 
  $items['admin/content/csv/download'] = array(
    'title' =>'Download CSV',
    'description' => 'Download CSV page',
    'page callback' => '_kms_csv_admin_page',
    'access arguments' => array('download csv'),
  );
  $items['csv/generate/%'] = array(
    'title' => 'Generate csv file',
    'page callback' => 'kms_csv_generate',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('download csv'),
  );
  $items['csv/download/%'] = array(
    'title' => 'Download csv file',
    'page callback' => 'kms_csv_download',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('download csv'),
  );

  return $items;
}

/**
 * Generate csv file
 *
 * @param string $name
 *   The name of csv type. Needs supported functions.
 *
 * @return void
 */
function kms_csv_generate($name) {
  $function = "_kms_csv_create_batch_$name";
  if (empty($name) || !function_exists($function)) {
    return FALSE;
  }
  $batch = array(
    'title' => t('Exporting csv ...'),
    'operations' => array(),
    'init_message' => t('Commencing'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => "kms_csv_batch_finished_$name",
    // 'progressive' => FALSE
  );

  call_user_func_array($function, array(&$batch));
 
  batch_set($batch);
  batch_process('admin/content/csv/download'); 
  return '';
}

function _kms_csv_create_batch_users(&$batch) {
  $query = db_select('users', 'u');

  $query
  ->condition('u.uid', 1, '>')
  ->fields('u', array('uid'));

  $result = $query->execute();
  
  // Add headers.
  $headers = _kms_csv_generate_data_users_headers();
  kms_csv_convert_row2latin1($headers);
  $file = file_directory_temp() . '/' . uniqid();
  $_SESSION['kms_csv_download_file_users'] = $file;
  $handle = fopen($file, 'w'); // Create the file.
  fputcsv($handle, $headers, ';'); // Write the labels to the header row.
  fclose($handle);

  $max = db_query(
    'SELECT COUNT(DISTINCT uid) FROM {users} WHERE uid > 1'
  )->fetchField();
  
  while($record = $result->fetchAssoc()) {
    if(empty($record['uid'])) {
      continue;
    }
    $batch['operations'][] = array(
      '_kms_csv_generate_data_users_row',
      array($record['uid'], $file, $max)
    );
  }
}

/**
 * Create batch: orders.
 *
 * @param arry $batch
 *   Drupal batch API array.
 *
 * @return void.
 */
function _kms_csv_create_batch_orders(&$batch) {
  $query = db_select('commerce_order', 'o');

  $query
  ->condition('o.status', 'completed', '=')
  ->fields('o', array('order_id'));

  $result = $query->execute();
  // Add headers.
  $headers = _kms_csv_generate_data_orders_headers();
  kms_csv_convert_row2latin1($headers);
  // Create the file and print the labels in the header row.
  $file = file_directory_temp() . '/' . uniqid();
  $_SESSION['kms_csv_download_file_orders'] = $file;
  $handle = fopen($file, 'w'); // Create the file.
  fputcsv($handle, $headers, ';'); // Write the labels to the header row.
  fclose($handle);

  $max = db_query(
    'SELECT COUNT(DISTINCT order_id) FROM {commerce_order} WHERE status = :status',
    array(':status' => 'completed')
  )->fetchField();

  while($record = $result->fetchAssoc()) {
    if(empty($record['order_id'])) {
      continue;
    }
    $batch['operations'][] = array(
      '_kms_csv_generate_data_orders_rows',
      array($record['order_id'], $file, $max)
    );
  }
  
}

/**
 * Batch create csv rows: orders.
 *
 * @param integer $oid
 *   Drupal commerce order_id.
 * @param string $file
 *   Absolute path to tmp csv file.
 * @param integer $max
 *   The amount of total rows.
 * @param array $context
 *   Drupal batch API array.
 *
 * @return void.
 */
function _kms_csv_generate_data_orders_rows($oid, $file, $max, &$context){
  $handle = fopen($file, 'a');
  
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_order'] = 0;
    $context['sandbox']['line_items'] = 0;
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', commerce_order_load($oid));
  $user = $order_wrapper->owner->value();
  if (empty($user)) {
    return;
  }

  // Brugernavn
  $username = $user->name;
  // Brugertype
  $types = _kms_csv_user_types($order_wrapper->owner);
  $usertypes = implode(KMS_CSV_CONCAT_SEPARATOR, $types);
  // Dato (created).
  $date = kms_csv_date_unix_2_excel($order_wrapper->created->value());
  // Order id
  $order_id = $order_wrapper->order_id->value();
  // Get line items.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    $product = $line_item_wrapper->commerce_product->title->value();
    $row = array($username, $usertypes, $product, $date, $order_id);

    kms_csv_convert_row2latin1($row);

    fputcsv($handle, $row, ';');
    $context['sandbox']['line_items']++;
  }

  $context['sandbox']['progress']++;
  $context['message'] = t('exporting order id: @oid', array('@oid' => $oid));
  $context['results'][] = t(
    'Order id: @oid. User: @user. Last product: @product',
    array('@oid' => $oid, '@user' => $username, '@product' => $product)
  );

  $context['finished'] = TRUE;

  fclose($handle);
}

/**
 * Batch API 'finished' function.
 *
 * @param boolean $success
 * @param array $results
 * @param array $operations
 *
 * @return void.
 */
function kms_csv_batch_finished_orders($success, $results, $operations) {

  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count orders processed.', array('@count' => count($results))));
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
    drupal_set_message(t('Download file (one-time link): !download', array('!download' => l('orders.csv', 'csv/download/orders'))), 'warning');
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Translate $value to 1/0
 *
 * @param string $value
 *
 * @return string
 *   1 or 0
 */
function _kms_csv_one_zero($value) {
  return (boolean)$value ? '1' : '0';
}

function _kms_csv_admin_page() {
  return array(
    'csv_download_list' => array(
      '#items' => array(
        l(t('Download Users'), 'csv/generate/users') .
        '<p>' . implode(', ', _kms_csv_generate_data_users_headers()) . '</p>',
        l(t('Download Orders'), 'csv/generate/orders') .
        '<p>' . implode(', ', _kms_csv_generate_data_orders_headers()) . '</p>',
      ),
      '#theme' => 'item_list',
    ),
  );
}

/**
 * Translate unix timestamp to excel format.
 *
 * @param integer $timestamp
 *
 * @return string
 */
function kms_csv_date_unix_2_excel($timestamp, $format = '%a, %d/%m/%G') {
  setlocale(LC_TIME, "da_DK");
  return ucfirst(strftime($format, $timestamp));
}

/**
 * Csv header: orders.
 *
 * @return array
 */
function _kms_csv_generate_data_orders_headers(){
  return array(
    'Brugernavn',
    'Brugertype',
    'Title',
    'Dato',
    'Order_id'
  );
}

/**
 * Csv header: users.
 *
 * @return array
 */
function _kms_csv_generate_data_users_headers() {
  return array(
    'Brugernavn',
    'Brugertype',
    'Brugertype info',
    'E-mail',
    'Oprettet',
    'Aktiv',
    'Roller',
    'Fornavn',
    'Efternavn',
    'Virksomhed',
    'Land',
    'Adresse 1',
    'Adresse 2',
    'Post nr.',
    'By',
    'Telefon',
    'Fakt. Adresse 1',
    'Fakt. Adresse 2',
    'Fakt. Post nr.',
    'Fakt. By',
    'KMS User ID',
    'Debitor nr',
    'UdlÃ¸bsdato',
    'BrugerbemÃ¦rkning',
    'Rettigheder',
    'Nyhedsbrev',
    'Kontakt',
  );
}

/**
 * Generate user row
 *
 * @param integer $uid
 * @param string $file
 *   Absolute path to file.
 * @param integer $max
 *   Total amount of users.
 * @param array $context
 *   Drupal batch API array.
 *
 * @return void.
 */
function _kms_csv_generate_data_users_row($uid, $file, $max, &$context){
  $handle = fopen($file, 'a');
  
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_user'] = 0;
  }

  $uwrapper = entity_metadata_wrapper('user', user_load($uid));
  $row = array();

  // Brugernavn
  $username = $uwrapper->name->value();
  $row[] = $username; 

  // Brugertype.
  $row[] = implode(KMS_CSV_CONCAT_SEPARATOR, _kms_csv_user_types($uwrapper));

  // User type info.
  $user_type_info = $uwrapper->field_user_type_info->value();
  $row[] = !empty($user_type_info) ? $user_type_info : '';

  // E-mail
  $row[] = $uwrapper->mail->value();

  // Oprettet
  $row[] = kms_csv_date_unix_2_excel($uwrapper->created->value());

  // Aktiv
  $row[] = $uwrapper->status->value();
  // Roller
  $row[] = implode(KMS_CSV_CONCAT_SEPARATOR, _kms_csv_user_roles($uwrapper));
  // Address
  $address_check = $uwrapper->field_address->value();
  if (!empty($address_check)) {
    // Fornavn
    $row[] = $uwrapper->field_address->first_name->value();
    // Efternavn
    $row[] = $uwrapper->field_address->last_name->value();
    // Virksomhed
    $row[] = $uwrapper->field_address->organisation_name->value();
    // Land
    $row[] = $uwrapper->field_address->country->value();
    // Adresse 1
    $row[] = $uwrapper->field_address->thoroughfare->value();
    // Adresse 2
    $row[] = $uwrapper->field_address->premise->value();
    // Post nr.
    $row[] = $uwrapper->field_address->postal_code->value();
    // By
    $row[] = $uwrapper->field_address->locality->value();
  }
  // Telefon
  $row[] = $uwrapper->field_phone->value();
  // Billing address
  $baddress_check = $uwrapper->field_address->value();
  if (!empty($baddress_check)) {
    // Fakt. Adresse 1
    $row[] = $uwrapper->field_billing_address->thoroughfare->value();
    // Fakt. Adresse 2
    $row[] = $uwrapper->field_billing_address->premise->value();
    // Fakt. Post nr.
    $row[] = $uwrapper->field_billing_address->postal_code->value();
    // Fakt. By
    $row[] = $uwrapper->field_billing_address->locality->value();
  }
  // KMS User ID
  $row[] = $uwrapper->field_kms_user_id->value();
  // Debitor nr.
  $row[] = $uwrapper->field_debtor_nr->value();
  // UdlÃ¸bs dato
  $expire = $uwrapper->field_expire_date->value();
  if (!empty($expire)) {
    $row[] = kms_csv_date_unix_2_excel($uwrapper->field_expire_date->value());
  }
  else {
    $row[] = '';
  }
  // BrugerbemÃ¦rkning
  $row[] = $uwrapper->field_user_remark->value();
  // Rettigheder
  $row[] = _kms_csv_one_zero($uwrapper->field_terms_and_conditions->value());
  // Nyhedsbrev
  $row[] = _kms_csv_one_zero($uwrapper->field_newsletter->value());
  // Kontakt
  $row[] = _kms_csv_one_zero($uwrapper->field_contact_me->value());
  
  kms_csv_convert_row2latin1($row);

  fputcsv($handle, $row, ';');

  $context['sandbox']['progress']++;
  $context['message'] = t('Exporting user: %user', array('%user' => $username));
  $context['results'][] = t('User: !user', array('!user' => $username));

  $context['finished'] = TRUE;

  fclose($handle);
}

/**
 * Batch API 'finished' function.
 *
 * @param boolean $success
 * @param array $results
 * @param array $operations
 *
 * @return void.
 */
function kms_csv_batch_finished_users($success, $results, $operations) {

  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count users processed.', array('@count' => count($results))));
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
    drupal_set_message(t('Download file (one-time link): !download', array('!download' => l('users.csv', 'csv/download/users'))), 'warning');

  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Download csv file.
 *
 * @param string $name
 *   Csv file data type (users/orders etc.)
 *
 * @return void.
 */
function kms_csv_download($name) {
  // For added security, make sure the beginning of the path is the same as that
  // returned by file_directory_temp() (to prevent users from gaining access to
  // arbitrary files on the server).
  $session_key = "kms_csv_download_file_$name";
  if (empty($_SESSION[$session_key])) {
    drupal_set_message(
      t(
        'The file: !file is either outdated or you do not have permission to download it',
        array('!file' => "$name.csv")
      ),
      'error'
    );
    drupal_goto('admin/content/csv/download');
  }
  $file = $_SESSION[$session_key];
  unset($_SESSION[$session_key]);
  // Add HTTP headers for CSV file download.
  drupal_add_http_header('Content-Type', 'text/csv; iso-8859-1');
  drupal_add_http_header(
    'Content-Disposition', "attachment; filename=$name.csv",
    TRUE
  );

  // Allow caching, otherwise IE users can't dl over SSL (see issue #294).
  drupal_add_http_header('Cache-Control', 'max-age=300; must-revalidate');

  // Read the file to the output buffer and exit.
  echo @file_get_contents($file);
  unlink($file);
  exit;
}

/**
 * Convert UTF-8 to single byte latin 1.
 *
 * @param array $row
 *   CSV data row.
 *
 * @return void.
 */
function kms_csv_convert_row2latin1(&$row) {
  array_walk($row, function(&$v) {
    $v = utf8_decode($v);
    if (preg_match("#^rhus(.*)$#", $v, $m)) {
      $v = utf8_decode('Ãrhus' . $m[1]);
    }
  });
}

/**
 * Create user type array ordered by term id.
 *
 * @param object $uwrapper
 *   Entity metadata wrapper.
 *
 * @return array $types
 */
function _kms_csv_user_types($uwrapper) {
  $types = array();
  foreach ($uwrapper->field_user_type as $type) {
    $value_check = $type->value();
    if (empty($value_check)) {
      continue;
    }
    $types[$type->tid->value()] = $type->name->value();
  }
  // Make sure user types are in the right order
  ksort($types);
  return $types;
}

/**
 * Create user roles array ordered by role id.
 *
 * @param object $uwrapper
 *   Entity metadata wrapper.
 *
 * @return array $roles
 */
function _kms_csv_user_roles($uwrapper) {
  $roles = array();
  foreach ($uwrapper->roles as $role) {
    $rid = $role->value();
    if ($rid < 2) {
      continue;
    }
    $roles[$rid] = $role->label();
  }
  ksort($roles);
  return $roles;
}
