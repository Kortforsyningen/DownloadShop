<?php

define('KMS_OCI_QUEUE_PREFIX', 'kms_oci_queue');

/**
 * Implements hook_menu().
 */
function kms_oci_queue_menu() {
  $items = array();
  $items['admin/reports/kms-oci-queue'] = array(
    'title' =>'Oci queue status',
    'description' => 'Show oci queue status',
    'page callback' => 'kms_oci_queue_admin_page',
    'access arguments' => array('administer kms oci queue'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['kms-oci-queue/ajax/load-log/%'] = array(
    'title' => 'Show job log',
    'page callback' => 'kms_oci_queue_admin_page_job_log',
    'access arguments' => array('access content'),
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

//// Define custom cron functions
//function kms_oci_queue_cronapi($op, $job = NULL) {
//  switch($op) {
//    case 'list':
//      return array(
//        'kms_oci_queue_query_creator_run' => 'Kms oci queue: Run query creator',
//      );
//
//    case 'rule':
//      switch($job) {
//        case 'kms_oci_queue_query_creator_run': return '1 * * * *';
//        break;
//      }
//      break;
//
//    case 'execute':
//      switch($job) {
//        case 'kms_oci_queue_query_creator_run':
//          kms_oci_queue_query_creator_run();
//          break;
//      }
//      break;
//  }
//
//}

function kms_oci_queue_cron() {
  kms_oci_queue_query_creator_run();
}

/**
 * Implements hook_cron_queue_info().
 *
 * Set up ten queues that all send items to the same callback function.
 */
function kms_oci_queue_cron_queue_info() {
  $queues['kms_oci_queue_query_creator'] = array(
    'worker callback' => 'kms_oci_queue_query_creator_run',
    'time' => 120,
  );
  $queues['kms_oci_queue_query'] = array(
    'worker callback' => 'kms_oci_queue_query_run',
    'time' => 120,
  );
  return $queues;
}

function kms_oci_queue_query_creator_run() {
//  _adapt_debug('mikkel', 'hello!');
  $queue = DrupalQueue::get(KmsOciQueueJob::$queues['creator']['name'], TRUE);
  $item = $queue->claimItem();
  if(!$item) {
    return;
  }
  $data = $item->data;
//  _adapt_debug('mikkel', var_export($data, TRUE));
  switch($data['action']) {
    case 'insert user':
      if(!empty($data['params'])) {
        $query_count = count($data['params']);
//        _adapt_debug('mikkel', '$query_count:');
//        _adapt_debug('mikkel', $query_count);
        $i = 1;
        $is_last_item = TRUE;
        foreach($data['params'] as $user_query) {
          $queue = DrupalQueue::get(KmsOciQueueJob::$queues['executor']['name'], TRUE);
          kms_oci_filter_query_data($user_query[0]);
          $query = kms_oci_generate_query('insert', $user_query[0], array('table' => $user_query[1]));
          // Queue the string.
            $data = (object)array(
              'jid' => $item->item_id,
              'query' => $query,
              'data' => $user_query[0],
              'is_last_item' => $i == $query_count,
            );
            $queue->createItem($data);
//          _adapt_debug('mikkel', 'createItem:');
//          _adapt_debug('mikkel', $test);
            $is_last_item = FALSE;
          $i++;
        }
      }
      break;
  }
}

function kms_oci_queue_query_run($item) {
//  _adapt_debug('mikkel', $item);
  $patterns = $replacements = array();
  array_walk($item->data, function($v, $k) use(&$patterns, &$replacements){
    $patterns[] = '#\\' . $k . '#';
    $replacements[] = "'$v'";
  });
  $txt = preg_replace($patterns, $replacements, $item->query, 1) . ";\n";
  $file_name = 'kms_oci_queue_query_run_' . $item->jid;
  $temp_name = sprintf('temporary://%s.tmp', $file_name);
  $dest_name = sprintf('public://%s.job', $file_name);
  if (file_put_contents($temp_name, $txt, FILE_APPEND) === FALSE) {
    KmsOciQueueJob::log($item->jid, 'File creation failed. Could not write to tmp dir.', WATCHDOG_ERROR);
  }elseif($item->is_last_item) {
    $move = file_unmanaged_move($temp_name, $dest_name, FILE_EXISTS_REPLACE);
    if($move) {
      KmsOciQueueJob::log(
        $item->jid,
        'File creation succeeded. Saved in %filepath',
        array('%filepath' => $move),
        WATCHDOG_INFO
      );
    }
    else {
      KmsOciQueueJob::log($item->jid, 'File creation failed. Cannot move file from tmp dir.', WATCHDOG_ERROR);
    }

  }

  // Move the file to its final destination.
//  $move = file_unmanaged_move($temp_name, $destination, FILE_EXISTS_REPLACE);
}

function kms_oci_queue_get_items($queue_name) {
  $items = array();
  $result = db_query("SELECT item_id, data, expire, created FROM {queue} WHERE name = :name ORDER BY item_id",
    array(':name' => $queue_name),
    array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $item) {
    $items[] = $item;
  }
  return $items;
}

function kms_oci_queue_fetch_queue_names() {
  $query = db_select('queue', 'q');
  $query->fields('q', array('name'));
  $query->condition('q.name', "kms_oci_queue_query_creator", '=');
  $query->groupBy('q.name');
  $result = $query->execute()->fetchAllAssoc('name');
  return $result ? array_keys($result) : array();
}

function kms_oci_queue_admin_page () {
  drupal_add_js(drupal_get_path('module', 'kms_oci_queue') .'/js/kms_oci_queue_reports.js');
  drupal_add_css(drupal_get_path('module', 'kms_oci_queue') .'/css/kms_oci_queue_reports.css');

  $output['queues'] = kms_oci_queue_admin_page_jobs();
  return $output;
}

function kms_oci_queue_admin_page_logs() {

}

function kms_oci_queue_admin_page_jobs () {
  $output = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('kms-oci-queue-jobs-overview'),
    ),
  );
  foreach(kms_oci_queue_fetch_queue_names() as $name) {
    $jobs_output = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('kms-oci-queue-jobs'),
      ),
    );
    $jobs_output["job_queue_title_$name"] = array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => 'Query jobs (' . $name . ')',
    );
    foreach(kms_oci_queue_get_items($name) as $item) {
      $job = KmsOciQueueJobFactory::get($item['item_id']);
      $job_info =  $job->info . ' [<a href="#" class="more">' . t('info') . '</a>]';
      $rows[] = array(
        'data' => array(
          array('data' => $job->jid, 'data-jid' => $job->jid, 'class' => 'job-log-trigger'),
          array('data' => $job_info, 'data-jid' => $job->jid, 'class' => array('job-info')),
          array('data' => $job->status->message, 'class' => 'status-' . $job->status->status),
          array('data' => format_date($job->created)),
        )
      );

      $options['job_info_beautytip_' . $job->jid] = array(
        'cssSelect' => 'td[data-jid="' . $job->jid .  '"].job-info .more',
        'trigger' => array(0 => 'mouseover', 1 => 'click'),
        'text' => $job->infoDetails,
        'width' => 350,
      );
      beautytips_add_beautytips($options);

      $rows[] = array(
        'class' => array('kms-oci-queue-job-log'),
        'data-jid' => $job->jid,
        'data' => array(
          array('data' => '&nbsp;', 'colspan' => 4),
        ),
      );
    }

    $jobs_output["job_queue_$name"] = array(
      '#theme' => 'table',
      '#header' => array(t('Job id'), t('Info'), t('Status'), t('Created')),
      '#rows' => $rows,
    );


    $output["kms_oci_queue_jobs_$name"] = $jobs_output;
  }

  return $output;
}

function kms_oci_queue_admin_page_job_log($jid){
  $json['html'] = '';
  $job = KmsOciQueueJobFactory::get($jid);
  if(!empty($job)){
    $log = $job->getLog();
  }
  $output = array();
  if(!empty($log)){
    foreach($log as $id => $entry) {
      $message_vars = unserialize($entry->variables);
      if(empty($message_vars) || !is_array($message_vars)) {
        $message_vars = array();
      }
      $rows[] = array(
        array('data' => format_date($entry->timestamp), 'colspan' => 1),
        array('data' => format_string($entry->message, $message_vars), 'colspan' => 2),
      );
    }
    $output["log_$id"] = array(
      '#theme' => 'table',
      '#header' => array(
//        array('data' => t('Log'), 'colspan' => 2),
//        array('data' => t('Message'), 'colspan' => 2),
      ),
      '#rows' => $rows,
    );
    $json['html'] = render($output);
  }

  drupal_json_output($json);
  exit;
}

function asdjyasgdjdfsjdgjdasgjgdjas() {
  $item = array (
    'query' => 'INSERT INTO smuser_extra (duid, userid, usertype, usertype_info, receive_newsletter, accept_terms, contact_me) VALUES (:duid, :userid, :usertype, :usertype_info, :receive_newsletter, :accept_terms, :contact_me)',
    'data' =>
      array (
        ':duid' => '17799',
        ':userid' => '17799',
        ':usertype' => '3522',
        ':usertype_info' => '',
        ':receive_newsletter' => 0,
        ':accept_terms' => 1,
        ':contact_me' => 1,
      ),
  );

  $query = $item['query'];
  $patterns = $replacements = array();
  array_walk($item['data'], function($v, $k) use($item, &$patterns, &$replacements){
    $patterns[] = '#\\' . $k . '#';
    $replacements[] = "'$v'";
  });
  $test = preg_replace($patterns, $replacements, $query, 1);
//  _adapt_debug('mikkel', $patterns);
//  _adapt_debug('mikkel', $replacements);
//  _adapt_debug('mikkel', $query);
//  _adapt_debug('mikkel', $test);

}