<?php
/**
 * @file
 * kms_permissions_ftp.module
 * Handle FTP folder permissions for users.
 *
 * @author Linas Balke <linas@adapt.dk>
 */

define('KMS_FTP_STRUCTURE_DIR', 'public://kms_csv/ftpfolders.txt'); //data3/Statsaftalen
//define('KMS_FTP_SCRIPT_CALL1', 'ssh -i  $HOME/.ssh/updateftpservers loadftp1.kmsext.dk');
//define('KMS_FTP_SCRIPT_CALL2', 'ssh -i  $HOME/.ssh/updateftpservers loadftp2.kmsext.dk');

/**
 * Implements hook_menu().
 */
function kms_permissions_ftp_menu() {
  $items = array();

  $items['kms/ftp/read'] = array(
    'title' =>'FTP read',
    'description' => 'Scandir from ftp',
    'page callback' => 'kms_permissions_ftp_scan_store_structure',
    'access arguments' => array('ftp read'),
  );

  $items['admin/config/ftp'] = array(
    'title' =>'FTP configuration',
    'description' => 'Add description and other information for ftp permissions',
    'page callback' => 'kms_permissions_ftp_edit_page',
    'access arguments' => array('ftp read'),
  );

  $items['admin/config/ftp/%'] = array(
    'title' =>'FTP configuration',
    'description' => 'Add description and other information for ftp permissions',
    'page arguments' => array('kms_permissions_ftp_edit_form', 3),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('ftp read'),
  );

  return $items;
}

/**
* Implements hook_field_widget_info().
*/
function kms_permissions_ftp_field_widget_info() {
  return array(
    'kms_ftp_permissions' => array(
      'label' => t('KMS FTP permissions'),
      'field types' => array('list_text'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    )
  );
}

/**
* Implements hook_field_widget_form().
*/
function kms_permissions_ftp_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $value_key = key($field['columns']);
  $type = str_replace('options_', '', $instance['widget']['type']);
  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  $required = $element['#required'];
  $has_value = isset($items[0][$value_key]);
  $properties = _options_properties($type, $multiple, $required, $has_value);
  $instance_settings = $instance['widget']['settings'];

      $default_value = array();

      if (is_array($items)) {
        // Put current field values in
        foreach ($items as $key => $item) {
          $default_value[] = $item['value'];
        }
      }

      $options = kms_permissions_ftp_widget_options($instance_settings);

      $element += array(
        '#type' => $multiple ? 'checkboxes' : 'radios',
        '#title' => (t('kms_ftp_permissions')),
        '#default_value' => $default_value,
        '#options' => $options
      );

  $element += array(
    '#value_key' => $value_key,
    '#element_validate' => array('options_field_widget_validate'),
    '#properties' => $properties,
  );

  return $element;
}

/**
* Implements hook_field_widget_error().
*/
function kms_permissions_ftp_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}

/**
 * Connect to oracle db and get applications or services.
 * @param string $type - type of option list to get
 */
function kms_permissions_ftp_widget_options($instance_settings) {

  $options = array();
  static $options;

  $rows = kms_permissions_ftp_scan_structure();

  if (!empty($rows)) {
    sort($rows);

    foreach($rows as $k=>$value) {
      $html = _kms_permissions_format_item_list_item($k, $value, 'ftp');
      $options[$k] = $html;
    }
  }

  return $options;
}

/**
 * Store the structure of the folders.
 */
function kms_permissions_ftp_scan_store_structure() {

  $rows = kms_permissions_ftp_scan_structure();
  sort($rows);

  if (!empty($rows)) {
    db_query("DELETE from kms_permissions_ftp_folders;");
    foreach($rows as $k=>$value) {
      $data = array(
        'fid' => $k,
        'name' => $value
      );

      drupal_write_record('kms_permissions_ftp_folders', $data);
    }
  }
}

/**
 * Read the structure of the folders. Ret
 * @return alphabetically sorted array of folders
 */
function kms_permissions_ftp_scan_structure() {

  $filepath = drupal_realpath(KMS_FTP_STRUCTURE_DIR);
  if (file_exists($filepath)) {
    $file_contents = file_get_contents($filepath);
    $folders = explode("\n", $file_contents);
    return array_filter($folders);
  }
}

/**
 * Implements hook_user_presave().
 */
function kms_permissions_ftp_entity_presave($entity) {
  $lang = field_language('user', $entity, 'field_ftp_permissions');

  if(!empty($entity->field_ftp_permissions)) {
    if(empty($entity->original->field_ftp_permissions)) {
      watchdog('Permissions FTP', 'Change has been triggered in FTP permissions for individual user', array(), WATCHDOG_NOTICE);
      variable_set('kms_ftp_perm_change_1', TRUE);
      variable_set('kms_ftp_perm_change_2', TRUE);
    } else {
      if($entity->field_ftp_permissions[$lang] !== $entity->original->field_ftp_permissions[$lang]){
        watchdog('Permissions FTP', 'Change has been triggered in FTP permissions for individual user', array(), WATCHDOG_NOTICE);
        variable_set('kms_ftp_perm_change_1', TRUE);
        variable_set('kms_ftp_perm_change_2', TRUE);
      }
    }
  }
}

/**
 * Cron hook
 */
//function kms_permissions_ftp_cron(){
//  kms_permissions_ftp_scan_store_structure();
//
//  if (variable_get('kms_ftp_perm_change')){
//    //Trigger external script
//    shell_exec(KMS_FTP_SCRIPT_CALL1);
//    shell_exec(KMS_FTP_SCRIPT_CALL2);
//    // Set variable to false, as script should revisit the view and update things accordingly
//    variable_set('kms_ftp_perm_change', FALSE);
//    watchdog('Permissions FTP', 'External bash script initiated by cron run', array(), WATCHDOG_NOTICE);
//  }
//}

/**
 * Return nicely formatted array of ftp permissions associated with a bundle.
 */
function _kms_permissions_ftp_get_permissions_by_bid($bid, &$permissions = array()) {
  $bundle = node_load($bid);
  // FTP permissions
  $field_ftp_permissions = field_get_items('node', $bundle, 'field_ftp_permissions');
  if (!empty($field_ftp_permissions)) {
    foreach ($field_ftp_permissions as $ftp_permissions) {
      $permissions['ftp']['a' . $ftp_permissions['value']] = array(
        'id' => $ftp_permissions['value'],
      );
    }
  }

  return $permissions;
}

/**
 * Return ftp webservice array.
 *
 * @return array
 */
function _kms_permissions_ftp_return_ftp_permissions_all(){
  return db_query("SELECT * FROM {kms_permissions_ftp_folders} ORDER BY fid ASC")->fetchAll();
}


/**
 * Return ftp webservice data.
 *
 * @return array
 */
function _kms_permissions_ftp_return_ftp_permission($fid){
  $result = db_select('kms_permissions_ftp_folders', 'p')
    ->fields('p')
    ->condition('fid', $fid)
    ->execute()
    ->fetchAssoc();

  return $result;
}

/**
 * Return ftp webservice data.
 *
 * @return array
 */
function _kms_permissions_ftp_return_ftp_permission_description($fid){
  $result = db_select('kms_permissions_ftp_folders', 'p')
    ->fields('p', array('description'))
    ->condition('fid', $fid)
    ->execute()
    ->fetchField();

  return $result;
}

/**
 * Access callback for ftp permissions information edit page.
 */
function kms_permissions_ftp_edit_page() {
  $ftp = _kms_permissions_ftp_return_ftp_permissions_all();
  $header = array('ID', 'Title', 'Edit');
  $rows = array();

  foreach ($ftp as $permission) {
    $rows[] = array(
      $permission->fid,
      $permission-> name,
      l(t('Edit'), 'admin/config/ftp/' . $permission->fid));
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Ftp permission edit form.
 */
function kms_permissions_ftp_edit_form($form, &$form_state, $fid) {
  $ftp = _kms_permissions_ftp_return_ftp_permission($fid);

  if (empty($ftp)) {
    return;
  }

  $form['#prefix'] = '<h2>' . $ftp['name'] .'</h2>';

  $form['description'] = array(
    '#type' => 'text_format',
    '#title' => t('Description'),
    '#default_value' => empty($ftp['description']) ? '' : $ftp['description'],
    '#format' => $ftp['description_format'],
  );

  $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $fid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['back'] = array(
    '#type' => 'button',
    '#value' =>'Back',
  );

  return $form;
}

/**
 * Ftp permission form validate.
 */
function kms_permissions_ftp_edit_form_validate($form, &$form_state) {
  if($form_state['values']['op'] == 'Back'){
    drupal_goto('admin/config/ftp');
  }
}

/**
 * Ftp permission edit form.
 */
function kms_permissions_ftp_edit_form_submit($form, &$form_state) {
  db_update('kms_permissions_ftp_folders')
    ->fields(array(
      'description' => $form_state['values']['description']['value'],
      'description_format' => $form_state['values']['description']['format'],
    ))
    ->condition ('fid', $form_state['values']['fid'], '=')
    ->execute();
}