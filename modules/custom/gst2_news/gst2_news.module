<?php
/**
 * @file
 * Code for the News feature.
 */

include_once 'gst2_news.features.inc';


/**
 * Implementation of hook_node_presave().
 */
function gst2_news_node_presave($node) {
  // If selected not to create newsletter, return.
  if ($node->type != 'article' || $node->field_send_it[LANGUAGE_NONE][0]['value'] == 0) {
    return;
  }

  $list_id = gst2_news_get_news_mailchimp_list();
  if ($list_id == FALSE) {
    watchdog("gst2_newsletter", 'Could not find news mailchimp list id.');
    return;
  }

  $config = gst2_tweets_default_twitter_conf();
  $options = array(
    'title' => $node->title,
    'subject' => $node->title,
    'from_email' => $config['from_email'],
    'from_name' => $config['from_name'],
    'list_id' => $list_id,
  );
  $body['html'] = $node->body[LANGUAGE_NONE][0];

  // Create mailchimp campaign.
  gst2_newsletter_create_new_campaign($options, $body);
}

/**
 * Create mailchimp campaign.
 *
 * @param $options
 *   Array of options needed to create campaign.
 * @param $body
 *   Array, containing body and format.
 */
function gst2_newsletter_create_new_campaign($options, $body) {
  module_load_include('inc', 'mailchimp_campaign', 'includes/mailchimp_campaign.admin');
  $cid = mailchimp_campaign_save_campaign($body, $options);
  watchdog("gst2_newsletter", 'Created campaign @cid', array('@cid' => $cid));

  // Send campaign immediately.
  $campaign = mailchimp_campaign_load_multiple(array($cid), array(), FALSE);
  mailchimp_campaign_send_campaign($campaign[$cid]);
  watchdog("gst2_newsletter", 'Send campaign @cid', array('@cid' => $cid));

  cache_clear_all('mailchimp_campaign_campaigns', 'cache');
}

/**
 * Return mailchimp list id.
 *
 * @return bool
 *   If list exist return array containing data of list.
 */
function gst2_news_get_news_mailchimp_list() {
  $mc_lists = mailchimp_get_lists();
  foreach ($mc_lists as $key => $list) {
    if ($list['name'] == 'News') {
      return $list['id'];
    }
  }

  return FALSE;
}


/**
 * Implementation hook_form_FORM_ID_alter().
 */
function gst2_news_form_mailchimp_signup_subscribe_block_newsletter_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if (!empty($user->mail) && $user->mail !== 'subuser@fake.mail') {
    $form['mergevars']['EMAIL']['#value'] = $user->mail;
    $form['mergevars']['EMAIL']['#disabled'] = TRUE;
    $form['mergevars']['EMAIL']['#title'] = t($form['mergevars']['EMAIL']['#title']);

    $uw = entity_metadata_wrapper('user', $user);
    $form['mergevars']['FNAME']['#value'] = $uw->field_address->first_name->value();
    $form['mergevars']['LNAME']['#value'] = $uw->field_address->last_name->value();
    $form['mergevars']['FNAME']['#type'] = 'hidden';
    $form['mergevars']['LNAME']['#type'] = 'hidden';
    
    $usertype = $uw->field_user_type->value();

    for ($i=0; $i<4; $i++) {
      $t = $i+1;
      if (!empty($usertype[$i])) {
        $form['mergevars']["TYPE$t"]['#value'] = $usertype[$i]->name;
      } else {
        $form['mergevars']["TYPE$t"]['#value'] = '';
      }
      $form['mergevars']["TYPE$t"]['#type'] = 'hidden';
    }

    $lists = array('mailchimp_92769', 'mailchimp_92773', 'mailchimp_92765', 'mailchimp_169701');
    foreach ($lists as $list) {
      $id = $form['mailchimp_lists'][$list]['subscribe']['#return_value'];
      $subscribed = mailchimp_is_subscribed($id, $user->mail);
      if ($subscribed) {
        $form['mailchimp_lists'][$list]['subscribe']['#default_value'] = 1;
        $form['mailchimp_lists'][$list]['subscribe']['#attributes']['checked'] = 'checked';
      }
    }
  }
  else {
    $form['#prefix'] = '<p>' . t('There is no email configured for you account, please contact your account administrator.') . '</p>';
    unset($form['mailchimp_lists']);
    unset($form['mergevars']);
    unset($form['actions']);
  }

  $form['#submit'][] = 'news_subscription_custom_handler';

  // We don't need default validation,
  // because it doesn't allows unsubscription.
  unset($form['#validate']);
}

/**
 * Custom subscription form handler to change user email or to unsubscribe it.
 */
function news_subscription_custom_handler(&$form, &$form_state) {
  $email = $form_state['values']['mergevars']['EMAIL'];

  if (empty($email)) {
    form_set_error('EMAIL', t('Please specify email address.'));
    return;
  }

  global $user;
  $existingUser = user_load($user->uid);

  if (empty($user->mail) || $user->mail != $email) {
    $existingUser->mail = $email;
    user_save((object) array('uid' => $existingUser->uid), (array) $existingUser);
  }

  // Unsubscribe user from list.
  foreach ($form_state['values']['mailchimp_lists'] as $key => $subscription) {
    if ($subscription['subscribe'] === 0) {
      mailchimp_unsubscribe($form['mailchimp_lists'][$key]['subscribe']['#return_value'], $email, TRUE);
    }
  }

  // Update field_contact_me in $user object
  $existingUser->field_contact_me[LANGUAGE_NONE][0]['value'] = !empty($form_state['values']['mailchimp_lists']['mailchimp_169701']['subscribe']) ? 1 : 0;
  user_save((object) array('uid' => $existingUser->uid), (array) $existingUser);
}

/**
 * Implements hook_user_insert().
 */
function gst2_news_user_insert($edit, $account, $category) {
  gst2_news_signup($account);
}

/**
 * Implements hook_user_update().
 */
function gst2_news_user_update($edit, $account, $category) {
  gst2_news_signup($account);
}

/**
 * Function to
 */
function gst2_news_signup($account) {

  // If it's not the user updating their own profile, just skip.
  if (empty($account->is_new) && ($account->uid != $GLOBALS['user']->uid)) {
    return;
  }
  
  $subscribed_email = FALSE;
  $email_change = FALSE;

  try {
    $uw = entity_metadata_wrapper('user', $account);
    if (empty($account->is_new)) {
      $subscribed_email = $uw->mail->value();
    }
  } 
  catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'MODULE_NAME',
      'EntityMetadataWrapper exception in %function() <pre>@trace</pre>',
      array('%function' => __FUNCTION__, '@trace' => $exc->getTraceAsString()),
      WATCHDOG_ERROR
    );
    return;
  }

  if (empty($account->is_new)) {
    try {
      $uwo = entity_metadata_wrapper('user', $account->original);
      $subscribed_email = $uwo->mail->value();

      if ($uw->mail->value() != $uwo->mail->value()) {
        $email_change = TRUE; 
      }
    } 
    catch (EntityMetadataWrapperException $exc) {
      // No original  
    }
  }

  // If it's not a new user and the user object don't change, just skip.
  if (empty($account->is_new) && gst2_news_no_updates($uw, $uwo)) {
    return;
  }

  $address = $uw->field_address->value();
  $merge_vars = array(
    'EMAIL' => $account->mail,
    'FNAME' => empty($address) ? '' : $uw->field_address->first_name->value(),
    'LNAME' => empty($address) ? '' : $uw->field_address->last_name->value()
  );
  $usertype = $uw->field_user_type->value();
  for ($i=0; $i<4; $i++) {
    $t = $i+1;
    if (!empty($usertype[$i])) {
      $merge_vars["TYPE$t"] = $usertype[$i]->name;
    } else {
      $merge_vars["TYPE$t"] = '';
    }
  }

  if (!empty($account->field_contact_me[LANGUAGE_NONE][0]['value'])) {
    if ($email_change) {
      mailchimp_unsubscribe('8877f51385', $subscribed_email, TRUE);  
    }
    mailchimp_subscribe('8877f51385', $uw->mail->value(), $merge_vars);
  } else {
    if ($subscribed_email != FALSE) {
      mailchimp_unsubscribe('8877f51385', $subscribed_email);
    }
  }
  
  if ($subscribed_email != FALSE) {
    // Update "Kortforsyningen Driftmeddelelser"
    $subscribed = mailchimp_is_subscribed('79cf358102', $subscribed_email);
    if ($subscribed) {
      if ($email_change) {
        mailchimp_unsubscribe('79cf358102', $subscribed_email, TRUE);  
      }
      mailchimp_subscribe('79cf358102', $uw->mail->value(), $merge_vars);
    }

    // Update "Nyheder"
    $subscribed = mailchimp_is_subscribed('9cb71e8040', $subscribed_email);
    if ($subscribed) {
      if ($email_change) {
        mailchimp_unsubscribe('9cb71e8040', $subscribed_email, TRUE);  
      }
      mailchimp_subscribe('9cb71e8040', $uw->mail->value(), $merge_vars);
    }

      // Update "Kortforsyningen PIP"
    $subscribed = mailchimp_is_subscribed('fc2b05567b', $subscribed_email);
    if ($subscribed) {
      if ($email_change) {
        mailchimp_unsubscribe('fc2b05567b', $subscribed_email, TRUE);  
      }
      mailchimp_subscribe('fc2b05567b', $uw->mail->value(), $merge_vars);
    }
  }

}

/**
 * Utility function to check if the user object has been changed.
 * Firstname, lastname, usertype and the contact me field is checked.
 **/ 
function gst2_news_no_updates($uw, $uwo) {
  try {
    $new = sha1(json_encode(array(
      $uw->field_address->first_name->value(),
      $uw->field_address->last_name->value(), 
      $uw->field_user_type->value(),
      $uw->field_contact_me->value(),
      $uw->mail->value()
    )));
    $org = sha1(json_encode(array(
      $uwo->field_address->first_name->value(),
      $uwo->field_address->last_name->value(), 
      $uwo->field_user_type->value(),
      $uwo->field_contact_me->value(),
      $uwo->mail->value()
    )));
    return ($new == $org);
  } 
  catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'MODULE_NAME',
      'EntityMetadataWrapper exception in %function() <pre>@trace</pre>',
      array('%function' => __FUNCTION__, '@trace' => $exc->getTraceAsString()),
      WATCHDOG_ERROR
    );
  }
  return TRUE;
}
