<?php

/**
 * @file
 * Product and services module.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function kms_pands_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Function kms_pands_get_products.
 */
function kms_pands_get_products($user) {
  $cache_id = __FUNCTION__ . $user->uid;

  if ($cached = cache_get($cache_id, 'cache')) {
    if (time() < $cached->expire) {
      return $cached->data;
    }
  }

  $userObj = user_load($user->uid);
  // Get all ID's of webservices from user account
  $all_services = array();
  $all_services['bundles'] = $userObj->field_access_bundles[LANGUAGE_NONE];
  $all_services['predefined_datacollections'] = (isset($userObj->field_predefined_datacollections[LANGUAGE_NONE]) ? $userObj->field_predefined_datacollections[LANGUAGE_NONE] : '');
  $all_services['ftp'] = kms_pands_ftp_products($userObj);
  $all_services['applications'] = isset($userObj->field_applications[LANGUAGE_NONE]) ? $userObj->field_applications[LANGUAGE_NONE] : '';
  $all_services['main_services'] = _kms_permissions_get_separate_webservices_by_uid($user->uid);
  $webservices = _kms_permissions_webservice_return_list_array($all_services);
  $products = $webservices['products'];

  foreach ($products as &$product) {
    $product = (object) $product;
    if (empty($product->ProductKorttype) || $product->ProductKorttype == NULL) { $product->ProductKorttype = ''; }
    if ($product->ProductLink == NULL) { $product->ProductLink = ''; }
  }

  // If no products is returned by the service, return empty array.
  if (empty($products)) {
    return array();
  }

  // Cache data for 1 minute.
  cache_set($cache_id, $products, 'cache', time() + 60);
  return $products;
}

/**
 * Get FTP products. 
 */

function kms_pands_ftp_products($userObj) {
  // Use permissions from the predefined dataset.
  // Only bundle permissions are fetched as user-specific permissions are not used atm.
  $b = empty($userObj->field_access_bundles[LANGUAGE_NONE]) ? array() : $userObj->field_access_bundles[LANGUAGE_NONE];
  $predefined_datacollections = array();
  foreach($b as $index) {
    foreach ($index as $key => $value) {
      $collections = _kms_permissions_get_permissions_by_bid($value);
      foreach ($collections['predefined_datacollections'] as $collection) {
        $predefined_datacollections[$collection['id']] = (int) $collection['id'];
      } 
    }
  }
  $query = db_select('field_data_field_min_side', 'ms');
  $query->leftJoin('field_data_body', 'b', 'ms.entity_id = b.entity_id');
  $query->leftJoin('node', 'n', 'ms.entity_id = n.nid');
  $query->fields('ms', array('entity_id', 'field_min_side_url', 'field_min_side_title'));
  $query->fields('b', array('body_value', 'body_summary'));
  $query->condition('ms.entity_id', $predefined_datacollections, 'IN');
  $query->condition('n.status', NODE_PUBLISHED);
  $query->orderBy('ms.field_min_side_title');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * Get services for user.
 */
function kms_pands_get_services($user) {
  $cache_id = __FUNCTION__ . $user->uid;
  $userObj = entity_metadata_wrapper('user', user_load($user->uid));
  $base_url = variable_get('kms_pands_service_url', 'http://kortforsyningen.kms.dk/service?request=GetServices');
  $url = url($base_url, array('query' => array(
    'login' => $userObj->name->value(),
    'password' => $userObj->field_pass_clear->value(),
  )));
  libxml_use_internal_errors(TRUE);
  $xml = simplexml_load_file($url);
  if ($xml === FALSE) {
    return array();
  }
  
  $serviceList = array();
  $serviceType = array();

  // Creates array with each service type.
  foreach ($xml->children() as $child) {
    $temp = (string) $child->getName();
    $serviceType[] = $temp;
  }
  // Get Free Service list.
  module_load_include('inc', 'kms_services', 'inc/services');
  $freeServiceList = kms_services_get_free_services();
  // Loop each servicetype for name and title. Each service get's added to array with $name as key.
  foreach ($serviceType as $sType) {
    // Check if type have getCapability.

    switch ($sType) {
      case "WMS_vector": 
        $capability = TRUE;
        break;

      case "WMTS": 
        $capability = TRUE;
        break;

      case "WFS": 
        $capability = TRUE;
        break;

      case "WCS": 
        $capability = TRUE;
        break;

      case "GEO": 
        $capability = TRUE;
        break;

      default: 
        $capability = FALSE;
    }

    // Check if type has hoststring.

    switch ($sType) {
      case "WMS_vector": $hoststring = TRUE;
        break;

      case "WFS": $hoststring = TRUE;
        break;

      default: $hoststring = FALSE;
    }
    foreach ($xml->$sType->children() as $child) {
      $name = (string) $child->getName();
      $title = (string) $xml->$sType->$name->title;
      $type = (string) $sType;
      if ($type == "WMS_vector") {
        $type = "WMS";
      }
      $key = strtolower($type . "-" . $name);
      $free = FALSE;
      if (isset($freeServiceList[$key])) {
        $free = TRUE;
      }
      $service = array(
        "key" => $key,
        "type" => $type,
        "title" => $title,
        "name" => $name,
        "capability" => $capability,
        "hostString" => $hoststring,
        "version" => "",
        "free" => $free,
      );
      $serviceList[$key] = $service;
    }
  }
  asort($serviceList);
  return $serviceList;
}

function kms_pands_product_list_form() {

  global $user;

  $form = array();
  $form['#attributes']['class'] = array('my-services-list');
  $grouped_products = array();
  $grouped_by_korttype = array();

  $products = kms_pands_get_products($user);
  $services = kms_pands_get_services($user);

  $dismiss_link = array('Predefined datacollections', 'FTP');
  foreach ($products as $product) {
    //if (empty($product->ProductKorttype) || $product->ProductKorttype == 'null') { $product->ProductKorttype = ''; }
    switch ($product->ProductTypeName) {
      case 'Predefined datacollections':
        $grouped_by_korttype[$product->ProductKorttype][] = $product;
        break;
      case 'FTP':
        $grouped_products[$product->ProductTypeName][] = $product;
        break;
      case 'applications':
        break;
      default:
        $grouped_products[$product->ProductTypeName][] = $product;
        break;
    }
  }
  ksort($grouped_by_korttype);
  foreach ($grouped_by_korttype as $korttype => $ProductKorttype) {
    usort($ProductKorttype, 'kms_pands_product_type_sort');
    foreach ($ProductKorttype as $product) {
      $grouped_products['Predefined datacollections'][] = $product;
    }
  }

  uksort($grouped_products, 'kms_pands_product_type_sort');

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'kms_services') . '/js/fs.js',
    drupal_get_path('module', 'kms_services') . '/js/hostString.js',
  );
  if (ae_detect_ie() == FALSE) {
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'kms_services') . '/css/services.css',
    );
  }
  else {
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'kms_services') . '/css/services-ie.css',
    );
  }

  foreach ($grouped_products as $group_name => $group) {
    $form[$group_name] = array(
      '#type' => 'fieldset',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      '#tree' => TRUE,
      '#title' => $group_name
    );
    
    if ($group_name == 'Predefined datacollections') {
      $form[$group_name]['#title'] = t('Predefined data collections', array(), array('context' => 'Profile'));
    }

    if ($group_name == 'Applications') {
      $form[$group_name]['#title'] = t('Applications', array(), array('context' => 'Profile'));
    }

    foreach ($group as $key => $product) {
      if ($product->ProductTypeName == 'Predefined datacollections') {
        $service_type = t('Predefined data collections');
      }
      else {
        $service_type = $product->ProductTypeName;
      }
      $service_name = $product->ProductName;
      $service_key = strtolower($service_type . '-' . $service_name);
      $service_title = '';

      if (isset($services[$service_key])) {
        $service_title = $services[$service_key]['title'];
      }

      $titleBuilder = $service_name;
      if (!empty($service_title)) {
        $titleBuilder .= ' <i>(' . $service_title . ')</i>';
      }

      // Build substring of title so title isn't bigger than fieldset itself.
      $titleLength = 150;
      if (strlen($titleBuilder) > $titleLength) {
        $titleBuilderSub = substr($titleBuilder, 0, $titleLength);
      }
      else {
        $titleBuilderSub = $titleBuilder;
      }

      $form[$group_name][$key] = array(
        '#type' => 'fieldset',
        '#title' => $titleBuilderSub,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE,
      );

      if (!in_array($product->ProductTypeName, $dismiss_link)) {
        $form[$group_name][$key]['#attributes'] = array(
          'class' => array('service-fieldset-data'),
          'rel' => 'kms_services/retrieve/' . $product->ProductName . '/' . $product->ProductTypeName,
        );
      }

      if (isset($services[$service_key]['capability']) && $services[$service_key]['capability'] == TRUE) {
        $form[$group_name][$key]['info'] = array(
          '#type' => 'markup',
          '#markup' => '<div class="response">' . t('Loading...') . '</div>',
        );
      }
      else {
        if ($product->ProductTypeName == 'Predefined datacollections' || $product->ProductTypeName == 'FTP') {
          if (empty($product->ProductDescription)) {
            $description = t('No data available for this service type.');
          }
          else {
            $description = "<b>" . t('Description') . "</b>" . $product->ProductDescription;
          }

          if (!empty($product->ProductLink) && $product->ProductLink !== 'null' ) {
            if (kms_iframe_test()) {
              $description .= "<b>" . t('Link'). ":</b> " . l(t('Product link'), $product->ProductLink, array('attributes' => array('target'=>'_download')));
            } else {
              $description .= "<b>" . t('Link'). ":</b> " . l(t('Product link'), $product->ProductLink);
            }
          }

          $form[$group_name][$key]['noData'] = array(
            '#markup' => $description,
          );
        }
        else {
          $form[$group_name][$key]['noData'] = array(
            '#markup' => (empty($product->ProductDescription) ? t('No data available for this service type.') : $product->description),
          );
        }
      }
    }
  }

  return $form;
}

/**
 * Sorts products by name.
 *
 * @see uksort()
 */
function kms_pands_product_type_sort($a, $b) {
  if ($a == 'Predefined datacollections' || $a == 'FTP') {
    return 1;
  }
  else if ($b == 'Predefined datacollections' || $b == 'FTP') {
    return -1;
  }
  return 0;
}




