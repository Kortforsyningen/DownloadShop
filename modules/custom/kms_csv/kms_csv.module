<?php

define('KMS_CSV_CONCAT_SEPARATOR', '|');

/**
 * Implements hook_menu().
 */
function kms_csv_menu() {

  $items['trigerdownload/%/%'] = array(
    'title' => 'Ajax test callback',
    'page callback' => 'kms_csv_ajax_callback',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
  );

  $items['admin/config/system/kmscsv'] = array(
    'title' => 'KMS CSV module settings',
    'description' => 'Manage FTP credentials for the KMS CSV service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kms_csv_admin'),
    'access arguments' => array('administer settings'),
	  'file' => 'kms_csv.admin.inc',
    'type' => MENU_NORMAL_ITEM,
   );

  $items['kms/csv/run'] = array(
    'title' =>'CSV run',
    'description' => 'run',
    'page callback' => 'kms_csv_run',
    'access arguments' => array('csv run'),
  );

  return $items;
}

function kms_csv_run() {
  _kms_csv_create_users();
  //_kms_csv_create_orders();
  _kms_csv_create_downloads();
}

/**
 * Implements hook_cronapi().
 */
function kms_csv_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array(
        'kms_csv_job' => 'Render CSV files',
      );

    case 'rule':
      switch ($job) {
        case 'kms_csv_job': return '30 2 * * *';
          break;
      }
      break;

    case 'execute':
      switch ($job) {
        case 'kms_csv_job':
          kms_csv_job();
          break;
      }
      break;
  }
}


/**
 * Cron hook
 *
 */

function kms_csv_job(){
  _kms_csv_create_users();
  //  _kms_csv_create_orders();
  _kms_csv_create_downloads();
}


/**
 * Create CSV output for users.
 *
 */
function _kms_csv_create_users($date = FALSE) {

  $headers = _kms_csv_generate_data_users_headers();
  $file = file_directory_temp() . '/' . uniqid();
  $handle = fopen($file, 'w'); // Create the file.
  fputcsv($handle, $headers, ';'); // Write the labels to the header row.
  fclose($handle);

    // Select last
  $last_id = db_query('SELECT MAX(uid) FROM {users}')->fetchField();

  $today = _kms_csv_return_today($date);

  $query = db_select('users', 'u')
  ->condition('created', array($today['beginOfDay'], $today['endOfDay']), 'BETWEEN')
  ->fields('u', array('uid'));

  $result = $query->execute();

  while($record = $result->fetchAssoc()) {
    if(empty($record['uid'])) {
      continue;
    }
     _kms_csv_generate_data_users_row($record['uid'], $file);
  }

  _kms_csv_transfer_file($file, 'kortforsyningen_users', $date);

  // Update lastprocessed
  db_update('kms_csv_cron_point')
    ->condition('type', 1, '=')
    ->fields(array('unid' => $last_id, 'updated' => time()))
    ->execute();

}

/**
 * Create Downloads (essentially orders).
 *
 * @param array $settings
 *
 */
function _kms_csv_create_downloads($date = FALSE) {

  // Select last
  $last_id = db_query('SELECT MAX(order_id) FROM {commerce_order}')->fetchField();

  $query = db_select('commerce_order', 'o');

  $today = _kms_csv_return_today($date);

  $query
  ->condition('o.status', 'completed', '=')
  ->condition('o.created',  array($today['beginOfDay'], $today['endOfDay']), 'BETWEEN')
  ->fields('o', array('order_id'));

  $result = $query->execute();
  // Add headers.
  $headers = _kms_csv_generate_data_download_headers();
  // Create the file and print the labels in the header row.
  $file = file_directory_temp() . '/' . uniqid();
  $handle = fopen($file, 'w'); // Create the file.
  fputcsv($handle, $headers, ';'); // Write the labels to the header row.
  fclose($handle);

  while($record = $result->fetchAssoc()) {
    if(empty($record['order_id'])) {
      continue;
    }
      _kms_csv_generate_data_download_rows($record['order_id'], $file);
  }

  _kms_csv_transfer_file($file, 'shop_downloads', $date);

  // Update lastprocessed
  db_update('kms_csv_cron_point')
    ->condition('type', 2, '=')
    ->fields(array('unid' => $last_id, 'updated' => time()))
    ->execute();

}

/**
 * Render csv rows: Downloads.
 *
 * @param integer $oid
 *   Drupal commerce order_id.
 * @param string $file
 *   Absolute path to tmp csv file.
 *
 */
function _kms_csv_generate_data_download_rows($oid, $file){

  $handle = fopen($file, 'a');

  $order_wrapper = entity_metadata_wrapper('commerce_order', commerce_order_load($oid));

  $user = $order_wrapper->owner->value();
  if (empty($user)) {
    return;
  }

  //print_r($order_wrapper);

  // ORDERID
  $orderid = $order_wrapper->order_id->value();
  // DATETIME
  $datetime = $order_wrapper->created->value();
  // USERID
  $userid = $user->uid;
  // USERNAME
  $username = $user->name;

  // USERLEVELS
  $uwrapper = entity_metadata_wrapper('user', user_load($userid));
  $types = _kms_csv_user_types($uwrapper);
  $array_key_number = 0;
  foreach ($types as $type)
  {
    $type_list[$array_key_number] = $type;
    $array_key_number++;
  }

  // $USERTYPELVL_1
  $usertypelvl_1 = $type_list[0];

  if($type_list[0] == "Forening/NGO") {
    // User type info.
    $user_type_info = $uwrapper->field_user_type_info->value();
    $usertypelvl_2 = !empty($user_type_info) ? $user_type_info : '';
  } else {
    $usertypelvl_2 = isset($type_list[1]) ? $type_list[1] : '';
  }

  // $USERTYPELVL_3
  $usertypelvl_3 = isset($type_list[2]) ? $type_list[2] : '';
  // $USERTYPELVL_4
  $usertypelvl_4 = isset($type_list[3]) ? $type_list[3] : '';
  // Order id
  // Get line items.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {

    // Product
      $product = $line_item_wrapper->commerce_product->title->value();
    //Type and
    $data = unserialize($line_item_wrapper->field_selection->value());
    if(isset($data['product_id'])) {
      $product_display_id = _kms_csv_get_referencing_node_id($data['product_id']);

      if(!empty($product_display_id)){
        $product_display_wrapper = entity_metadata_wrapper('node', node_load($product_display_id));

        $product_display_title = $product_display_wrapper->title->value();

        $product_display_korttype = $product_display_wrapper->field_korttype->value()->name;

        //Get parrent taxonomy term, use php reset to get firt array object, because there always will be one object in array
        $parent_product_display_korttype = reset(taxonomy_get_parents($product_display_wrapper->field_korttype->value()->tid));
        //Check if category has parent category, and ad it to string
        if(!empty($parent_product_display_korttype) && isset($parent_product_display_korttype->name)){
          $product_display_korttype = $parent_product_display_korttype->name.":".$product_display_korttype;
        }

        $product_display_datastruktur = $product_display_wrapper->field_datastruktur->value()->name;

        $product_display_aktualitet = $product_display_wrapper->field_aktualitet->value()->name;

        $product_display_scheme = $product_display_wrapper->field_scheme->value()->name;
      }

    }

    //DOWNLOADTYPE
    $downloadtype = $data['type'];
    //ITEMID
    $itemid = $line_item_wrapper->line_item_id->value();
    //File name
    $remove_list = array("{", "}", "[", "]", "\"");
      $files = str_replace($remove_list, "", $data['selection']);
      $file_array =  explode(",", $files);

    // Product data
    $product_data = $line_item_wrapper->field_selection_text->value();

    // SRS
    $projection_term =  taxonomy_term_load($data['koordinatsystem']);
    $srs = $projection_term->name;

    // FORMAT
    $product_something =  taxonomy_term_load($data['dataformat']);
    $format = $product_something->name;
    $squerem = '';

    if($downloadtype == 'userdefined') {
      $remove_names = array("left:", "right:", "top:", "bottom:");
      $process_orderid = $line_item_wrapper->field_jobid->value();
      $bbox = str_replace($remove_names, "", $files);
      $squerem = _kms_csv_squere_meters_from_coordinates($bbox);
      $deliverytime = $line_item_wrapper->field_finished->value();
      $ordertime = $line_item_wrapper->created;
      $opw = entity_metadata_wrapper('commerce_product', commerce_product_load($data['product_id']));
      $userdefined_file = $process_orderid.'.zip';
      $userdefined_folder = 'http://download.kortforsyningen.dk/sites/default/files/kfdownload/';
    } else {
      if(isset($data['product_id'])) {
        $opw = entity_metadata_wrapper('commerce_product', commerce_product_load($data['product_id']));
        $folder = $opw->field_folder->value();
      }
    }

    if($downloadtype != 'userdefined'){
      foreach ($file_array as $file) {
        // URL
        $url =  'http://download.kortforsyningen.dk/system/files/'.$folder.'/'.$file;
        $row = array( $orderid,
                      $datetime,
                      $userid,
                      $username,
                      $usertypelvl_1,
                      $usertypelvl_2,
                      $usertypelvl_3,
                      $usertypelvl_4,
                      $itemid,
                      $downloadtype,
                      $format,
                      $srs,
                      '',
                      $product_display_title,
                      $product_display_korttype,
                      $product_display_datastruktur,
                      $product_display_aktualitet,
                      $product_display_scheme,
                      $squerem,
                      '',
                      '',
                      '',
                      $url
                      );
        fputcsv($handle, $row, ';');
      }
    } else {
      $url =  $userdefined_folder.$userdefined_file;
      $row = array(   $orderid,
                      $datetime,
                      $userid,
                      $username,
                      $usertypelvl_1,
                      $usertypelvl_2,
                      $usertypelvl_3,
                      $usertypelvl_4,
                      $itemid,
                      $downloadtype,
                      $format,
                      $srs,
                      $process_orderid,
                      $product_display_title,
                      $product_display_korttype,
                      $product_display_datastruktur,
                      $product_display_aktualitet,
                      $product_display_scheme,
                      $squerem,
                      $bbox,
                      $datetime,
                      $deliverytime,
                      $url
                      );
      fputcsv($handle, $row, ';');
    }

  }

  fclose($handle);
}


/**
 * Create orders.
 *
 * @param array $settings
 *
 */
function _kms_csv_create_orders() {

  // Select last
  $last_id = db_query('SELECT MAX(order_id) FROM {commerce_order}')->fetchField();

  $query = db_select('commerce_order', 'o');

  $today = _kms_csv_return_today();

  $query
  ->condition('o.status', 'completed', '=')
  ->condition('o.created',  array($today['beginOfDay'], $today['endOfDay']), 'BETWEEN')
  ->fields('o', array('order_id'));

  $result = $query->execute();
  // Add headers.
  $headers = _kms_csv_generate_data_orders_headers();
  // Create the file and print the labels in the header row.
  $file = file_directory_temp() . '/' . uniqid();
  $handle = fopen($file, 'w'); // Create the file.
  fputcsv($handle, $headers, ';'); // Write the labels to the header row.
  fclose($handle);

  while($record = $result->fetchAssoc()) {
    if(empty($record['order_id'])) {
      continue;
    }
      _kms_csv_generate_data_orders_rows($record['order_id'], $file);
  }

  _kms_csv_transfer_file($file, 'shop_downloads');

  // Update lastprocessed
  db_update('kms_csv_cron_point')
    ->condition('type', 2, '=')
    ->fields(array('unid' => $last_id, 'updated' => time()))
    ->execute();

}

/**
 * Render csv rows: orders.
 *
 * @param integer $oid
 *   Drupal commerce order_id.
 * @param string $file
 *   Absolute path to tmp csv file.
 *
 */
function _kms_csv_generate_data_orders_rows($oid, $file){
  $handle = fopen($file, 'a');

  $order_wrapper = entity_metadata_wrapper('commerce_order', commerce_order_load($oid));
  $user = $order_wrapper->owner->value();
  if (empty($user)) {
    return;
  }

  // Brugerid
  $useruid = $user->uid;
  // Brugernavn
  $username = $user->name;
  // Dato (created).
  $date = $order_wrapper->created->value();
  // Order id
  $order_id = $order_wrapper->order_id->value();
  // Get line items.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {

	// Product
    $product = $line_item_wrapper->commerce_product->title->value();

	//Type and
	$data = unserialize($line_item_wrapper->field_selection->value());

	//ElementID
	$element_id = $line_item_wrapper->line_item_id->value();

	//File name
	$remove_list = array("{", "}", "[", "]", "\"");
    $file_name = str_replace($remove_list, "", $data['selection']);

	// Product data
	$product_data = $line_item_wrapper->field_selection_text->value();

  // Projection
  $projection_term =  taxonomy_term_load($data['koordinatsystem']);
  $projection_name = $projection_term->name;

	$row = array($useruid, $username, $order_id , $date, $data['type'], $element_id, $product_data, $file_name, $product, $projection_name);

    fputcsv($handle, $row, ';');
  }

  fclose($handle);
}

/**
 * Transfer files to FTP server
 *
 * @param string $file
 *
 * @param string $type
 *
 */
function _kms_csv_transfer_file($file, $type, $date) {

  date_default_timezone_set("Europe/Copenhagen");

  $day = date("d_m_Y", $date == FALSE ? strtotime("yesterday") : $date);

  if (copy($file, drupal_realpath("public://kms_csv/{$type}_{$day}.csv"))) {
    watchdog('CSV', 'File created successfully');
  } else {
    watchdog('CSV', 'Error occured while trying to write the file');
  }

}

/**
 * Translate $value to 1/0
 *
 * @param string $value
 *
 * @return string
 *   1 or 0
 */
function _kms_csv_one_zero($value) {
  return (boolean)$value ? '1' : '0';
}

function _kms_csv_admin_page() {
  return array(
    'csv_download_list' => array(
      '#items' => array(
        l(t('Download Users'), 'csv/generate/users') .
        '<p>' . implode(', ', _kms_csv_generate_data_users_headers()) . '</p>',
        l(t('Download Orders'), 'csv/generate/orders') .
        '<p>' . implode(', ', _kms_csv_generate_data_orders_headers()) . '</p>',
      ),
      '#theme' => 'item_list',
    ),
  );
}

/**
 * Translate unix timestamp to excel format.
 *
 * @param integer $timestamp
 *
 * @return string
 */
function kms_csv_date_unix_2_excel($timestamp, $format = '%a, %d/%m/%G') {
  setlocale(LC_TIME, "da_DK");
  return ucfirst(strftime($format, $timestamp));
}

/**
 * Csv header: orders.
 *
 * @return array
 */
function _kms_csv_generate_data_orders_headers(){
  return array(
    'Brugerid',
    'Brugernavn',
    'OrderID',
    'Dato',
    'Type',
    'ElementID',
    'Product Data',
    'Fil navn',
    'Product',
    'Projection'
  );
}

/**
 * Csv header: users.
 *
 * @return array
 */
function _kms_csv_generate_data_users_headers() {
  return array(
    'USERID',
    'USERNAME',
    'USERTYPELVL_1',
    'USERTYPELVL_2',
    'USERTYPELVL_3',
    'USERTYPELVL_4',
    'CREATIONDATE',
    'MAIL',
    'NEWSLETTER',
    'SURVEY',
  );
}

/**
 * Csv header: downloads.
 *
 * @return array
 */
function _kms_csv_generate_data_download_headers() {
  return array(
    'ORDERID',
    'DATETIME',
    'USERID',
    'USERNAME',
    'USERTYPELVL_1',
    'USERTYPELVL_2',
    'USERTYPELVL_3',
    'USERTYPELVL_4',
    'ITEMID',
    'DOWNLOADTYPE',
    'FORMAT',
    'SRS',
    'ORDERID',
    'PRODUCT',
    'KORTTYPE',
    'DATASTRUKTUR',
    'AKTUALITET',
    'DATASKEMA',
    'SQUAREKM',
    'BBOX',
    'ORDERTIME',
    'DELIVERYTIME',
    'URL',
  );
}

/* Generate user row
 *
 * @param integer $uid
 * @param string $file
 *
 */
function _kms_csv_generate_data_users_row($uid, $file){
  $handle = fopen($file, 'a');

  $yes_no = array(0 => 'NO', 1 => 'YES');

  $uwrapper = entity_metadata_wrapper('user', user_load($uid));
  $row = array();

  // Brugernavn
  $row[] = $uid;
  // Brugernavn

  $username = $uwrapper->name->value();
  $row[] = $username;

  // Brugertype.
  $types = _kms_csv_user_types($uwrapper);
  $array_key_number = 0;
  foreach ($types as $type)
  {
    $type_list[$array_key_number] = $type;
    $array_key_number++;
  }

  // Brugertype. level 1
  $row[] = $type_list[0];
  if($type_list[0] == "Forening/NGO") {
    // User type info.
    $user_type_info = $uwrapper->field_user_type_info->value();
    $row[] = !empty($user_type_info) ? $user_type_info : '';
  } else {
    $row[] = isset($type_list[1]) ? $type_list[1] : '';
  }

  // Brugertype. level 2
  // Brugertype. level 3
  $row[] = isset($type_list[2]) ? $type_list[2] : '';
  // Brugertype. level 4
  $row[] = isset($type_list[3]) ? $type_list[3] : '';

   // Oprettet
  $row[] = date($uwrapper->created->value());

  // Email
  $row[] =  $uwrapper->mail->value();

  //Newsletter
  $row[] = $yes_no[$uwrapper->field_newsletter->value()];

  //Survey
  $row[] = $yes_no[$uwrapper->field_contact_me->value()];

  fputcsv($handle, $row, ';');

  fclose($handle);
}


/**
 * Convert UTF-8 to single byte latin 1.
 *
 * @param array $row
 *   CSV data row.
 *
 * @return void.
 */
function kms_csv_convert_row2latin1(&$row) {
  array_walk($row, function(&$v) {
    $v = utf8_decode($v);
    if (preg_match("#^rhus(.*)$#", $v, $m)) {
      $v = utf8_decode('Århus' . $m[1]);
    }
  });
}

/**
 * Create user type array ordered by term id.
 *
 * @param object $uwrapper
 *   Entity metadata wrapper.
 *
 * @return array $types
 */
function _kms_csv_user_types($uwrapper) {
  $types = array();
  foreach ($uwrapper->field_user_type as $type) {
    $value_check = $type->value();
    if (empty($value_check)) {
      continue;
    }
    $types[$type->tid->value()] = $type->name->value();
  }
  // Make sure user types are in the right order
  ksort($types);
  return $types;
}

/**
 * Create user roles array ordered by role id.
 *
 * @param object $uwrapper
 *   Entity metadata wrapper.
 *
 * @return array $roles
 */
function _kms_csv_user_roles($uwrapper) {
  $roles = array();
  foreach ($uwrapper->roles as $role) {
    $rid = $role->value();
    if ($rid < 2) {
      continue;
    }
    $roles[$rid] = $role->label();
  }
  ksort($roles);
  return $roles;
}

function kms_csv_ajax_callback($order_id, $element_id) {
  // Do any database queries, processing, etc.

  $fields = array(
    'order_id' => $order_id,
	'element_id' => $element_id,
    'download_on' => time(),
  );

  db_insert('kms_download_count')
    ->fields($fields)
    ->execute();

  $result =  array('status' => $order_id);
  drupal_json_output($result);
}

/**
 * Calculate timestamp values for begining and end of yesterday.
 * @return array $today
 */
function _kms_csv_return_today($date) {

  date_default_timezone_set("Europe/Copenhagen");

  $beginOfDay = strtotime("midnight - 1 day", time());
  
  if ($date !== FALSE) {
    $beginOfDay = $date;
  } 

  $endOfDay   = strtotime("tomorrow", $beginOfDay) - 1;

  return array('beginOfDay'=>$beginOfDay, 'endOfDay'=>$endOfDay);
}



/**
 * Implements theme_file_link().
 */
function kms_csv_file_link($variables) {
  $file = $variables['file'];
  $order_id  = $variables['order_id'];

  $icon_directory = $variables['icon_directory'];

  $url = file_create_url($file->uri);
  $icon = theme('file_icon', array('file' => $file, 'icon_directory' =>     $icon_directory));

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ),
  );

  // Updating 'html' to TRUE so that the html code to display the icon is     printed
  $options += array(
    'html' => TRUE,
  );

  $options['attributes']['target'] = "filetargetframe";
  $options['attributes']['id'] = $order_id;
  $options['attributes']['rel'] = $variables['element_id'];
  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  return '<span class="file">' . l($icon, $url, $options) . ' ' .     l($link_text, $url, $options) . '</span>';
}

function _kms_csv_get_referencing_node_id($product) {
  global $language;

  // Itterate thhrough fields which refer to products.
  foreach (commerce_info_fields('commerce_product_reference') as $field['field_name']) {
    // Build query.
    if(isset($field['field_name']))
    {
      $query = new EntityFieldQuery;
      $query->entityCondition('entity_type', 'node', '=')
        ->fieldCondition($field['field_name'], 'product_id', $product, '=')
        ->propertyCondition('language', $language->language, '=')
        ->range(0, 1);

      if ($result = $query->execute()) {
        // Return node id.
        return array_shift(array_keys($result['node']));
      }
    }
  }

  return false;
}

function _kms_csv_squere_meters_from_coordinates($coordinate_string) {
  $coords = explode(',', $coordinate_string);
  $squarem = ($coords[2]- $coords[0])*( $coords[3]- $coords[1]);
  $squarekm = $squarem/1000000;
  return $squarekm;
}
