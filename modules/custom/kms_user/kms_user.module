<?php

define('KMS_USER_ROLES_SYSTEM_ACCOUNT_ID', 7);
define('KMS_USER_ROLES_SUPERUSER_ID', 4);
define('KMS_USER_PAGE_CONTACT', 'node/7');
define('KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER', 'admin_views_user');
define('KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER', 'system_1');
define('KMS_USER_CACHE_ID_ADMIN_VIEWS_PEOPLE_PERMS_FORM', 'kms_user:admin_views_people_perms_form');
define('KMS_USER_VALIDATE_NAME_LENGTH', 32);
define('KMS_USER_VALIDATE_PASS_LENGTH', 32);

define('KMS_USER_NODE_CONSENT_PAGE_NID', 254);
define('KMS_USER_NODE_TERMS_PAGE_NID', 22);

define('KMS_USER_LOGIN_SESSION_PREFIX', 'kms_user_login_');

/**
 * Implements hook_init().
 */
function kms_user_init() {
  if (current_path() == 'admin/people') {
    drupal_add_js(drupal_get_path('module', 'kms_user') . '/js/admin_views_people.js');
    drupal_add_css(drupal_get_path('module', 'kms_user') . '/css/admin_views_people.css');
    drupal_add_library('kms_permissions', 'jquery.foggy');
  }
}

/**
 * Implements hook_watchdog().
 */
function kms_user_watchdog(array $log_entry) {
  global $user;
  // If a system account is prohibited access to a page
  // then set a message and redirect to front.
  if (
    $log_entry['type'] == 'access denied'
    && $log_entry['user']->uid == $user->uid
    && kms_user_is_system_account($log_entry['user']->roles)
  ) {
    drupal_set_message(
      t(
        'You cannot access %uri as a system account.',
        ['%uri' => $log_entry['message']]
      ),
      'error'
    );
    drupal_goto(variable_get('kms_user_page_contact', KMS_USER_PAGE_CONTACT));
  }
}

/**
 * Implements hook_permission().
 */
function kms_user_permission() {
  return [
    'access kms user pages' => [
      'title' => t('Access kms user pages'),
      'description' => t('Access kms user pages.'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function kms_user_menu() {
  $items = [];

  $items['kms-user/ajax/refresh-admin-views-people'] = [
    'title' => 'Kms user refresh loaded admin views people view',
    'page callback' => 'kms_user_ajax_refresh_admin_views_people',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  $items['admin/kms-user/%ctools_js/filter-admin-views-people-perms'] = [
    'title' => 'Filter users by permissions',
    'description' => 'Select permissions to filter by',
    'access arguments' => ['access content'],
    'page callback' => 'kms_user_filter_admin_views_people_perms',
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
  ];

  //Return json of webservices
  $items['kms-user/json/webservices/%'] = [
    'title' => 'json for webservices',
    'page callback' => '_kms_user_return_websevice_list',
    'page arguments' => [3],
    'type' => MENU_CALLBACK,
    'access arguments' => ['access content'],
  ];

  $items['admin/config/kms-user-gdpr'] = [
    'title' => 'SDFE GDPR Settings',
    'description' => 'GDPR and user settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['kms_user_gdpr_system_settings_form'],
    'access arguments' => ['administer users'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_form().
 *
 * @return mixed
 */
function kms_user_gdpr_system_settings_form() {

  // Get nodes of type page.
  $result = db_select('node', 'n')
    ->fields('n', ['nid', 'title'])
    ->condition('type', 'page')
    ->orderBy('title')
    ->execute()
    ->fetchAll();

  // Create the options format.
  $node_options = [];
  foreach ($result as $row) {
    $node_options[$row->nid] = $row->title . ' (ID ' . $row->nid . ')';
  }

  $form = [];

  $form['kms_user_gdpr_consent'] = [
    '#type' => 'select',
    '#title' => t('Node for the consent'),
    '#options' => $node_options,
    '#default_value' => variable_get('kms_user_gdpr_consent', 254),
    '#description' => t('Select the page that contain the GDPR consent - used as the second step on create login flow.'),
    '#required' => TRUE,
  ];

  $form['kms_user_gdpr_terms'] = [
    '#type' => 'select',
    '#title' => t('Node for the terms'),
    '#options' => $node_options,
    '#default_value' => variable_get('kms_user_gdpr_terms', 22),
    '#description' => t('Select the page that contain the terms & conditions - used as the second step on create login flow.'),
    '#required' => TRUE,
  ];

  return system_settings_form($form);
}

/**
 * Implements hook_menu_alter().
 */
function kms_user_menu_alter(&$items) {
  $restricted_paths = variable_get(
    'kms_user_system_account_restricted_paths',
    [
      'edit/profile',
      'user/password',
      'user/register',
      'user/reset/%/%/%',
      'user/%user/edit',
      'user/%user',
      'user/%user/cancel',
      'user/%user/cancel/confirm/%/%',
      'user/%user/view',
    ]
  );

  foreach ($items as $path => &$item) {
    if (in_array($path, $restricted_paths)) {
      if (!empty($item['access callback'])) {
        $item['access arguments'][] = $item['access callback'];
      }
      $item['access callback'] = '_kms_user_access_callback_deny_system_account';
    }
  }
}

function kms_user_views_data() {
  $data['users']['kms_edit_node'] = [
    'field' => [
      'title' => t('Edit link (kms_user)'),
      'help' => t('Provide a simple link to edit the user (kms_user).'),
      'handler' => 'views_handler_field_kms_user_link_edit',
    ],
  ];

  $data['users']['exposed_services'] = [
    'group' => t('Custom'),
    'title' => t('Webservices filter'),
    'help' => t('Custom web services filter'),
    'filter' => [
      'handler' => 'kms_user_handler_filter_exposed_services',
    ],
  ];

  return $data;
}

function _kms_user_access_callback_deny_system_account() {
  global $user;
  $args = func_get_args();
  $access_callback = array_pop($args);
  $original_access = TRUE;
  if (!empty($access_callback) && is_string($access_callback)) {
    $original_access = call_user_func_array($access_callback, $args);
  }
  $roles = $user->roles;
  // Todo. Do this the right way.
  // For some reason user_access is flaky
  // but that is the one that should be used instead of $is_systemaccount;
  // return $original_access && user_access('Access kms user pages');
  return $original_access && !kms_user_is_system_account($roles);
}

/**
 * Implements hook_cron().
 */
function kms_user_cron() {
  _kms_user_cron_expire_users();
}

function kms_user_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  // if (in_array($owner, array('ctools', 'addressfield'))) {
  if (in_array($module, ['ctools'])) {
    return "plugins/$plugin";
  }
  if ($module == 'kms_oci_queue') {
    return 'plugins/kms_oci_queue/' . $plugin;
  }
}

function kms_user_get_step_header($form, &$form_state) {

  $form_state['stage'] = isset($form_state['stage']) ? $form_state['stage'] : 1;

  $form_stages = [
    'user_info' => 1,
    'consent' => 2,
    'terms' => 3,
  ];

  // Set the current step.
  $current_step = (isset($form_stages[$form_state['stage']])) ? $form_stages[$form_state['stage']] : 1;

  $stages = [
    1 => ['data' => t('1. User info')],
    2 => ['data' => t('2. Consent')],
    3 => ['data' => t('3. Terms')],
  ];

  $stages[$current_step]['class'] = ['active'];

  $stages_list = theme('item_list', ['items' => $stages]);

  $form['header'] = [
    '#type' => 'fieldset',
    '#title' => '',
    '#value' => $stages_list,
    '#weight' => -50,
  ];

  return $form;
}

function kms_user_form_set_access_on_fields(&$form, $fieldnames = [], $access = FALSE) {
  if (empty($fieldnames)) {
    return;
  }

  foreach ($fieldnames as $fieldname) {
    if (isset($form['account'][$fieldname])) {

      $form['account'][$fieldname]['#prefix'] = '<div style="display:none;">';
      $form['account'][$fieldname]['#suffix'] = '</div>\'';
    }
    if (isset($form[$fieldname])) {
      $form[$fieldname]['#prefix'] = '<div style="display:none;">';
      $form[$fieldname]['#suffix'] = '</div>';

    }
  }
}

function kms_user_register_form_remove_fields_steps() {
  $fields = [
    'name',
    'mail',
    'field_user_remark',
    'field_bundle_webservices_plot',
    'field_bundle_webservices_geo',
    'field_bundle_webservices_wcs',
    'field_bundle_webservices_wfs',
    'field_bundle_webservices_wms',
    'field_bundle_webservices_oms',
    'field_bundle_webservices_csw',
    'field_bundle_webservices_cswt',
    'field_bundle_webservices_wmts',
    'field_terms_and_conditions',
    'field_contact_me',
    'field_ftp_permissions',
    'field_applications',
    'field_predefined_datacollections',
    'field_access_bundles',
    'field_user_type_info',
    'field_user_type',
    'group_bundles_n_services',
    'group_webservices',
    'group_access_bundles',
    'field_terms_and_conditions',
  ];

  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function kms_user_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if (in_array($form_id, ['user_register_form', 'user_profile_form'])) {
    $form['account']['name']['#element_validate'] = ['_kms_user_validate_username'];
    $form['account']['name']['#description'] = t(
      'Spaces are not allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'
    );
    $form['account']['name']['#access'] = TRUE;

    $form['field_terms_and_conditions']['#after_build'] = ['kms_user_form_after_build'];

    // Update user 'updated' time stamp.
    $form['#submit'][] = '_kms_user_update_timestamp';
    $form['field_updated']['#disabled'] = TRUE;
    switch ($form_id) {
      case 'user_profile_form':
        // Bundle in service list
        // Add CSS.
        $form['#attached']['css'][] = drupal_get_path('module', 'kms_user') . '/css/kms_user.css';
        // Field loop.
        foreach ($form as $field_name => $field_value) {
          // Only use bundle fields.
          if (strpos($field_name, 'field_bundle_webservices') !== FALSE) {
            if (!empty($field_value['und']['#options'])) {
              foreach ($field_value['und']['#options'] as $service_id => $service_name) {
                $form[$field_name]['und']['#options'][$service_id] = $service_name;
              }
            }
          }
        }

        $form['#fieldgroups']['group_user_type']->weight = 6;

        // The terms and conditions must(!) be accepted on the register-form.
        // After that the terms and conditions can NOT be altered by the user.
        // So we change the default value to 'accepted',
        // and disable the checkbox.
        $form['field_terms_and_conditions']['#default_value'] = 1;
        $form['field_terms_and_conditions'][LANGUAGE_NONE]['#default_value'] = 1;
        $form_state['field']['field_terms_and_conditions'][LANGUAGE_NONE]['instance']['default_value'][0]['value'] = 1;
        $form['field_terms_and_conditions']['#disabled'] = TRUE;

        // We need to store any changes to the password.
        $form['#submit'][] = '_kms_user_submit_update_user_pass';
        // Store user data in Oracle.
        $form['#submit'][] = '_kms_user_submit_update_user_oracle';
        // The user-profile-form has some trouble remembering
        // the user-provided values for the fields
        // "field_contact_me", and "field_newsletter".
        // We must fetch the values and set the fields accordingly.
        $user_contact_me = db_select('field_data_field_contact_me', 'cme')
          ->fields('cme', ['field_contact_me_value'])
          ->condition('entity_id', $form['#user']->uid, '=')
          ->execute()
          ->fetchAssoc();

        $form['field_contact_me'][LANGUAGE_NONE]['#title'] = t('User profile survey consent');
        $form['field_contact_me'][LANGUAGE_NONE]['#default_value'] = $user_contact_me['field_contact_me_value'];

        /*
        $user_newsletter = db_select('field_data_field_newsletter', 'news')
        ->fields('news', array('field_newsletter_value'))
        ->condition('entity_id', $form['#user']->uid, '=')
        ->execute()
        ->fetchAssoc();
        $form['field_newsletter'][LANGUAGE_NONE]['#default_value'] = $user_newsletter['field_newsletter_value'];
        */

        // Newsletters are moved to mailchimp.
        // This field should be removed entirely.
        $form['field_newsletter']['#access'] = FALSE;

        // No one should be able to change clear text password in admin area.
        $form['field_pass_clear']['#disabled'] = TRUE;

        // Show user name.
        $form['username'] = [
          '#type' => 'markup',
          '#markup' => kms_user_render_username($user),
          '#disabled' => TRUE,
          '#weight' => -100,
        ];

        kms_user_js_settings();

        // Do not allow editing of user type to anybody else than super admin.
        if (!kms_user_is_superadmin($user)) {
          // Allow users editing user type.
          //$form['field_user_type']['#access'] = FALSE;

          $form['field_address']['und'][0]['street_block']['#access'] = FALSE;
          $form['field_address']['und'][0]['country']['#access'] = FALSE;
          $form['field_address']['und'][0]['locality_block']['#access'] = FALSE;
          $form['field_address']['und'][0]['organisation_block']['#access'] = FALSE;
        }
        break;
      case 'user_register_form':
        $form['#attached']['css'][] = drupal_get_path('module', 'kms_user') . '/css/kms_user.css';

        // Create the session key and get the step-stage we are currently on.
        $session_key = KMS_USER_LOGIN_SESSION_PREFIX . session_id();

        drupal_add_js(drupal_get_path('module', 'kms_user') . '/js/gdpr_scroll.js');

        // They do not want a fieldset title on address.
        $form['field_address'][LANGUAGE_NONE][0]['#title'] = '';


        // Newsletters are moved to mailchimp.
        // This field should be removed entirely.
        $form['field_newsletter']['#access'] = FALSE;

        $form['field_contact_me'][LANGUAGE_NONE]['#title'] = t('User profile survey consent');

        // Setup multistep form.

        if (isset($_SESSION[$session_key]['next_stage'])) {
          $form_state['stage'] = $_SESSION[$session_key]['next_stage'];
          unset($_SESSION[$session_key]['next_stage']);
        }

        if (!isset($form_state['stage'])) {
          $form_state['stage'] = 'user_info';
        }

        $form['field_terms_and_conditions'][LANGUAGE_NONE]['#required'] = FALSE;

        // Get the step bar for register process.
        $form = kms_user_get_step_header($form, $form_state);

        $stage_part = $form_state['stage'];

        // Get the prefilled values.
        $prefilled_name = (isset($_SESSION[$session_key]['user_info']['name'])) ? $_SESSION[$session_key]['user_info']['name'] : '';
        $prefilled_mail = (isset($_SESSION[$session_key]['user_info']['mail'])) ? $_SESSION[$session_key]['user_info']['mail'] : '';
        $prefilled_contact_me = (isset($_SESSION[$session_key]['user_info']['field_contact_me'][LANGUAGE_NONE][0]['value'])) ? $_SESSION[$session_key]['user_info']['field_contact_me'][LANGUAGE_NONE][0]['value'] : '';
        $prefilled_user_type = (isset($_SESSION[$session_key]['user_info']['field_user_type'][LANGUAGE_NONE][0]['tid'])) ? $_SESSION[$session_key]['user_info']['field_user_type'][LANGUAGE_NONE][0]['tid'] : '';

        switch ($stage_part) {
          case 'user_info':
            // Remove the required on terms_and_conditions field and hide it.
            $form['field_terms_and_conditions']['#prefix'] = '<div style="display: none;">';
            $form['field_terms_and_conditions']['#suffix'] = '</div>';
            $form['actions']['submit']['#value'] = t('Continue');

            if ($prefilled_name) {
              $form['account']['name']['#value'] = $prefilled_name;
            }

            if ($prefilled_mail) {
              $form['account']['mail']['#value'] = $prefilled_mail;
            }

            if ($prefilled_user_type) {
              $form['field_user_type'][LANGUAGE_NONE]['#default_value'] = $prefilled_user_type;
            }

            if ($prefilled_contact_me) {
              $form['field_contact_me']['und']['#default_value'] = $prefilled_contact_me;
            }

            // These keep poppin' up for some reason. Shut them dowm.
            $form['field_bundle_webservices_oms']['#access'] = FALSE;
            $form['field_bundle_webservices_csw']['#access'] = FALSE;
            $form['field_bundle_webservices_cswt']['#access'] = FALSE;

            // Register submit should be multistepped, so clear the submit
            // functions and replace with our own.
            $form['#submit'] = [];
            $form['#submit'][] = '_kms_user_register_step_2';
            break;
          case 'consent':


            // Oh yes. Let us unset these because they are in a fieldgroup and a
            // group so we cannot use prefix and suffix. Drupal FAPI really
            // sucks at this point, so lets unset them from the form and hope
            // it does donkey kick us in the butt later.
            unset($form['#groups']['group_master_data']);
            unset($form['#fieldgroups']['group_master_data']);

            if ($prefilled_name) {
              $form['account']['name']['#value'] = $prefilled_name;
            }

            if ($prefilled_mail) {
              $form['account']['mail']['#value'] = $prefilled_mail;
            }

            if ($prefilled_user_type) {
              $form['field_user_type'][LANGUAGE_NONE]['#default_value'] = $prefilled_user_type;
            }

            if ($prefilled_contact_me) {
              $form['field_contact_me']['und']['#default_value'] = $prefilled_contact_me;
            }


            // Get the field we want to remove and hide them.
            $fields = kms_user_register_form_remove_fields_steps();
            kms_user_form_set_access_on_fields($form, $fields, FALSE);


            $form['account']['name']['#value'] = $prefilled_name;
            $form['account']['mail']['#value'] = $prefilled_mail;
            $form['field_contact_me']['und']['#default_value'] = $prefilled_contact_me;

            // Hide services which cannot be prefixed / suffixed.
            $form['field_bundle_webservices_oms']['#access'] = FALSE;
            $form['field_bundle_webservices_csw']['#access'] = FALSE;
            $form['field_bundle_webservices_cswt']['#access'] = FALSE;

            // Load the consent page.
            $consent_page_nid = variable_get('kms_user_gdpr_consent');
            $node = node_load($consent_page_nid);

            // Add the content of the node to the form as pure markup.
            $form['consent_body'] = [
              '#prefix' => '<div id="consent-body" class="consent-body" style="height:400px; overflow: auto; overflow-y:scroll;">',
              '#markup' => $node->body[LANGUAGE_NONE][0]['value'] . '<div id="scroll-to"></div><br />',
              '#suffix' => '</div>',
            ];

            $form['consent_check'] = [
              '#type' => 'checkbox',
              '#title' => t('Ja, jeg giver Styrelsen for Dataforsyning og Effektivisering mit samtykke.'),
              '#required' => TRUE,
              '#attributes' => ['disabled' => 'disabled'],
            ];

            // Continue button
            $form['actions']['submit']['#value'] = t('Continue');
            $form['actions']['submit']['#weight'] = 2;
            $form['actions']['submit']['#attributes']['disabled'] = 'disabled';

            // Go back button.
            // Removes the validation and
            $form['actions']['goback'] = [
              '#name' => 'goback',
              '#type' => 'submit',
              '#value' => t('Go back'),
              '#weight' => 1,
              '#limit_validation_errors' => [],
              '#submit' => ['_kms_user_register_step_back_to_1'],
            ];

            // Register the submit call to the next multistep step.
            $form['#submit'] = [];
            $form['#submit'][] = '_kms_user_register_step_3';
            break;

          case 'terms':

            // Get the field we want to remove and hide them.
            unset($form['#groups']['group_master_data']);
            unset($form['#fieldgroups']['group_master_data']);

            if ($prefilled_name) {
              $form['account']['name']['#value'] = $prefilled_name;
            }

            if ($prefilled_mail) {
              $form['account']['mail']['#value'] = $prefilled_mail;
            }

            if ($prefilled_user_type) {
              $form['field_user_type'][LANGUAGE_NONE]['#default_value'] = $prefilled_user_type;
            }

            if ($prefilled_contact_me) {
              $form['field_contact_me']['und']['#default_value'] = $prefilled_contact_me;
            }

            $fields = kms_user_register_form_remove_fields_steps();
            kms_user_form_set_access_on_fields($form, $fields, FALSE);

            // Hide
            $form['field_bundle_webservices_oms']['#access'] = FALSE;
            $form['field_bundle_webservices_csw']['#access'] = FALSE;
            $form['field_bundle_webservices_cswt']['#access'] = FALSE;

            // Load the terms page.
            $terms_page_nid = variable_get('kms_user_gdpr_terms');
            $node = node_load($terms_page_nid);


            // Scroll-to is added so the user have to scroll to the end
            // before the terms can be accepted.
            $form['terms_body'] = [
              '#prefix' => '<div id="terms-body" class="terms-body" style="height:400px; overflow: auto; overflow-y:scroll;">',
              '#markup' => $node->body[LANGUAGE_NONE][0]['value'] . '<div id="scroll-to"></div><br />',
              '#suffix' => '</div>',
              '#attributes' => ['disabled' => 'disabled'],
            ];

            $form['actions']['submit']['#attributes']['disabled'] = 'disabled';

            $form['term_check'] = [
              '#type' => 'checkbox',
              '#title' => t('Jeg accepterer ovenstående rettigheder og vilkår'),
              '#required' => TRUE,
              '#attributes' => [
                'class' => ['button-submit'],
                'id' => 'term-check',
                'disabled' => 'disabled',
              ],
            ];

            // Go back button.
            // Removes the validation and
            $form['actions']['goback'] = [
              '#name' => 'goback',
              '#type' => 'submit',
              '#value' => t('Go back'),
              '#weight' => -1,
              '#limit_validation_errors' => [],
              '#submit' => ['_kms_user_register_step_back_to_2'],
            ];

            /// $form['actions']['submit']['#disabled'] = TRUE;

            // We need to store the new password.
            $form['#submit'][] = '_kms_user_insert_user_pass';

            // Store user data in Oracle.
            $form['#submit'][] = '_kms_user_submit_insert_user_oracle';

            // Store user GDPR consent.
            $form['#submit'][] = '_kms_user_insert_gdpr_consent';

            // Cleanup the session.
            $form['#submit'][] = '_kms_user_insert_cleanup_session';

            break;
        }
        break;
    }
  }

  if (in_array($form_id, ['user_pass', 'user_profile_form'])) {
    $form['#validate'][] = '_kms_user_user_pass_validate';
  }
}

function _kms_user_register_step_back_to_1(&$form, &$form_state) {
  $form_state['stage'] = 'user_info';
  $session_key = KMS_USER_LOGIN_SESSION_PREFIX . session_id();
  $_SESSION[$session_key]['next_stage'] = 'user_info';
}

function _kms_user_register_step_back_to_2(&$form, &$form_state) {
  $form_state['stage'] = 'consent';
  $session_key = KMS_USER_LOGIN_SESSION_PREFIX . session_id();
  $_SESSION[$session_key]['next_stage'] = 'consent';
}


/**
 * User register - Step 2.
 *
 * @param $form
 * @param $form_state
 */
function _kms_user_register_step_2($form, &$form_state) {
  $session_key = KMS_USER_LOGIN_SESSION_PREFIX . session_id();
  $stage_part = $form_state['stage'];

  // Set the info on the session.
  $_SESSION[$session_key][$stage_part] = $form_state['values'];

  // Set the next stage.
  $form_state['stage'] = 'consent';

  // Prevent submit.
  $form_state["rebuild"] = TRUE;
}

/**
 * User register - Step 3.
 *
 * @param $form
 * @param $form_state
 */
function _kms_user_register_step_3($form, &$form_state) {
  $session_key = KMS_USER_LOGIN_SESSION_PREFIX . session_id();
  $stage_part = $form_state['stage'];

  // Set the info on the session.
  $_SESSION[$session_key][$stage_part] = $form_state['values'];

  // Set the next stage.
  $form_state['stage'] = 'terms';

  // Prevent submit.
  $form_state["rebuild"] = TRUE;
}

function kms_user_js_settings() {
  global $user;
  // Add user settings to js.
  drupal_add_js(
    [
      'kms_user' => [
        'isSuperAdmin' => kms_user_is_superadmin($user),
        'uid' => $user->uid,
      ],
    ],
    'setting'
  );
}

function _kms_user_user_pass_validate($form, &$form_state) {
  if (empty($form_state['values']['pass'])) {
    return;
  }
  $name = trim($form_state['values']['name']);
  _kms_user_user_pass_validate_chars($form_state['values']['pass']);
  // Try to load by email.
  $users = user_load_multiple([], ['mail' => $name, 'status' => '1']);
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple([], ['name' => $name, 'status' => '1']);
    $account = reset($users);
  }
  if (strlen($form_state['values']['pass']) > KMS_USER_VALIDATE_PASS_LENGTH) {
    form_set_error(
      'pass',
      t('Password should not exceed @len characters', ['@len' => KMS_USER_VALIDATE_PASS_LENGTH])
    );
  }

  if (isset($account->uid)) {
    // Check if this account is a system-account, and if so tell the user no-no
    $roles = $account->roles;
    if (kms_user_is_system_account($roles)) {
      form_set_error('name', t('It is not possible to change or reset the password for users with the role systemaccount. Contact the site administrator to do this.'));
      drupal_goto(variable_get('kms_user_page_contact', KMS_USER_PAGE_CONTACT));
    }
  }
}

function _kms_user_user_pass_validate_chars($value) {
  preg_match_all(_kms_user_validate_pattern_get('credentials'), $value, $m);

  foreach ($m as $match) {
    if (empty($match)) {
      continue;
    }

    form_set_error(
      'pass',
      t(
        'Password contains invalid characters: %chars',
        [
          '%chars' => implode(', ', array_unique($match)),
        ]
      )
    );

    return;
  }

}

/**
 * Get a validation pattern used through application.
 *
 * @param string $type
 *   Type of pattern.
 *
 * @return string
 *   Regex pattern string.
 */
function _kms_user_validate_pattern_get($type) {
  $patterns = [
    'credentials' => '#(\/)|(\\\\)|(=)|(\?)|(\&)|(\.)|(\@)|(\s)|([æøå])#uis',
  ];

  if (!empty($patterns[$type])) {
    return $patterns[$type];
  }

  return '';
}

function kms_user_form_after_build($form_element) {
  $terms_and_conditions = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis  nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';

  $form_element[LANGUAGE_NONE]["#description"] = '<a target="_blank" href="/content/vilkår-og-betingelser" id="terms_conditions">' . t('Read here') . '</a>';
  /*
  $form_element[LANGUAGE_NONE]['#suffix'] = '<div id="terms_and_conditions" style="display:none;">' . $terms_and_conditions .'<a id="terms_and_conditions_close" class="close" href="#">close</a></div>'; */

  drupal_add_js(drupal_get_path('module', 'kms_user') . '/js/jquery.lightbox_me.js');
  drupal_add_js("jQuery(function() {
               jQuery('#terms_and_conditions_link').click(function(e) {
                 jQuery('#terms_and_conditions').lightbox_me({ centered: true });
                 e.preventDefault();
               }); });", 'inline');

  // On the user-register form users must be presented with a textfield if the user-type selected
  // via Hiearchical Select is either 'NGO' (tid=3518) or 'Forening' (tid=3520)
  drupal_add_js('jQuery(function() {
              jQuery("#hierarchical-select-0-wrapper").live("change-hierarchical-select", function() {
                    var Selected = jQuery("#edit-field-user-type-und-hierarchical-select-selects-0").val();
                    if (Selected == "3518" || Selected == "3520") {
                        jQuery("#field-user-type-info-add-more-wrapper").show(200);
                    }
                    else {
                        jQuery("#field-user-type-info-add-more-wrapper").hide(200);
                    }
              }); });', 'inline');


  return $form_element;
}

/**
 * Form element validator.
 * Checks a username for invaild characters.
 *
 * @param array $element
 *   Drupal form element.
 * @param array $form_state
 *   Drupal form state array.
 * @param array $form
 *   Drupal form array.
 *
 * @return void
 */
function _kms_user_validate_username($element, &$form_state, $form) {
  _kms_user_validate_chars(
    $element,
    _kms_user_validate_pattern_get('credentials')
  );
  _kms_user_validate_length($element, KMS_USER_VALIDATE_NAME_LENGTH);
}

/**
 * Validate allowed characters.
 *
 * @param array $element
 *   Drupal form element.
 * @param string $pattern
 *   Regex match pattern.
 */
function _kms_user_validate_chars($element, $pattern) {
  if (empty($element['#value'])) {
    return;
  }

  preg_match_all($pattern, $element['#value'], $m);

  foreach ($m as $match) {
    if (empty($match)) {
      continue;
    }

    form_error(
      $element,
      t(
        '"!element" contains invalid characters: %chars',
        [
          '!element' => $element['#title'],
          '%chars' => implode(', ', array_unique($match)),
        ]
      )
    );

    return;
  }
}

/**
 * Validate form element value length..
 *
 * @param array $element
 *   Drupal form element.
 * @param integer $length
 *   Allowed string length.
 */
function _kms_user_validate_length($element, $length) {
  if (empty($element['#value'])) {
    return;
  }

  if (strlen($element['#value']) > $length) {
    form_error(
      $element,
      t(
        '"!element" should not exceed @len characters',
        [
          '!element' => $element['#title'],
          '@len' => $length,
        ]
      )
    );
  }
}

/**
 * Expire users that are past or at their expiration date.
 *
 * @return void
 */
function _kms_user_cron_expire_users() {
  if (
    strpos(Database::getConnection()->tablePrefix(), 'simpletest') === 0
    || strpos(Database::getConnection()->tablePrefix(), 'st') === 0
  ) {
    return;
  }
  $query = "
    SELECT u.uid FROM {field_data_field_expire_date} ed
    LEFT JOIN {users} u ON u.uid = ed.entity_id
    WHERE
      ed.field_expire_date_value <= :time
    AND
      u.status = 1
  ";
  $result = db_query($query, [':time' => time()]);

  foreach ($result as $row) {
    if (empty($row->uid)) {
      continue;
    }
    $user = user_load($row->uid);
    if (empty($user)) {
      continue;
    }
    $user_w = entity_metadata_wrapper('user', $user);
    $user_w->status = 0;
    $user_w->save();
    // Deactivate Oracle user.
    kms_user_smuser_deactivate($user);
    watchdog(
      'kms_user',
      t(
        'User: %user has been deactivated',
        ['%user' => $user_w->name->value()]
      )
    );
  }

}

function _kms_user_update_timestamp($form, &$form_state) {
  // Update time stamp.
  $time = time();
  $user_updated = db_update('field_data_field_updated')
    ->fields(['field_updated_value' => $time])
    ->condition('entity_id', $form['#user']->uid, '=')
    ->execute();
  $user_updated_rev = db_update('field_revision_field_updated')
    ->fields(['field_updated_value' => $time])
    ->condition('entity_id', $form['#user']->uid, '=')
    ->execute();
}

function _kms_user_submit_update_user_pass($form, &$form_state) {
  $old_pass = '';
  if (!empty($form_state['user']->current_pass)) {
    $old_pass = $form_state['user']->current_pass;
  }
  $new_pass = $form_state['user']->pass;

  if (!empty($new_pass) && ($new_pass !== $old_pass)) {
    _kms_user_insert_user_pass($form, $form_state);
  }
}

function _kms_user_insert_user_pass($form, &$form_state) {
  // The password has changed and we need to store the new password
  // But we first need to check if the user is already registered
  $new_pass = $form_state['user']->pass;

  if ($new_pass && !kms_user_password_is_encrypted($new_pass)) {
    $pass_exists = db_select('field_data_field_pass_clear', 'fpc')
      ->fields('fpc', ['field_pass_clear_value'])
      ->condition('entity_id', $form['#user']->uid, '=')
      ->execute()
      ->fetchAssoc();
    if (!empty($pass_exists)) {
      // The password does exist in the target-table and we update that password
      $pass_updated = db_update('field_data_field_pass_clear')
        ->fields(['field_pass_clear_value' => $new_pass])
        ->condition('entity_id', $form['#user']->uid, '=')
        ->execute();
    }
    else {
      // The password does not exist in the target-table and we must insert it
      db_insert('field_data_field_pass_clear')
        ->fields([
          'entity_type' => 'user',
          'bundle' => 'user',
          'deleted' => 0,
          'entity_id' => $form['#user']->uid,
          'revision_id' => $form['#user']->uid,
          'language' => LANGUAGE_NONE,
          'delta' => 0,
          'field_pass_clear_value' => $new_pass,
          'field_pass_clear_format' => '',
        ])
        ->execute();
    }
  }
}

/**
 * Cleanup
 *
 * @param $form
 * @param $form_state
 */
function _kms_user_insert_cleanup_session($form, &$form_state) {
  $session_key = KMS_USER_LOGIN_SESSION_PREFIX . session_id();
  unset($_SESSION[$session_key]);
}


/**
 * Register when a user accepts GDPR and in which revisions.
 *
 * @param $form
 * @param $form_state
 */
function _kms_user_insert_gdpr_consent($form, &$form_state) {


  $account = (object) $form_state['values'];

  // Early returns.
  if (empty($account->uid)) {
    return;
  }

  $consent_node = node_load(KMS_USER_NODE_CONSENT_PAGE_NID);
  if (!$consent_node) {
    return;
  }

  $terms_node = node_load(KMS_USER_NODE_TERMS_PAGE_NID);
  if (!$terms_node) {
    return;
  }

  // Setup fields and values.
  $data = [
    'uid' => $account->uid,
    'consent_nid' => $consent_node->nid,
    'consent_vid' => $consent_node->vid,
    'terms_nid' => $terms_node->nid,
    'terms_vid' => $terms_node->vid,
    'timestamp' => time(),
  ];

  $nid = db_insert('user_gdpr_consents')
    ->fields($data)
    ->execute();
}


/**
 * Is the user a system account.
 *
 * @param array $roles
 *
 * @return boolean
 */
function kms_user_is_system_account($roles) {
  return in_array(KMS_USER_ROLES_SYSTEM_ACCOUNT_ID, array_keys($roles));
}

/**
 * Is user a super admin (drupal admin or superuser).
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return boolean
 */
function kms_user_is_superadmin($user) {
  return (
    $user->uid == 1
    || in_array(KMS_USER_ROLES_SUPERUSER_ID, array_keys($user->roles))
  );
}

/**
 * Render the user name of a user object.
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return string
 *   HTML.
 */
function kms_user_render_username($user) {
  $name = $user->name;
  $label = t('Username');
  return <<<EOD
    <div class="form-item" id="username-wrapper">
      <label for="username">$label</label>
      <em id="username">$name</em>
  </div>
EOD;
}

/**
 * Submit handler that creates oci queue jobs.
 *
 * @param array $form
 * @param array $form_state
 */
function _kms_user_submit_insert_user_oracle($form, &$form_state) {

  $account = (object) $form_state['values'];;

  // We do not touch oracle anymore.
  return;

  if (!module_exists('kms_oci_queue')) {
    return;
  }
  global $user;
  $account = (object) $form_state['values'];

  if (empty($account->uid)) {
    return;
  }

  $perm_options = ['key_prefix' => FALSE, 'flattened' => TRUE];
  // If an account is being created by an logged in user then user bundles
  // and separate perms.
  if ($user->uid) {
    $perms = [];
    foreach (kms_permissions_get_bids_by_uid($account->uid) as $bid) {
      _kms_permissions_get_permissions_by_bid($bid, $perms, $perm_options);
    }
    _kms_permissions_get_separate_perms_by_uid($account->uid, $perms, $perm_options);
  }
  // Otherwise it is a simple register form
  // with no separate permissions and bundle options.
  else {
    $perms = [];
    foreach (_kms_permissions_get_default_bundles() as $def_bid) {
      _kms_permissions_get_permissions_by_bid(
        $def_bid,
        $perms,
        $perm_options
      );
    }
  }

  $jobs = [];
  // $data = _kms_oci_queue_create_insert_smuser_data($account);

  // Write user data.
  //  kms_oci_queue_job_action_user_insert(
  //    $jobs,
  //    $data,
  //    'Inserting user: @user_details.',
  //    array('@user_details' => json_encode($data['user']))
  //  );

  // Handle user permissions.
  //  if (!empty($perms['services']) || !empty($perms['applications'])) {
  //    $perms_diff = array(
  //      'bundles' => KmsPermsDiff::defaultDiff(),
  //      'separate' => KmsPermsDiff::defaultDiff(),
  //    );
  //    if (!empty($perms['services'])) {
  //      $perms_diff['bundles']['services']['add'] =
  //        $perms_diff['separate']['services']['add'] =
  //          $perms['services'];
  //    }
  //    if (!empty($perms['applications'])) {
  //      $perms_diff['bundles']['applications']['add'] =
  //        $perms_diff['separate']['applications']['add'] =
  //          $perms['applications'];
  //    }
  //    kms_oci_queue_job_action_perms_attach(
  //      $jobs,
  //      $account->uid,
  //      $account,
  //      $perms_diff,
  //      'insert',
  //      '',
  //      array('@user' => $account->name)
  //    );
  //  }

  //  // Do we have any jobs to be done then group them.
  //  if (!empty($jobs)) {
  //    $job_group = new KmsOciQueueJobGroup();
  //    $job_group->add($jobs);
  //  }

}

/**
 * Submit handler that creates oci queue jobs.
 *
 * @param array $form
 * @param array $form_state
 */
function _kms_user_submit_update_user_oracle($form, &$form_state) {
  // Update Oracle tables if Oracle connection is available.
  if (!module_exists('kms_oci')) {
    return;
  }

  // We do not touch oracle anymore.
  return;

  $user_new = (object) $form_state['values'];
  $user_original = $form['#user'];
  $w_new = entity_metadata_wrapper('user', $user_new);
  $w_original = entity_metadata_wrapper('user', $user_original);
  $perms_diff = _kms_user_calculate_permissions_diff($w_new, $w_original);
  $data = _kms_user_user_update_oci_queue_prepare_data($user_new, $user_original);
  $userids = $data['userids'];
  $user_data = $data['user_data'];
  $data_hash = md5(json_encode($user_data));

  $jobs = [];
  // If user data has changed create a job for it.
  if ($data_hash != $user_original->data['kms_oci_queue_user_data_hash']) {
    kms_oci_queue_job_action_user_update(
      $jobs,
      $user_data,
      'Updating user: @user_details.',
      ['@user_details' => json_encode($user_data['user'])]
    );
  }

  // If permissions has changed create jobs for them. Otherwise return.
  if (
    !kmsPermsDiff::diffIsEmpty($perms_diff['bundles']['services'])
    || !kmsPermsDiff::diffIsEmpty($perms_diff['bundles']['applications'])
    || !kmsPermsDiff::diffIsEmpty($perms_diff['separate']['services'])
    || !kmsPermsDiff::diffIsEmpty($perms_diff['separate']['applications'])
  ) {
    // Handle user permissions.
    kms_oci_queue_job_action_perms_attach(
      $jobs,
      $userids['old'],
      $user_original,
      $perms_diff,
      'update',
      '',
      ['@user' => $user_new->name]
    );
    // If the user has any subuser clone permissions to them.
    $subusers = subuser_load_all($user_original);
    if (!empty($subusers)) {
      kms_oci_queue_job_action_clone_user_perms($jobs, $user_new, $subusers);
    }
  }

  // Do we have any jobs to be done then group them.
  if (!empty($jobs)) {
    $job_group = new KmsOciQueueJobGroup();
    $job_group->add($jobs);
  }

}

/**
 * Return default user data.
 *
 * @param object $account
 *   Drupal user object.
 *
 * @return array $data
 *   Default user data.
 */
function _kms_user_oracle_default_user_data($account) {
  $data = [];
  $data['user'] = [
    'userid' => $account->uid,
    'name' => $account->name,
    'emailaddress' => $account->mail,
  ];

  if (!empty($account->pass) && !kms_user_password_is_encrypted($account->pass)) {
    $data['user']['password'] = $account->pass;
  }

  $data['user_extra'] = [
    'duid' => $account->uid,
    'userid' => $account->uid,
  ];

  if (!empty($data['user'])) {
    $data['user'] += [
      'disabled' => '0',
      'firstname' => '',
      'lastname' => '',
      'telephonenumber' => '',
      'debitorno' => '',
    ];
  }
  $data['user_extra'] += [
    'duid' => $account->uid,
    'userid' => $account->uid,
    'usertype' => '',
    'usertype_info' => '',
    'receive_newsletter' => '0',
    'accept_terms' => '1',
    'contact_me' => '0',
  ];

  return $data;
}

/**
 * Detect if password has been encrypted.
 *
 * @param string $pass
 *   Drupal password.
 *
 * @return boolean
 */
function kms_user_password_is_encrypted($pass) {
  return (bool) preg_match('/^\$S\$[0-9a-fA-Z.\/]{52}$/i', $pass);
}

/**
 * Load a Oracle smuser object
 *
 * @param integer $uid
 *   Drupal user id.
 *
 * @return object
 */
function kms_user_smuser_load($uid) {
  $smusers = &drupal_static(__FUNCTION__);

  if (empty($smusers)) {
    $smusers = [];
  }

  if (empty($smusers[$uid])) {
    $query = "
    SELECT * FROM smuser_extra ue
    LEFT JOIN smuser u on u.userid = ue.userid
    WHERE ue.duid = :duid";
    $result = kms_oci_select_one($query, [':duid' => "$uid"]);
    $smusers[$uid] = new stdClass();
    if ($result) {
      array_walk($result, function ($v, $k) use (&$smusers, $uid) {
        $prop = strtolower($k);
        $smusers[$uid]->$prop = $v;
      });
    }

  }

  return $smusers[$uid];
}

/**
 * Delete smuser from Oracle db.
 *
 * @param mixed $user
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return void
 */
function kms_user_smuser_delete($user) {
  if (is_int($user)) {
    $user = user_load($user);
  }
  $kms_userid = kms_user_get_userid($user);
  if (!empty($kms_userid)) {
    // Delete all oracle rows belonging to user.
    $jobs = [];
    $jobs[] = KmsOciQueueJob::create([
      'action' => KMS_OCI_QUEUE_ACTION_USER_DELETE,
      'action_details' => format_string(
        'Deleting user: @user.',
        [
          '@user' => $user->name,
        ]
      ),
      'params' => [
        'kms_id' => $kms_userid,
      ],
    ]);
    $jobs[] = KmsOciQueueJob::create([
      'action' => KMS_OCI_QUEUE_ACTION_USER_DELETE,
      'action_details' => format_string(
        'Deleting user: @user.',
        [
          '@user' => $user->name,
        ]
      ),
      'params' => [
        'kms_id' => $kms_userid,
      ],
    ], 'kms_permissions');
    $job_group = new KmsOciQueueJobGroup();
    $job_group->add($jobs);
  }
}

/**
 * Implements hook_user_delete().
 */
function kms_user_user_delete($user) {

  // Delete subusers if present.
  $subusers = subuser_load_all($user);
  if (!empty($subusers)) {
    drupal_set_message(
      t(
        '@count subusers were deleted.',
        ['@count' => count($subusers)]
      ),
      'status',
      FALSE
    );
    // Delete subusers in oracle.
    foreach ($subusers as $subuser_uid) {
      kms_user_smuser_delete($subuser_uid);
    }
    // Delete subusers locally.
    user_delete_multiple($subusers);
  }

  // Delete Oracle user data.
  kms_user_smuser_delete($user);

}

/**
 * Get kms user id from user.
 * If kms_user_id is specified use that otherwise user drupal user id.
 *
 * @param object $user
 *   Drupal user object.
 *
 * @return string $userid.
 */
function kms_user_get_userid($user) {
  $userid = $user->uid;
  if (!empty($user->field_kms_user_id[LANGUAGE_NONE][0]['value'])) {
    $userid = $user->field_kms_user_id[LANGUAGE_NONE][0]['value'];
  }
  return (string) $userid;
}

/**
 * Deactivate Oracle smuser.
 *
 * @param mixed $account
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return void
 */
function kms_user_smuser_deactivate($account) {
  if (is_int($account)) {
    $account = user_load($account);
  }
  $data = _kms_oci_queue_create_update_smuser_data($account);
  unset($data['user_extra']);
  $data['user']['disabled'] = 1;
  $data['user']['userid'] = kms_user_get_userid($account);

  KmsOciQueueJob::create([
    'action' => KMS_OCI_QUEUE_ACTION_USER_SAVE,
    'action_details' => format_string(
      'Deactivating user: @user_details.',
      [
        '@user_details' => json_encode($data),
      ]
    ),
    'params' => [
      [$data['user'], 'smuser', FALSE],
    ],
  ]);

}

/**
 * Check if Oracle smuser exists
 *
 * @param mixed $user
 *   object/integer. Either Drupal user object or Drupal user id.
 *
 * @return boolean
 */
function kms_user_smuser_exists($user) {
  if (is_int($user)) {
    $user = user_load($user);
  }

  if (!kms_oci_extension_is_loaded()) {
    return FALSE;
  }

  $oci = kms_oci_get_conn();
  if (!$oci) {
    return FALSE;
  }

  $stid = oci_parse(
    $oci,
    sprintf("SELECT * FROM smuser WHERE name = '%s'", $user->name)
  );

  oci_execute($stid);

  $row = oci_fetch_array($stid);

  return !empty($row);

}

/**
 * Implementation of hook_action_info().
 */
function kms_user_action_info() {
  return [
    'kms_user_vbo_add_access_bundles' => [
      'label' => t('Add Access Bundles'),
      'type' => 'user',
      'configurable' => TRUE,
    ],
    'kms_user_vbo_clear_access_bundles' => [
      'label' => t('Clear Access Bundles'),
      'type' => 'user',
      'configurable' => FALSE,
    ],
  ];
}

/**
 * VBO add access bundle form.
 *
 * @param array $context
 *   VBO context.
 *
 * @return array
 *   Drupal form array.
 */
function kms_user_vbo_add_access_bundles_form($context) {
  $form['access_bundle'] = [
    '#type' => 'checkboxes',
    '#title' => t('Choose access bundles'),
    '#description' => t('Select one or more access bundles that the users can access.'),
    '#options' => kms_user_vbo_access_bundle_options(),
  ];

  return $form;
}

/**
 * VBO add access bundle form submit.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 *
 * @return array
 */
function kms_user_vbo_add_access_bundles_submit($form, $form_state) {
  return [
    'access_bundle' => array_filter($form_state['values']['access_bundle']),
  ];
}

/**
 * VBO add access bundles operations.
 *
 * @param object $account
 *   Drupal user object.
 * @param array $context
 *   VBO context.
 *
 * @return void
 */
function kms_user_vbo_add_access_bundles(&$account, $context = []) {
  if (!kms_subuser_is_subuser($account)) {
    $uid = $context['user']->uid;
    // If it is the first user make sure that the uids variable is deleted.
    if ($context['progress']['current'] == 1) {
      variable_del('kms_user_vbo_access_bundle_add_uids');
    }
    // Get processed uids.
    $uids = variable_get('kms_user_vbo_access_bundle_add_uids', []);
    // Get user permissions.
    $user_perms = _kms_permissions_get_all_permissions_by_uid(
      $uid,
      ['key_prefix' => FALSE, 'flattened' => TRUE]
    );

    $user_diff = KmsPermsDiff::defaultDiff();
    if (!empty($user_perms['services'])) {
      $user_diff['services']['add'] = $user_perms['services'];
    }
    if (!empty($user_perms['applications'])) {
      $user_diff['applications']['add'] = $user_perms['applications'];
    }
    // Store user permissions as a diff in the diff table.
    KmsPermsDiffDb::save($uid, $user_diff, 'user');
    // Add current uid to uids variable.
    $uids[] = $uid;
    variable_set('kms_user_vbo_access_bundle_add_uids', $uids);
    // Do the user permissions update on the Drupal side.
    kms_user_access_bundle_administer('add', $account, $context['access_bundle']);
  }
  // If we are finished use the finished callback
  // that initiates a kms oci queue job.
  if ($context['progress']['current'] == $context['progress']['total']) {
    kms_user_vbo_access_bundle_finished('add', $context);
  }
}

/**
 * Clear all access bundles from a user.
 *
 * @param object $account
 *   Drupal user object.
 * @param array $context
 *   VBO context.
 *
 * @return void
 */
function kms_user_vbo_clear_access_bundles(&$account, $context = []) {
  // If it is the first user make sure that the uids variable is deleted.
  if ($context['progress']['current'] == 1) {
    variable_del('kms_user_vbo_access_bundle_clear_uids');
  }
  // Get processed uids.
  $uids = variable_get('kms_user_vbo_access_bundle_clear_uids', []);
  // Add current uid to uids variable.
  $uids[] = $context['user']->uid;
  variable_set('kms_user_vbo_access_bundle_clear_uids', $uids);
  // Do the user permissions update on the Drupal side.
  kms_user_access_bundle_administer('clear', $account);
  // If we are finished use the finished callback
  // that initiates a kms oci queue job.
  if ($context['progress']['current'] == $context['progress']['total']) {
    kms_user_vbo_access_bundle_finished('clear', $context);
  }
}

/**
 * Handles actions being done when VBO batch is finished.
 *
 * @param string $op
 *   Action.
 * @param array $context
 *   VBO context array.
 */
function kms_user_vbo_access_bundle_finished($op, $context) {
  $uids = variable_get(
    sprintf('kms_user_vbo_access_bundle_%s_uids', $op),
    []
  );
  if (empty($uids)) {
    return;
  }
  $user_count = count($uids);

  switch ($op) {
    case 'add':
      $bids = $context['access_bundle'];
      // If no bids chosen do nothing.
      if (empty($bids)) {
        return;
      }
      // Create kms oci queue job that attaches bundle permissions to users.
      $jobs = [];
      $job_group = new KmsOciQueueJobGroup();
      kms_oci_queue_job_action_bundles_attach(
        $jobs,
        $bids,
        $uids,
        'VBO: Bundles (@bids) added to users. Affects @count users.',
        [
          '@bids' => implode(', ', $bids),
          '@count' => $user_count,
        ]
      );
      if ($user_count < 300) {
        $job_group->add($jobs);
      }
      break;

    case 'clear':
      // Kms oci queue job. Remove all bundles except default
      // and keep separate permissions.
      $jobs = [];
      $job_group = new KmsOciQueueJobGroup();
      kms_oci_queue_job_action_remove_all_bundles(
        $jobs,
        $uids,
        'VBO: All bundles (except default) are cleared from users. Affects @count users.',
        ['@count' => $user_count]
      );
      $job_group->add($jobs);
      break;
  }
}

/**
 * Get access bundle form options.
 *
 * @return array
 *   nid/title.
 */
function kms_user_vbo_access_bundle_options() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'access_bundle')
    ->propertyCondition('status', 1)
    ->addMetaData('account', user_load(1));

  $result = $query->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);
  $options = [];
  $def_bundles = _kms_permissions_get_default_bundles();
  array_walk($nodes, function ($node, $nid) use (&$options, $def_bundles) {
    // Ignore default bundles;
    if (in_array($nid, $def_bundles)) {
      return;
    }
    $options[$nid] = $node->title;
  });
  return $options;

}

/**
 * Administer access bundles for an account.
 *
 * @param string $op
 *   Which task should be performed?
 * @param object $account
 *   Drupal user object
 * @param array $bundles
 *   Bundles to be added (optional). If $op = clear then it is not needed to be
 *   set.
 *
 * @return void
 */
function kms_user_access_bundle_administer($op, $account, $bundles = []) {
  if (empty($account)) {
    return;
  }
  $def_bundles = _kms_permissions_get_default_bundles();
  $current_bundles = array_combine($def_bundles, $def_bundles);

  $w = entity_metadata_wrapper('user', $account);
  $w_bundles = array_filter($w->field_access_bundles->value());
  switch ($op) {
    case 'add':
      array_walk($w_bundles, function ($node) use (&$current_bundles) {
        $current_bundles[$node->nid] = $node->nid;
      });
      $bundles = array_merge($current_bundles, $bundles);
      break;
    case 'clear':
      $bundles = $current_bundles;
      break;
  }

  $w->field_access_bundles->set($bundles);
  $w->save();
}

/**
 * Load people admin views and return it as JSON.
 */
function kms_user_ajax_refresh_admin_views_people() {
  $view = views_get_view(KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER);
  $view->set_display(KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER);
  $view->is_cacheable = FALSE;
  $view->execute();
  drupal_json_output(['view' => $view->render()]);
  exit;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_user_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  $view = $form_state['view'];
  // Due to a reset bug that concerns the Drupal 7.17 core this is needed.
  // Atodo: Remove when Drupal has been upgraded.
  if (
    $view->name == KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER
    && $view->current_display == KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER
  ) {
    $form_state['redirect'] = 'admin/people';
    $form['#action'] = '/admin/people';
  }

}


/**
 * Ajax render function.
 * Renders relevant ctools modal json data.
 *
 * @param boolean $js
 *   Is the client using javascript?
 *
 * @return string
 *   JSON.
 */
function kms_user_filter_admin_views_people_perms($js = FALSE) {
  if (!$js) {
    return drupal_get_form('kms_user_filter_admin_views_people_perms_form');
  }
  // We do not want messages shown in our popup.
  drupal_get_messages();
  // Include relevant ctools code.
  ctools_include('modal');
  ctools_include('ajax');
  // Add necessary form_state data.
  $form_state = [
    'ajax' => TRUE,
    'build_info' => [
      'args' => [
        'query' => drupal_get_query_parameters(),
      ],
    ],
  ];
  // Create form output.
  $form_state['title'] = t('Select permissions');
  $output = ctools_modal_form_wrapper('kms_user_filter_admin_views_people_perms_form', $form_state);
  // If form is executed remove modal popup.

  if (!empty($form_state['executed'])) {
    $output = [];
    // Maybe use session in the future?
    //    $_SESSION['views']['admin_views_user']['kms_user_filter']['uids'] = $uids;

    // Load view filtered by uids.
    $view = views_get_view(KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER);
    $view->set_display(KMS_USER_VIEW_DISPLAY_ADMIN_VIEWS_USER);
    $view->is_cacheable = FALSE;

    // Set uids depending on filter status.
    $filter = $form_state['filter'];
    $service_count = $in_default_bundle_count = 0;
    foreach ($filter as $service_group) {
      $service_count += count($service_group[LANGUAGE_NONE]);
      foreach ($service_group[LANGUAGE_NONE] as $sid) {
        if (kms_permissions_is_service_in_default_bundle($sid)) {
          $in_default_bundle_count++;
        }
      }
    }
    // If all of the choosen services are in a default bundle select all users.
    if ($in_default_bundle_count == $service_count) {
      $filter = 'all';
    }
    $uids = $args = [];
    // If the filter is not set to all users get uids.
    if ($filter != 'all') {
      // Get all user ids from chosen services.
      $uids = _kms_user_get_users_from_services($filter);
      // If no users are presnet create an array with a very high uid so that the views get no matches.
      $uids = !empty($uids) ? $uids : [99999999999];
    }
    // If uids have been found then set views argument(s).
    if (!empty($uids)) {
      $uids_all = _kms_permissions_get_all_users();
      // If filter uid count is bigger than half of all user count
      // then filter excluding uids rather than including uids.
      if (count($uids) > (count($uids_all) / 2)) {
        $args = [
          'all',
          implode('+', array_diff($uids_all, $uids)),
        ];
      }
      else {
        // Otherwise just narrow result down with fuilter uids.
        $args = [implode('+', $uids)];
      }
    }
    // Set uid argument(s).
    $view->set_arguments($args);
    // Render view.
    $output[] = ajax_command_html('.view-admin-views-user', $view->render());

    // Get all available services.
    $service_list = kms_permissions_get_service_list();
    // Create services array from chosen services.
    $services = [];
    foreach ($form_state['filter'] as $field_sids) {
      $field_sids = $field_sids[LANGUAGE_NONE];
      array_walk($field_sids, function ($sid) use ($service_list, &$services) {
        $entry = $service_list[$sid];
        $services[$entry['SERVICEID']] = sprintf("%s (%s)", $entry['SERVICENAME'], $entry['TYPENAME']);
      });
    }
    // Render array that shows what is filtering the user list.
    $filter_status = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [],
      ],
      'span-services' => [
        '#theme' => 'html_tag',
        '#tag' => 'span',
        '#value' => t(
          'Users filtered by services: %services',
          ['%services' => implode(', ', $services)]
        ),
      ],
    ];
    // Js commands.
    $output[] = ajax_command_replace('a.ctools-use-modal-processed', render($filter_status));
    $output[] = ctools_modal_command_dismiss();
  }
  // Render output.
  print ajax_render($output);
  exit;
}

/**
 * Drupal form function.
 * Used for popup filtering of permissions in people admin view.
 */
function kms_user_filter_admin_views_people_perms_form($form, &$form_state) {
  $form = &drupal_static(__FUNCTION__);
  if (!isset($form)) {

    if ($cache = cache_get(KMS_USER_CACHE_ID_ADMIN_VIEWS_PEOPLE_PERMS_FORM)) {
      $form = $cache->data;
    }
    else {
      module_load_include('inc', 'user', 'user.pages');
      $user_form = drupal_get_form('user_profile_form');
      $ws_fields = _kms_permissions_webservice_fields();


      $form = [];
      array_walk($ws_fields, function ($ws_name) use ($user_form, &$form) {
        $form[$ws_name] = $user_form[$ws_name];
      });


      $form['submit'] = [
        '#type' => 'submit',
        '#value' => t('Filter', [], ['context' => 'kms_user']),
        '#weight' => 500,
      ];

      cache_set(KMS_USER_CACHE_ID_ADMIN_VIEWS_PEOPLE_PERMS_FORM, $form, 'cache');
    }
  }

  return $form;
}

/**
 * Form used for filtering user list by services.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 */
function kms_user_filter_admin_views_people_perms_form_submit($form, &$form_state) {
  $form_state['filter'] = array_intersect_key(
    $_REQUEST,
    array_flip(_kms_permissions_webservice_fields())
  );
}

/**
 * @param array $services
 *  Ex.: array('field_bundle_webservices_geo' => array(1, 4218, 4458),
 *   'field_bundle_webservices_wms' => array(1614))
 *
 * @return array
 */
function _kms_user_get_users_from_services($services, $column_name = NULL) {
  // Merge user arrays function.
  $merge_uids = function ($uids_n_sids, &$users) {
    foreach ($uids_n_sids as $uid => $sids) {
      if (empty($users[$uid])) {
        $users[$uid] = $sids;
      }
      else {
        $sids = array_merge($users[$uid], $sids);
        $users[$uid] = array_unique($sids);
      }
    }
  };
  // The end result users array.
  $users = [];
  // Users with separate services.
  $merge_uids(_kms_permissions_get_uids_by_separate_services($services, $column_name), $users);
  // Users with permissions in bundles.
  $merge_uids(_kms_permissions_get_uids_by_bundle_services($services, $column_name), $users);
  // Find total number of services.
  $service_count = 0;
  array_walk($services, function ($sids) use (&$service_count) {
    $sids = $sids[LANGUAGE_NONE];
    $service_count += count($sids);
  });
  // Filter all users with right amount of services compared with $service_count.
  $users = array_filter($users, function ($sids) use ($service_count) {
    return count($sids) == $service_count;
  });

  return array_keys($users);
}

/**
 * Prepare user data for oci queue job creation.
 *
 * @param $account
 * @param $user
 *
 * @return array
 */
function _kms_user_user_update_oci_queue_prepare_data($account, $user) {
  $user_data = _kms_oci_queue_create_update_smuser_data($account, $user);
  $userids['old'] = kms_user_get_userid($user);
  $userids['new'] = kms_user_get_userid($account);
  $user_data['user']['userid'] = $user_data['user_extra']['userid'] = $userids['new'];
  return [
    'user_data' => $user_data,
    'userids' => $userids,
  ];
}

function _kms_user_calculate_permissions_diff(EntityMetadataWrapper $w_new, EntityMetadataWrapper $w_original) {
  $diff_bundle_perms = KmsPermsDiff::diffBundlePerms($w_original, $w_new);
  $bundle_diff = [];
  foreach (array_keys($diff_bundle_perms) as $perm_type) {
    // Make sure that 'remove' and 'add' are unique compared to each other.
    // 1. We don't want to remove items that also are being added.
    // 2. We don't want to add items that already is attached to user.
    $add_remove_dupes = array_intersect($diff_bundle_perms[$perm_type]['add'], $diff_bundle_perms[$perm_type]['remove']);
    $bundle_diff[$perm_type]['remove'] = array_diff($diff_bundle_perms[$perm_type]['remove'], $add_remove_dupes);
    $bundle_diff[$perm_type]['add'] = array_diff($diff_bundle_perms[$perm_type]['add'], $add_remove_dupes);
  }

  return [
    'bundles' => $bundle_diff,
    'separate' => KmsPermsDiff::diffSeparatePerms($w_original, $w_new),
  ];
}

/**
 * Implements hook_user_views_bulk_operations_form_alter().
 */
function kms_user_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if (
    $vbo->view->name == KMS_USER_VIEW_NAME_ADMIN_VIEWS_USER
    && $form_state['step'] == 'views_form_views_form'
  ) {
    // Alter the first step of the VBO form (the selection page).
    ctools_include('modal');
    ctools_modal_add_js();

    $form['popup_link'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [],
      ],
      'popup_link' => [
        '#theme' => 'link',
        '#text' => '<button id="kms-user-trigger-permission-filter">' . t('Filter current list by permissions') . '</button>',
        '#path' => 'admin/kms-user/nojs/filter-admin-views-people-perms',
        '#options' => [
          'attributes' => ['class' => 'ctools-use-modal'],
          'html' => TRUE,
          'query' => drupal_get_query_parameters(),
        ],
      ],
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_user_form_user_register_form_alter(&$form, &$form_state) {
  //Add validation for character length.
  $form['#validate'][] = 'kms_user_username_length_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kms_user_form_user_profile_form_alter(&$form, &$form_state) {
  //Add validation for character length.
  $form['#validate'][] = 'kms_user_username_length_validate';
}

/**
 * Implements validation callback on register form.
 */
function kms_user_username_length_validate($form, &$form_state) {
  if (
    (!empty($form_state['values']['name']) && strlen($form_state['values']['name']) > 32)
    || (!empty($form_state['values']['pass']) && strlen($form_state['values']['pass']) > 32)
  ) {
    form_set_error('name', t('Username and Password should not exceed 32 characters'));
  }
}


/**
 * Implements hook_views_api()
 */
function kms_user_views_api() {
  return [
    'api' => 3,
  ];
}

/**
 * Implementation of hook_views_handlers() to register all of the basic handlers
 * views uses.
 */
function kms_user_views_handlers() {
  return [
    'info' => [
      // path to handler files
      'path' => drupal_get_path('module', 'kms_user') . '/includes/handlers',
    ],
    'handlers' => [
      // register our custom filter, with the class/file name and parent class
      'kms_user_handler_filter_exposed_services' => [
        'parent' => 'views_handler_filter',
      ],
    ],
  ];
}

/**
 * Return webservice json array
 *
 * @param string $webid
 *        contains webservice type
 *
 * @return json array
 */
function _kms_user_return_websevice_list($webid) {
  //get all available services
  $service_list = _kms_user_return_merged_service_list_array();
  //Create new array with current service list type
  $current_sev_list = [];
  foreach ($service_list as $key => $value) {
    if ($key == $webid) {
      foreach ($value as $key2 => $value2) {
        $current_sev_list[$key2] = $value2;
      }
    }
  }

  drupal_json_output($current_sev_list);
  exit();
}


function _kms_user_usort_by_name($a, $b) {
  return $a['sort'] - $b['sort'];
}

/**
 * Return webservice list json array
 *
 * @return array $new_array
 *         containing all available webservice names and ID's
 */
function _kms_user_return_websevice_list_all() {
  $array_list = _kms_user_return_merged_service_list_array();

  $new_array = [];
  $custom_services = ['ftp', 'applications', 'predefined_datacollections'];
  $prefix = '';
  foreach ($array_list as $key => $value) {
    if (in_array($key, $custom_services)) {
      $prefix = $key . '_';
    }

    foreach ($value as $key2 => $value2) {
      if (isset($value2['name'])) {
        $new_array[$prefix . $key2] = $value2['name'];
      }
    }
  }
  return $new_array;
}

/**
 * Return webservice list array merged together
 *
 * @return array $new_array
 *         containing all available webservice names and ID's
 */
function _kms_user_return_merged_service_list_array() {
  $service_list = kms_permissions_get_service_list();
  $service_list_aplication = kms_permissions_get_application_list();
  $service_list_ftp = _kms_permissions_ftp_return_ftp_permissions_all();
  $service_list_predefined = _kms_user_return_predefined_datacollections_permissions_all();

  //Create new array with current service list type
  $current_sev_list = [];
  foreach ($service_list as $key => $value) {
    $current_sev_list[$value['TYPENAME']][$value['SERVICEID']]['name'] = $value['SERVICENAME'];
    $current_sev_list[$value['TYPENAME']][$value['SERVICEID']]['id'] = $value['SERVICEID'];
  }

  foreach ($service_list_aplication as $key => $value) {
    $current_sev_list['applications'][$value['GROUPID']]['name'] = $value['NAME'];
    $current_sev_list['applications'][$value['GROUPID']]['id'] = $value['GROUPID'];
  }

  foreach ($service_list_ftp as $key => $value) {
    $current_sev_list['ftp'][$value->fid]['name'] = $value->name;
    $current_sev_list['ftp'][$value->fid]['id'] = $value->fid;
  }

  foreach ($service_list_predefined as $key => $value) {
    $current_sev_list['predefined_datacollections'][$value->nid]['name'] = $value->title;
    $current_sev_list['predefined_datacollections'][$value->nid]['id'] = $value->nid;
  }

  return $current_sev_list;
}


/**
 * Return predifened datacollections webservice array
 *
 * @return array
 */
function _kms_user_return_predefined_datacollections_permissions_all() {
  return db_query("SELECT nid, title FROM {node} WHERE type = 'product_display'")->fetchAll();
}

/**
 * Implements hook_mail().
 */
function kms_user_mail($key, &$message, $params) {
  // Setup lang and params.
  $language = $message['language'];
  $variables = [
    'user' => $params['account'],
    'checksum' => $params['checksum'],
  ];

  $message['subject'] .= _kms_user_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = _kms_user_mail_text($key . '_body', $language, $variables);
}

/**
 * Create text string for the emails.
 *
 * @param $key
 * @param null $language
 * @param array $variables
 * @param bool $replace
 *
 * @return mixed|null|string
 */
function _kms_user_mail_text($key, $language = NULL, $variables = [], $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  switch ($key) {
    case 'register_no_approval_required_subject':
      $text = t('Account details for [user:name] at [site:name]', [], ['langcode' => $langcode]);
      break;
    case 'register_no_approval_required_body':
      $text = t("[user:name],

Thank you for registering at [site:name]. You may now log in by clicking this link or copying and pasting it to your browser:

[user:one-time-login-url]

This link can only be used once to log in and will lead you to a page where you can set your password.

After setting your password, you will be able to log in at [site:login-url] in the future using:

username: [user:name]
password: Your password

--  [site:name] team", [], ['langcode' => $langcode]);
      break;
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables,
      [
        'language' => $language,
        'callback' => 'kms_user_mail_tokens',
        'sanitize' => FALSE,
        'clear' => TRUE,
      ]
    );
  }

  return $text;
}

/**
 * Implements hook_mail_tokens().
 */
function kms_user_mail_tokens(&$replacements, $data, $options) {
  if (isset($data['user'])) {

    global $conf;

    if (!isset($data['checksum'])) {
      $replacements['[user:one-time-login-url]'] = kms_user_pass_reset_url($data['user']);
    }
    else {
      kms_user_pass_reset_url($data['user'], $data['checksum']);
    }


    $replacements['[site:login-url]'] = $conf['kms_site_url_download'];
  }
}

/**
 * Return pass reset URL.
 *
 * @param $account
 *   Drupal user object.
 * @param $hash_value
 *   Hash value used for checking validity of password change request.
 *
 * @return string
 */
function kms_user_pass_reset_url($account, $hash_value = NULL) {
  $timestamp = REQUEST_TIME;
  global $conf;
  $site_url = $conf['kms_site_url_download'] . '/';

  if ($hash_value) {
    $url = url(
      $site_url
      . "user/reset-password-from-link/$account->uid/$timestamp/"
      . user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid)
      . "/" .$hash_value, ['absolute' => FALSE]);
  } else {
    $url = url(
      $site_url
      . "user/reset-password-from-link/$account->uid/$timestamp/"
      . user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid
      ), ['absolute' => FALSE]);
  }

  return $url;
}

/**
 * Get the user type term ID from user.
 *
 * @return array|null
 */
function _kms_user_get_user_type() {
  // Init var.
  $user_type = [];

  // Load the current user.
  global $user;

  if (!$user) {
    return $user_type;
  }

  // Load the user.
  $user = user_load($user->uid);

  if (!empty($user->field_user_type[LANGUAGE_NONE]) && !is_array($user->field_user_type[LANGUAGE_NONE])) {
    return $user_type;
  }


  foreach ($user->field_user_type[LANGUAGE_NONE] as $term) {
    $user_type[] = (int) $term['tid'];
  }

  return $user_type;
}
